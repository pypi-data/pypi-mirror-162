{"version":3,"sources":["MultiTextarea.tsx","index.tsx"],"names":["MultiTextarea","state","stringList","props","args","map","s","idx","value","id","itemIdGen","length","render","label","darkTheme","theme","createTheme","palette","mode","itemList","stringData","Grid","container","key","item","xs","Box","sx","pr","TextField","fullWidth","multiline","onChange","e","onTextfieldChanged","onBlur","onTextfieldBlur","rows","display","justifyContent","alignItems","height","Button","variant","onClick","onDeleteClicked","ThemeProvider","pt","pb","px","width","border","borderRadius","mb","Stack","spacing","Divider","mt","onAddClicked","setState","prevState","Streamlit","setComponentValue","data","targetId","filter","Object","assign","target","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8672309.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport { Box, Stack, TextField, Grid, Button, Divider } from \"@mui/material\"\n\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport { Container } from \"@mui/system\";\n\ninterface State {\n  stringList: Array<StringData>\n  itemIdGen: number\n}\n\ninterface StringData {\n  value: string\n  id: number\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MultiTextarea extends StreamlitComponentBase<State> {\n  public state = { \n    stringList: this.props.args[\"default_list\"] ? this.props.args[\"default_list\"].map((s: string, idx: number) => {return {value: s, id: idx}}) : [], \n    itemIdGen: this.props.args[\"default_list\"] ? this.props.args[\"default_list\"].length : 0\n  }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const label = this.props.args[\"label\"]\n    const defaultValue = this.props.args[\"default_list\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const darkTheme = createTheme({\n      palette: {\n        mode: \"dark\"\n      }\n    })\n\n    const itemList = this.state.stringList.map((stringData: StringData) => (\n      <Grid container key={`stringGrid${stringData.id}`}>\n        <Grid item xs={10.5}>\n          <Box sx={{ pr: 2 }}>\n            <TextField\n              fullWidth\n              multiline\n              label={label}\n              value={stringData.value}\n              onChange={(e) => this.onTextfieldChanged(e, stringData.id)}\n              onBlur={(e) => this.onTextfieldBlur(e, stringData.id)}\n              rows={2}\n            />\n          </Box>\n        </Grid>\n        <Grid item xs={1.5}>\n          <Box \n            display=\"flex\"\n            justifyContent=\"center\" \n            alignItems=\"center\" \n            sx={{ height: \"100%\" }}\n          >\n            <Button variant=\"contained\" onClick={(e) => this.onDeleteClicked(e, stringData.id)}>Delete</Button>\n          </Box>\n        </Grid>\n      </Grid>\n      )\n    )\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <ThemeProvider theme={darkTheme}>\n        <Box sx={{\n          pt: 2,\n          pb: 1,\n          px: 2,\n          width: '100%',\n          border: '1px solid grey',\n          borderRadius: '8px'\n        }}>\n          <Box sx={{\n            mb: 2\n          }}>\n            <Stack spacing={2}>\n              {itemList}\n            </Stack>\n          </Box>\n          <Divider/>\n          <Box sx={{\n            mt: 1\n          }}>\n            <Button onClick={this.onAddClicked}>Add</Button>\n          </Box>\n        </Box>\n      </ThemeProvider>\n    )\n  }\n\n  /** Click handler for \"Add\" button. */\n  private onAddClicked = (): void => {\n    this.setState(\n      prevState => ({ \n        stringList: [...prevState.stringList, { value: \"\", id: prevState.itemIdGen }], \n        itemIdGen: prevState.itemIdGen + 1\n      }),\n      //() => console.log(this.state.stringList)\n      () => Streamlit.setComponentValue(this.state.stringList.map((data: StringData) => data.value))\n    )\n  }\n\n  private onDeleteClicked = (e: React.MouseEvent, targetId: number): void => {\n    this.setState(\n      prevState => ({ stringList: prevState.stringList.filter((stringData: StringData) => {\n        return stringData.id !== targetId\n      })}),\n      //() => console.log(this.state.stringList)\n      () => Streamlit.setComponentValue(this.state.stringList.map((data: StringData) => data.value))\n    )\n  }\n\n  private onTextfieldChanged = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, targetId: number) => {\n    this.setState(\n      prevState => ({ stringList: prevState.stringList.map(\n        stringData => (stringData.id === targetId ? Object.assign(stringData, { value: e.target.value }) : stringData)\n      ) }),\n      //() => Streamlit.setComponentValue(this.state.stringList)\n    )\n  }\n\n  private onTextfieldBlur = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, targetId: number) => {\n    Streamlit.setComponentValue(this.state.stringList.map((data: StringData) => data.value))\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MultiTextarea)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MultiTextarea from \"./MultiTextarea\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MultiTextarea />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}