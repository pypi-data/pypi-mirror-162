{"version":3,"sources":["MultiRowInputs.tsx","index.tsx"],"names":["InputType","MultiRowInputs","props","COLUMN_DATA","state","inputList","args","map","arr","idx","id","value","itemIdGen","length","padTo2Digits","num","toString","padStart","formatDate","date","Date","getFullYear","getMonth","getDate","join","getHours","getMinutes","getSeconds","getDefaultInput","c","type","DATE","TIME","DATETIME","getInputComponent","inputType","label","rowId","columnId","LONG_TEXT","TextField","fullWidth","multiline","onChange","e","onFieldChanged","target","onBlur","onFieldBlur","rows","MobileDatePicker","inputFormat","val","renderInput","params","MobileTimePicker","MobileDateTimePicker","SHORT_TEXT","getRow","inputData","Grid","item","xs","weight","key","Box","sx","pr","pb","render","theme","darkTheme","createTheme","palette","mode","itemList","container","display","justifyContent","alignItems","height","Button","variant","onClick","onDeleteClicked","Divider","LocalizationProvider","dateAdapter","AdapterDateFns","ThemeProvider","pt","px","width","minHeight","border","borderRadius","mb","Stack","spacing","onAddClicked","setState","prevState","Streamlit","setComponentValue","data","targetId","filter","newValue","targetRowId","targetColumnId","update","Object","assign","weightSumList","Array","fill","coefList","forEach","line","n","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc13f73f.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport { Box, Stack, TextField, Grid, Button, Divider } from \"@mui/material\"\n\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport { Container } from \"@mui/system\";\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { MobileDatePicker } from '@mui/x-date-pickers/MobileDatePicker';\nimport { MobileTimePicker } from '@mui/x-date-pickers/MobileTimePicker'\nimport { MobileDateTimePicker } from '@mui/x-date-pickers/MobileDateTimePicker'\n\n\ninterface State {\n  inputList: Array<RowData>\n  itemIdGen: number\n}\n\ninterface RowData {\n  id: number\n  value: Array<string>\n}\n\ninterface ColumnData {\n  type: InputType\n  label: string\n  weight: number\n  line: number\n}\n\nconst enum InputType{\n  SHORT_TEXT = 0,\n  LONG_TEXT = 1,\n  DATE = 2,\n  TIME = 3,\n  DATETIME = 4\n}\n\nclass MultiRowInputs extends StreamlitComponentBase<State> {\n  readonly COLUMN_DATA: Array<ColumnData> \n  \n  constructor(props: any) {\n    super(props)\n\n    let weightSumList: Array<number> = new Array<number>(this.props.args[\"line_num\"]).fill(0)\n    let coefList: Array<number> = new Array<number>(this.props.args[\"line_num\"]).fill(12)\n    this.props.args[\"input_types\"].forEach((e: ColumnData) => {\n      weightSumList[e.line] += e.weight\n    });\n\n    coefList = coefList.map((n: number, idx: number) => n / weightSumList[idx])\n\n    this.COLUMN_DATA = this.props.args[\"input_types\"].map((e: ColumnData) => {\n      e.weight = coefList[e.line] * e.weight\n      return e\n    })\n  }\n\n  public state = { \n    inputList: this.props.args[\"default\"] ? this.props.args[\"default\"].map((arr: Array<string>, idx: number) => {return {id: idx, value: arr}}) : [], \n    itemIdGen: this.props.args[\"default\"] ? this.props.args[\"default\"].length : 0\n  }\n\n  // code snippet from https://bobbyhadz.com/blog/typescript-date-format\n  private padTo2Digits = (num: number) => {\n    return num.toString().padStart(2, '0');\n  }\n\n  private formatDate = (date: Date | null): string => {\n    if (date == null) {\n      return this.formatDate(new Date())\n    }\n\n    return (\n      [\n        date.getFullYear(),\n        this.padTo2Digits(date.getMonth() + 1),\n        this.padTo2Digits(date.getDate()),\n      ].join('-') +\n      ' ' +\n      [\n        this.padTo2Digits(date.getHours()),\n        this.padTo2Digits(date.getMinutes()),\n        this.padTo2Digits(date.getSeconds()),\n      ].join(':')\n    );\n  }\n\n  public getDefaultInput = () => {\n    let defaultInput = this.COLUMN_DATA.map((c: ColumnData) => {\n      return c.type === InputType.DATE || c.type === InputType.TIME || c.type === InputType.DATETIME ? this.formatDate(new Date()) : \"\"\n    })\n\n    return defaultInput\n  }\n\n  public getInputComponent = (inputType: InputType, label: string, value: string | Date, rowId: number, columnId: number): JSX.Element => {\n    switch (inputType) {\n      case InputType.LONG_TEXT:\n        return (<TextField\n          fullWidth\n          multiline\n          label={label}\n          value={value}\n          onChange={(e) => this.onFieldChanged(e.target.value, rowId, columnId)}\n          onBlur={(e) => this.onFieldBlur()}\n          rows={2}\n        />)\n      \n      case InputType.DATE:\n        return (\n        <MobileDatePicker\n          label={label}\n          inputFormat=\"MM/dd/yyyy\"\n          value={value === \"\" ? new Date() : new Date(value)}\n          onChange={(val: Date | null) => {\n            this.onFieldChanged(this.formatDate(val), rowId, columnId, true)\n          }}\n          renderInput={(params) => <TextField {...params} fullWidth/>}\n        />)\n\n      case InputType.TIME:\n        return (<MobileTimePicker\n          label={label}\n          value={value === \"\" ? new Date() : new Date(value)}\n          onChange={(val: Date | null) => {\n            this.onFieldChanged(this.formatDate(val), rowId, columnId, true)\n            this.onFieldBlur()\n          }}\n          renderInput={(params) => <TextField {...params} fullWidth/>}\n        />)\n\n      case InputType.DATETIME:\n        return (<MobileDateTimePicker\n          label={label}\n          value={value === \"\" ? new Date() : new Date(value)}\n          onChange={(val: Date | null) => {\n            this.onFieldChanged(this.formatDate(val), rowId, columnId, true)\n            this.onFieldBlur()\n          }}\n          renderInput={(params) => <TextField {...params} fullWidth/>}\n        />)\n\n      case InputType.SHORT_TEXT:\n      default:\n        return (<TextField\n          fullWidth\n          label={label}\n          value={value}\n          onChange={(e) => this.onFieldChanged(e.target.value, rowId, columnId)}\n          onBlur={(e) => this.onFieldBlur()}\n        />)\n    }\n  }\n\n  public getRow = (inputData: RowData): JSX.Element[] => {\n    const columnItemList = this.COLUMN_DATA.map((c: ColumnData, idx: number) => {\n      return (\n        <Grid item xs={c.weight} key={`item_row_${inputData.id}_col_${idx}`}>\n          <Box sx={{ pr: 2, pb: 2 }}>\n            {this.getInputComponent(c.type, c.label, inputData.value[idx], inputData.id, idx)}\n          </Box>\n        </Grid>\n      )\n    })\n\n    return columnItemList\n  }\n\n  public render = (): ReactNode => {\n    const label = this.props.args[\"label\"]\n    const inputTypes = this.props.args[\"input_types\"]\n    const defaultValue = this.props.args[\"default_list\"]\n\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const darkTheme = createTheme({\n      palette: {\n        mode: \"dark\"\n      }\n    })\n\n    const itemList = this.state.inputList.map((inputData: RowData) => (\n      <Box key={`itemGrid${inputData.id}`}>\n        <Grid container>\n          <Grid item xs={10.5}>\n            <Grid container>\n              {this.getRow(inputData)}\n            </Grid>\n          </Grid>\n          <Grid item xs={1.5}>\n            <Box \n              display=\"flex\"\n              justifyContent=\"center\" \n              alignItems=\"center\" \n              sx={{ height: \"100%\" }}\n            >\n              <Button variant=\"contained\" onClick={(e) => this.onDeleteClicked(e, inputData.id)}>Delete</Button>\n            </Box>\n          </Grid>\n        </Grid>\n        <Divider/>\n      </Box>\n      )\n    )\n\n    return (\n      <LocalizationProvider dateAdapter={AdapterDateFns}>\n        <ThemeProvider theme={darkTheme}>\n          <Box sx={{\n            pt: 2,\n            pb: 1,\n            px: 2,\n            width: '100%',\n            minHeight: '400px',\n            border: '1px solid grey',\n            borderRadius: '8px'\n          }}>\n            <Box sx={{\n              mb: 2\n            }}>\n              <Stack spacing={2}>\n                {itemList}\n              </Stack>\n            </Box>\n            <Box>\n              <Button onClick={this.onAddClicked}>Add</Button>\n            </Box>\n          </Box>\n        </ThemeProvider>\n      </LocalizationProvider>\n    )\n  }\n\n  private onAddClicked = (): void => {\n    this.setState(\n      prevState => ({ \n        inputList: [...prevState.inputList, { value: this.getDefaultInput(), id: prevState.itemIdGen }], \n        itemIdGen: prevState.itemIdGen + 1\n      }),\n      //() => console.log(this.state.stringList)\n      () => Streamlit.setComponentValue(this.state.inputList.map((data: RowData) => data.value))\n    )\n  }\n\n  private onDeleteClicked = (e: React.MouseEvent, targetId: number): void => {\n    this.setState(\n      prevState => ({ inputList: prevState.inputList.filter((inputData: RowData) => {\n        return inputData.id !== targetId\n      })}),\n      //() => console.log(this.state.stringList)\n      () => Streamlit.setComponentValue(this.state.inputList.map((data: RowData) => data.value))\n    )\n  }\n\n  private onFieldChanged = (newValue: string | Date | null, targetRowId: number, targetColumnId: number, update: boolean=false) => {\n    this.setState(\n      prevState => ({ inputList: prevState.inputList.map(\n        inputData => {\n          if (inputData.id === targetRowId) {\n            return Object.assign(inputData, {value: inputData.value.map( (value: string, idx: number) => idx === targetColumnId ? newValue : value )})\n          } else {\n            return inputData\n          }\n        }\n      ) }),\n      () => {\n        if (update){\n          Streamlit.setComponentValue(this.state.inputList.map((data: RowData) => data.value))\n        }\n      }\n    )\n  }\n\n  private onFieldBlur = () => {\n    Streamlit.setComponentValue(this.state.inputList.map((data: RowData) => data.value))\n  }\n}\n\nexport default withStreamlitConnection(MultiRowInputs)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MultiRowInputs from \"./MultiRowInputs\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MultiRowInputs />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}