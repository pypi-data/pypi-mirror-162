# Generated from IslaLanguage.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,339,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
        1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,3,23,202,8,23,
        1,23,4,23,205,8,23,11,23,12,23,206,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,3,24,221,8,24,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,
        1,29,5,29,267,8,29,10,29,12,29,270,9,29,1,29,1,29,1,30,1,30,1,30,
        5,30,277,8,30,10,30,12,30,280,9,30,1,31,4,31,283,8,31,11,31,12,31,
        284,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,
        1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,
        1,42,1,43,1,43,1,44,1,44,1,45,4,45,318,8,45,11,45,12,45,319,1,45,
        1,45,1,46,1,46,5,46,326,8,46,10,46,12,46,329,9,46,1,46,1,46,1,46,
        1,46,1,47,3,47,336,8,47,1,48,1,48,2,268,327,0,49,1,1,3,2,5,3,7,4,
        9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,0,51,25,53,26,
        55,27,57,28,59,29,61,30,63,31,65,32,67,33,69,34,71,35,73,36,75,37,
        77,38,79,39,81,40,83,41,85,42,87,43,89,44,91,45,93,46,95,0,97,0,
        1,0,3,6,0,34,34,92,92,98,98,110,110,114,114,116,116,3,0,9,10,13,
        13,32,32,4,0,45,46,65,90,94,95,97,122,346,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
        0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,1,99,1,0,0,0,
        3,105,1,0,0,0,5,107,1,0,0,0,7,109,1,0,0,0,9,116,1,0,0,0,11,119,1,
        0,0,0,13,126,1,0,0,0,15,128,1,0,0,0,17,132,1,0,0,0,19,136,1,0,0,
        0,21,140,1,0,0,0,23,143,1,0,0,0,25,147,1,0,0,0,27,155,1,0,0,0,29,
        159,1,0,0,0,31,161,1,0,0,0,33,163,1,0,0,0,35,165,1,0,0,0,37,170,
        1,0,0,0,39,176,1,0,0,0,41,181,1,0,0,0,43,186,1,0,0,0,45,192,1,0,
        0,0,47,201,1,0,0,0,49,220,1,0,0,0,51,222,1,0,0,0,53,237,1,0,0,0,
        55,247,1,0,0,0,57,259,1,0,0,0,59,263,1,0,0,0,61,273,1,0,0,0,63,282,
        1,0,0,0,65,286,1,0,0,0,67,289,1,0,0,0,69,291,1,0,0,0,71,294,1,0,
        0,0,73,296,1,0,0,0,75,298,1,0,0,0,77,300,1,0,0,0,79,302,1,0,0,0,
        81,304,1,0,0,0,83,306,1,0,0,0,85,309,1,0,0,0,87,312,1,0,0,0,89,314,
        1,0,0,0,91,317,1,0,0,0,93,323,1,0,0,0,95,335,1,0,0,0,97,337,1,0,
        0,0,99,100,5,99,0,0,100,101,5,111,0,0,101,102,5,110,0,0,102,103,
        5,115,0,0,103,104,5,116,0,0,104,2,1,0,0,0,105,106,5,58,0,0,106,4,
        1,0,0,0,107,108,5,59,0,0,108,6,1,0,0,0,109,110,5,102,0,0,110,111,
        5,111,0,0,111,112,5,114,0,0,112,113,5,97,0,0,113,114,5,108,0,0,114,
        115,5,108,0,0,115,8,1,0,0,0,116,117,5,105,0,0,117,118,5,110,0,0,
        118,10,1,0,0,0,119,120,5,101,0,0,120,121,5,120,0,0,121,122,5,105,
        0,0,122,123,5,115,0,0,123,124,5,116,0,0,124,125,5,115,0,0,125,12,
        1,0,0,0,126,127,5,61,0,0,127,14,1,0,0,0,128,129,5,105,0,0,129,130,
        5,110,0,0,130,131,5,116,0,0,131,16,1,0,0,0,132,133,5,110,0,0,133,
        134,5,111,0,0,134,135,5,116,0,0,135,18,1,0,0,0,136,137,5,97,0,0,
        137,138,5,110,0,0,138,139,5,100,0,0,139,20,1,0,0,0,140,141,5,111,
        0,0,141,142,5,114,0,0,142,22,1,0,0,0,143,144,5,120,0,0,144,145,5,
        111,0,0,145,146,5,114,0,0,146,24,1,0,0,0,147,148,5,105,0,0,148,149,
        5,109,0,0,149,150,5,112,0,0,150,151,5,108,0,0,151,152,5,105,0,0,
        152,153,5,101,0,0,153,154,5,115,0,0,154,26,1,0,0,0,155,156,5,105,
        0,0,156,157,5,102,0,0,157,158,5,102,0,0,158,28,1,0,0,0,159,160,5,
        40,0,0,160,30,1,0,0,0,161,162,5,44,0,0,162,32,1,0,0,0,163,164,5,
        41,0,0,164,34,1,0,0,0,165,166,5,116,0,0,166,167,5,114,0,0,167,168,
        5,117,0,0,168,169,5,101,0,0,169,36,1,0,0,0,170,171,5,102,0,0,171,
        172,5,97,0,0,172,173,5,108,0,0,173,174,5,115,0,0,174,175,5,101,0,
        0,175,38,1,0,0,0,176,177,5,114,0,0,177,178,5,101,0,0,178,179,5,46,
        0,0,179,180,5,43,0,0,180,40,1,0,0,0,181,182,5,114,0,0,182,183,5,
        101,0,0,183,184,5,46,0,0,184,185,5,42,0,0,185,42,1,0,0,0,186,187,
        5,114,0,0,187,188,5,101,0,0,188,189,5,46,0,0,189,190,5,43,0,0,190,
        191,5,43,0,0,191,44,1,0,0,0,192,193,5,115,0,0,193,194,5,116,0,0,
        194,195,5,114,0,0,195,196,5,46,0,0,196,197,5,43,0,0,197,198,5,43,
        0,0,198,46,1,0,0,0,199,202,3,61,30,0,200,202,3,57,28,0,201,199,1,
        0,0,0,201,200,1,0,0,0,202,204,1,0,0,0,203,205,3,49,24,0,204,203,
        1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,48,1,
        0,0,0,208,209,3,67,33,0,209,210,3,57,28,0,210,221,1,0,0,0,211,212,
        3,67,33,0,212,213,3,57,28,0,213,214,3,71,35,0,214,215,3,63,31,0,
        215,216,3,73,36,0,216,221,1,0,0,0,217,218,3,69,34,0,218,219,3,57,
        28,0,219,221,1,0,0,0,220,208,1,0,0,0,220,211,1,0,0,0,220,217,1,0,
        0,0,221,50,1,0,0,0,222,223,5,60,0,0,223,224,5,63,0,0,224,225,5,78,
        0,0,225,226,5,79,0,0,226,227,5,78,0,0,227,228,5,84,0,0,228,229,5,
        69,0,0,229,230,5,82,0,0,230,231,5,77,0,0,231,232,5,73,0,0,232,233,
        5,78,0,0,233,234,5,65,0,0,234,235,5,76,0,0,235,236,5,62,0,0,236,
        52,1,0,0,0,237,238,5,60,0,0,238,239,5,63,0,0,239,240,5,83,0,0,240,
        241,5,84,0,0,241,242,5,82,0,0,242,243,5,73,0,0,243,244,5,78,0,0,
        244,245,5,71,0,0,245,246,5,62,0,0,246,54,1,0,0,0,247,248,5,60,0,
        0,248,249,5,63,0,0,249,250,5,68,0,0,250,251,5,83,0,0,251,252,5,84,
        0,0,252,253,5,82,0,0,253,254,5,73,0,0,254,255,5,78,0,0,255,256,5,
        71,0,0,256,257,5,83,0,0,257,258,5,62,0,0,258,56,1,0,0,0,259,260,
        3,89,44,0,260,261,3,61,30,0,261,262,3,87,43,0,262,58,1,0,0,0,263,
        268,5,34,0,0,264,267,3,65,32,0,265,267,9,0,0,0,266,264,1,0,0,0,266,
        265,1,0,0,0,267,270,1,0,0,0,268,269,1,0,0,0,268,266,1,0,0,0,269,
        271,1,0,0,0,270,268,1,0,0,0,271,272,5,34,0,0,272,60,1,0,0,0,273,
        278,3,95,47,0,274,277,3,95,47,0,275,277,3,97,48,0,276,274,1,0,0,
        0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,
        0,279,62,1,0,0,0,280,278,1,0,0,0,281,283,3,97,48,0,282,281,1,0,0,
        0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,64,1,0,0,0,
        286,287,5,92,0,0,287,288,7,0,0,0,288,66,1,0,0,0,289,290,5,46,0,0,
        290,68,1,0,0,0,291,292,5,46,0,0,292,293,5,46,0,0,293,70,1,0,0,0,
        294,295,5,91,0,0,295,72,1,0,0,0,296,297,5,93,0,0,297,74,1,0,0,0,
        298,299,5,47,0,0,299,76,1,0,0,0,300,301,5,42,0,0,301,78,1,0,0,0,
        302,303,5,43,0,0,303,80,1,0,0,0,304,305,5,45,0,0,305,82,1,0,0,0,
        306,307,5,62,0,0,307,308,5,61,0,0,308,84,1,0,0,0,309,310,5,60,0,
        0,310,311,5,61,0,0,311,86,1,0,0,0,312,313,5,62,0,0,313,88,1,0,0,
        0,314,315,5,60,0,0,315,90,1,0,0,0,316,318,7,1,0,0,317,316,1,0,0,
        0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,
        0,321,322,6,45,0,0,322,92,1,0,0,0,323,327,5,35,0,0,324,326,9,0,0,
        0,325,324,1,0,0,0,326,329,1,0,0,0,327,328,1,0,0,0,327,325,1,0,0,
        0,328,330,1,0,0,0,329,327,1,0,0,0,330,331,5,10,0,0,331,332,1,0,0,
        0,332,333,6,46,0,0,333,94,1,0,0,0,334,336,7,2,0,0,335,334,1,0,0,
        0,336,96,1,0,0,0,337,338,2,48,57,0,338,98,1,0,0,0,12,0,201,206,220,
        266,268,276,278,284,319,327,335,1,6,0,0
    ]

class IslaLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    XPATHEXPR = 24
    NONTERMINAL_PH = 25
    STRING_PH = 26
    DSTRINGS_PH = 27
    VAR_TYPE = 28
    STRING = 29
    ID = 30
    INT = 31
    ESC = 32
    DOT = 33
    TWODOTS = 34
    BROP = 35
    BRCL = 36
    DIV = 37
    MUL = 38
    PLUS = 39
    MINUS = 40
    GEQ = 41
    LEQ = 42
    GT = 43
    LT = 44
    WS = 45
    LINE_COMMENT = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'const'", "':'", "';'", "'forall'", "'in'", "'exists'", "'='", 
            "'int'", "'not'", "'and'", "'or'", "'xor'", "'implies'", "'iff'", 
            "'('", "','", "')'", "'true'", "'false'", "'re.+'", "'re.*'", 
            "'re.++'", "'str.++'", "'<?NONTERMINAL>'", "'<?STRING>'", "'<?DSTRINGS>'", 
            "'.'", "'..'", "'['", "']'", "'/'", "'*'", "'+'", "'-'", "'>='", 
            "'<='", "'>'", "'<'" ]

    symbolicNames = [ "<INVALID>",
            "XPATHEXPR", "NONTERMINAL_PH", "STRING_PH", "DSTRINGS_PH", "VAR_TYPE", 
            "STRING", "ID", "INT", "ESC", "DOT", "TWODOTS", "BROP", "BRCL", 
            "DIV", "MUL", "PLUS", "MINUS", "GEQ", "LEQ", "GT", "LT", "WS", 
            "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "XPATHEXPR", "XPATHSEGMENT", 
                  "NONTERMINAL_PH", "STRING_PH", "DSTRINGS_PH", "VAR_TYPE", 
                  "STRING", "ID", "INT", "ESC", "DOT", "TWODOTS", "BROP", 
                  "BRCL", "DIV", "MUL", "PLUS", "MINUS", "GEQ", "LEQ", "GT", 
                  "LT", "WS", "LINE_COMMENT", "ID_LETTER", "DIGIT" ]

    grammarFileName = "IslaLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


