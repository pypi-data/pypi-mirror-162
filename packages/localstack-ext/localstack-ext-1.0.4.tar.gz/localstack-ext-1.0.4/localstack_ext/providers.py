_Q='cognito-identity'
_P='cloudwatch'
_O='lambda'
_N='timestream-query'
_M='timestream-write'
_L='redshift-data'
_K='rds-data'
_J='qldb-session'
_I='mediastore-data'
_H='iot-data'
_G='cognito-idp'
_F='application-autoscaling'
_E='legacy_pro'
_D='sqs'
_C='apigateway'
_B='eks'
_A='apigatewayv2'
import functools
from localstack.aws.proxy import AwsApiListener
from localstack.config import is_env_true
from localstack.constants import ENV_PRO_ACTIVATED
from localstack.services.moto import MotoFallbackDispatcher
from localstack.services.plugins import Service,aws_provider
pro_aws_provider=functools.partial(aws_provider,name='pro',should_load=lambda:is_env_true(ENV_PRO_ACTIVATED))
@pro_aws_provider()
def amplify():B='amplify';from localstack_ext.services.amplify.provider import AmplifyProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def apigatewaymanagementapi():A='apigatewaymanagementapi';from localstack_ext.services.apigateway.provider_mgmtapi import ApigatewaymanagementapiProvider as B;C=B();D=AwsApiListener(A,C);return Service(A,listener=D)
@pro_aws_provider(api=_A,name=_E)
def apigatewayv2_legacy():from localstack_ext.services.apigateway.provider_v2 import ApiGatewayV2Provider as B;A=B();C=AwsApiListener(_A,A);return Service(_A,listener=C,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def apigatewayv2():from localstack_ext.services.apigateway.provider_v2_asf import AsfApiGatewayV2Provider as B;A=B();C=AwsApiListener(_A,A);return Service(_A,listener=C,lifecycle_hook=A)
@pro_aws_provider()
def appconfig():B='appconfig';from localstack_ext.services.appconfig.provider import AppconfigProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider(api=_F)
def application_autoscaling():from localstack_ext.services.applicationautoscaling.provider import ApplicationAutoscalingProvider as B;A=B();return Service(_F,listener=AwsApiListener(_F,MotoFallbackDispatcher(A)),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def appsync():B='appsync';from localstack_ext.services.appsync.provider import AppSyncProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def athena():B='athena';from localstack_ext.services.athena.provider import AthenaProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def autoscaling():B='autoscaling';from localstack_ext.services.autoscaling.provider import AutoscalingProvider as C;A=C();return Service(B,listener=AwsApiListener(B,MotoFallbackDispatcher(A)),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider(should_load=lambda:is_env_true(ENV_PRO_ACTIVATED)and is_env_true('AZURE'))
def azure():from localstack_ext.services.azure import azure_starter as A;return Service('azure',start=A.start_azure)
@pro_aws_provider()
def backup():B='backup';from localstack_ext.services.backup.provider import BackupProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def batch():B='batch';from localstack_ext.services.batch.provider import BatchProvider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,backend_state_lifecycle=A)
@pro_aws_provider()
def ce():from localstack_ext.services.costexplorer.provider import CeProvider as B;A=B();return Service('ce',listener=AwsApiListener('ce',A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def cloudfront():B='cloudfront';from localstack_ext.services.cloudfront.provider import CloudFrontProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def cloudtrail():B='cloudtrail';from localstack_ext.services.cloudtrail.provider import CloudtrailProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def codecommit():B='codecommit';from localstack_ext.services.codecommit.provider import CodecommitProvider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider(api=_Q)
def cognito_identity():from localstack_ext.services.cognito_identity.provider import CognitoIdentityAWSApiListener as B;A=B();return Service(_Q,listener=A,lifecycle_hook=A.provider,backend_state_lifecycle=A.provider)
@pro_aws_provider(api=_G)
def cognito_idp():from localstack_ext.services.cognito_idp.provider import CognitoIdpProvider as B;A=B();return Service(_G,listener=AwsApiListener(_G,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def docdb():from localstack_ext.services.docdb import docdb_api as A;return Service('docdb',start=A.start_docdb)
@pro_aws_provider()
def ec2():B='ec2';from localstack_ext.services.ec2.provider import Ec2Provider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def ecr():B='ecr';from localstack_ext.services.ecr.provider import EcrProvider as C;A=C();return Service(B,listener=AwsApiListener(B,MotoFallbackDispatcher(A)),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def ecs():B='ecs';from localstack_ext.services.ecs.provider import ECSProvider as C;A=C();return Service(B,listener=AwsApiListener(B,MotoFallbackDispatcher(A)),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def efs():B='efs';from localstack_ext.services.efs.provider import EfsProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def elasticache():B='elasticache';from localstack_ext.services.elasticache.provider import ElasticacheProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def elasticbeanstalk():B='elasticbeanstalk';from localstack_ext.services.elasticbeanstalk.provider import ElasticBeanstalkProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def elb():B='elb';from localstack_ext.services.elb.provider import ElbProvider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def elbv2():B='elbv2';from localstack_ext.services.elbv2.provider import Elbv2Provider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def eks():from localstack_ext.services.eks.provider import EksProvider as B;A=B();return Service(_B,listener=AwsApiListener(_B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def emr():B='emr';from localstack_ext.services.emr.provider import EmrProvider as C;A=C();return Service(B,listener=AwsApiListener(B,MotoFallbackDispatcher(A)),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def glacier():B='glacier';from localstack_ext.services.glacier.provider import GlacierProvider as C;A=C();return Service(B,listener=AwsApiListener(B,MotoFallbackDispatcher(A)),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def glue():B='glue';from localstack_ext.services.glue.provider import GlueProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def iot():B='iot';from localstack_ext.services.iot.provider import IotProvider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider(api=_H)
def iot_data():from localstack_ext.services.iot_data.provider import IotDataProvider as B;A=B();C=AwsApiListener(_H,MotoFallbackDispatcher(A));return Service(_H,listener=C,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def iotanalytics():B='iotanalytics';from localstack_ext.services.iotanalytics.provider import IotAnalyticsProvider as C;A=C();D=AwsApiListener(B,A);return Service(B,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def iotwireless():B='iotwireless';from localstack_ext.services.iotwireless.provider import IotWirelessProvider as C;A=C();D=AwsApiListener(B,A);return Service(B,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def kafka():B='kafka';from localstack_ext.services.kafka.provider import KafkaProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),backend_state_lifecycle=A)
@pro_aws_provider()
def kinesisanalytics():B='kinesisanalytics';from localstack.aws.proxy import AwsApiListener as C;from localstack_ext.services.kinesisanalytics.provider import KinesisAnalyticsProvider as D;A=D();return Service(B,listener=C(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def kinesisanalyticsv2():B='kinesisanalyticsv2';from localstack.aws.proxy import AwsApiListener as C;from localstack_ext.services.kinesisanalyticsv2.provider import KinesisAnalyticsV2Provider as D;A=D();return Service(B,listener=C(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def kinesis():B='kinesis';from localstack.services.kinesis import kinesis_listener as C,kinesis_starter as A;from localstack_ext.services.kinesis.provider import KinesisDummyProvider as D;return Service(B,listener=C.UPDATE_KINESIS,start=A.start_kinesis,check=A.check_kinesis,backend_state_lifecycle=D(B))
@pro_aws_provider()
def lakeformation():B='lakeformation';from localstack_ext.services.lakeformation.provider import LakeFormationProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def logs():from localstack_ext.services.logs.logs_extended import ExtendedLogsAwsApiListener as C;A=C();B=A.provider;return Service('logs',listener=A,lifecycle_hook=B,backend_state_lifecycle=B)
@pro_aws_provider()
def mediastore():B='mediastore';from localstack_ext.services.mediastore.provider import MediastoreProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider(api=_I)
def mediastore_data():from localstack_ext.services.mediastore.provider import MediaStoreDataProvider as B;A=B();return Service(_I,listener=AwsApiListener(_I,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def mwaa():B='mwaa';from localstack_ext.services.mwaa.provider import MwaaProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def neptune():from localstack_ext.services.neptune import neptune_api as A;return Service('neptune',start=A.start_neptune)
@pro_aws_provider()
def organizations():A='organizations';from localstack_ext.services.organizations.provider import OrganizationsProvider as B;C=B();D=AwsApiListener(A,MotoFallbackDispatcher(C));return Service(A,listener=D)
@pro_aws_provider()
def qldb():B='qldb';from localstack_ext.services.qldb.provider import QldbProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider(api=_J)
def qldb_session():from localstack_ext.services.qldb.provider import QldbSessionProvider as B;A=B();return Service(_J,listener=AwsApiListener(_J,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def rds():B='rds';from localstack_ext.services.rds.provider import RdsProvider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,lifecycle_hook=A)
@pro_aws_provider(api=_K)
def rds_data():from localstack_ext.services.rds_data.provider import RdsDataProvider as A;B=A();return Service(_K,listener=AwsApiListener(_K,B))
@pro_aws_provider()
def redshift():B='redshift';from localstack_ext.services.redshift.provider import RedshiftProvider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider(api=_L)
def redshift_data():from localstack_ext.services.redshift.provider import RedshiftDataProvider as A;B=A();C=AwsApiListener(_L,B);return Service(_L,listener=C)
@pro_aws_provider()
def sagemaker():B='sagemaker';from localstack_ext.services.sagemaker.provider import SagemakerProvider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,backend_state_lifecycle=A)
@pro_aws_provider()
def serverlessrepo():B='serverlessrepo';from localstack_ext.services.serverlessrepo.provider import ServerlessrepoProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def servicediscovery():B='servicediscovery';from localstack_ext.services.servicediscovery.provider import ServicediscoveryProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def ssm():B='ssm';from localstack_ext.services.ssm.provider import SsmProvider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider(api=_M)
def timestream_write():from localstack_ext.services.timestream.provider import TimestreamWriteProvider as B;A=B();return Service(_M,listener=AwsApiListener(_M,A),backend_state_lifecycle=A)
@pro_aws_provider(api=_N)
def timestream_query():from localstack_ext.services.timestream.provider import TimestreamQueryProvider as B;A=B();return Service(_N,listener=AwsApiListener(_N,A),backend_state_lifecycle=A)
@pro_aws_provider()
def transfer():B='transfer';from localstack_ext.services.transfer.provider import TransferProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def xray():B='xray';from localstack_ext.services.xray.provider import XrayProvider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,backend_state_lifecycle=A)
@pro_aws_provider(api=_C,name=_E)
def apigateway_legacy():from localstack_ext.services.apigateway.apigateway_extended import ApigatewayExtApiListener as B,ApigatewayExtProvider as C;A=C();D=B(_C,MotoFallbackDispatcher(A));return Service(_C,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def apigateway():from localstack_ext.services.apigateway.apigateway_extended_asf import AsfApigatewayExtProvider as B;A=B();C=AwsApiListener(_C,MotoFallbackDispatcher(A));return Service(_C,listener=C,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider(api=_O)
def awslambda():from localstack.services.awslambda import lambda_starter as A;from localstack_ext.services.awslambda.lambda_extended import patch_lambda as B;from localstack_ext.services.awslambda.persistence import LambdaPersistenceLifeCycle as C;B();return Service(_O,start=A.start_lambda,stop=A.stop_lambda,check=A.check_lambda,backend_state_lifecycle=C(_O))
@pro_aws_provider(api=_P)
def cloudwatch():from localstack_ext.services.cloudwatch.provider import CloudwatchProvider as B;A=B();return Service(_P,listener=AwsApiListener(_P,MotoFallbackDispatcher(A)),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def cloudformation():A='cloudformation';from localstack.services.cloudformation.provider import CloudformationProvider as B;from localstack_ext.persistence.persistence_lifecycle import DummyProvider as C;from localstack_ext.services.cloudformation import cloudformation_extended as D;D.patch_cloudformation();E=B();return Service(A,listener=AwsApiListener(A,E),backend_state_lifecycle=C(A))
@pro_aws_provider()
def dynamodb():from localstack.services.dynamodb.provider import DynamoDBApiListener as B;from localstack_ext.services.dynamodb.provider import DynamoDBProviderExt as C;A=C();D=B(provider=A);return Service('dynamodb',listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def dynamodbstreams():B='dynamodbstreams';from localstack_ext.services.dynamodbstreams.provider import DynamoDBStreamsExtProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def events():B='events';from localstack.services.moto import MotoFallbackDispatcher as C;from localstack_ext.services.events.provider import EventsProviderPro as D;A=D();return Service(B,listener=AwsApiListener(B,C(A)),backend_state_lifecycle=A)
@pro_aws_provider()
def iam():B='iam';from localstack_ext.services.iam.iam_extended import IamProviderExt as C;A=C();return Service(B,listener=AwsApiListener(B,MotoFallbackDispatcher(A)),backend_state_lifecycle=A)
@pro_aws_provider()
def kms():from localstack.services.providers import kms as A;from localstack_ext.services.kms import kms_extended as B;B.patch_kms();return A.factory.__wrapped__()
@pro_aws_provider()
def opensearch():B='opensearch';from localstack_ext.services.opensearch.provider import OpensearchProvider as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A)
@pro_aws_provider()
def route53():B='route53';from localstack_ext.services.route53.provider import Route53ProviderPro as C;A=C();return Service(B,listener=AwsApiListener(B,MotoFallbackDispatcher(A)),backend_state_lifecycle=A)
@pro_aws_provider()
def s3():from localstack.services.s3 import s3_listener as B,s3_starter as A;from localstack_ext.services.s3 import s3_extended as C;from localstack_ext.services.s3.s3_extended import S3PersistenceLifeCycle as D;C.patch_s3();return Service('s3',listener=B.UPDATE_S3,start=A.start_s3,check=A.check_s3,backend_state_lifecycle=D('s3'))
@pro_aws_provider()
def secretsmanager():B='secretsmanager';from localstack_ext.services.secretsmanager.secretsmanager_extended import SecretsmanagerProviderExt as C;A=C();return Service(B,listener=AwsApiListener(B,MotoFallbackDispatcher(A)),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def ses():B='ses';from localstack_ext.services.ses.provider import SesProvider as C;A=C();D=AwsApiListener(B,MotoFallbackDispatcher(A));return Service(B,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def sesv2():B='sesv2';from localstack_ext.services.sesv2.provider import Sesv2Provider as C;A=C();D=AwsApiListener(B,A);return Service(B,listener=D,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def sns():B='sns';from localstack_ext.services.sns.sns_extended import SnsProviderExt as C;A=C();return Service(B,listener=AwsApiListener(B,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def sqs():from localstack.services import edge;from localstack.services.sqs import query_api as B;from localstack_ext.services.sqs.provider import SqsProvider as C;B.register(edge.ROUTER);A=C();return Service(_D,listener=AwsApiListener(_D,A),lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider(api=_D,name=_E)
def sqs_legacy():from localstack.services.sqs.legacy import sqs_listener as B,sqs_starter as A;from localstack_ext.services.sqs.legacy.sqs_extended import patch_sqs as C;C();return Service(_D,listener=B.UPDATE_SQS,start=A.start_sqs,check=A.check_sqs)
@pro_aws_provider()
def stepfunctions():from localstack.services.stepfunctions.provider import StepFunctionsApiListener as B;from localstack_ext.services.stepfunctions.stepfunctions_extended import StepFunctionsExtProvider as C,patch_stepfunctions as D;D();A=C();E=B(provider=A);return Service('stepfunctions',listener=E,lifecycle_hook=A,backend_state_lifecycle=A)
@pro_aws_provider()
def sts():from localstack.services.providers import sts as A;from localstack_ext.services.sts import sts_extended as B;B.patch_sts();return A.factory.__wrapped__()
@pro_aws_provider(name='mock',api=_B)
def eks_mock():from localstack_ext.services.eks.provider import EksMockProvider as B;A=B();return Service(_B,listener=AwsApiListener(_B,A),lifecycle_hook=A)