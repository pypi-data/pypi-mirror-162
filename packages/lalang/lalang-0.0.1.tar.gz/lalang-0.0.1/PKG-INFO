Metadata-Version: 2.1
Name: lalang
Version: 0.0.1
Summary: Lazy programmer's own language
Author-email: yusef <yusef314159@gmail.com>
License: Copyright (c) 2018 The Python Packaging Authority
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/uulum/lalang
Project-URL: Bug Tracker, https://github.com/uulum/lalang/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE

# LALANG

A language transpiler for lazy polyglot programmers.

# Current status is still buggy (or rather, incomplete)

Some updates have not been applied to current version due to not enough free time.

# Usage

`language_specifier/lalang_code`

For example:
`py/the-code-goes-here`

# Examples

## Variable declaration

Create a variable `name` with value `Sarah`
`go/$name='Sarah'`

Output: `var name = "Sarah"`

Same as above, with type annotation:
Output: `var name string = "Sarah"`

Similarly for Typescript: 
`ts/$name='Sarah'`

the output will be: 
`let name: string = "Sarah";`

## Constant declaration

## Control flow

## Function

## Class

...(more to come)
