# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class InlineResponse200236Showsnapshotsoncgresponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'snapshots_count': 'int',
        'snapshots': 'list[InlineResponse200236ShowsnapshotsoncgresponseSnapshots]'
    }

    attribute_map = {
        'status': 'status',
        'snapshots_count': 'snapshots-count',
        'snapshots': 'snapshots'
    }

    def __init__(self, status=None, snapshots_count=None, snapshots=None, _configuration=None):  # noqa: E501
        """InlineResponse200236Showsnapshotsoncgresponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._snapshots_count = None
        self._snapshots = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if snapshots_count is not None:
            self.snapshots_count = snapshots_count
        if snapshots is not None:
            self.snapshots = snapshots

    @property
    def status(self):
        """Gets the status of this InlineResponse200236Showsnapshotsoncgresponse.  # noqa: E501


        :return: The status of this InlineResponse200236Showsnapshotsoncgresponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200236Showsnapshotsoncgresponse.


        :param status: The status of this InlineResponse200236Showsnapshotsoncgresponse.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def snapshots_count(self):
        """Gets the snapshots_count of this InlineResponse200236Showsnapshotsoncgresponse.  # noqa: E501


        :return: The snapshots_count of this InlineResponse200236Showsnapshotsoncgresponse.  # noqa: E501
        :rtype: int
        """
        return self._snapshots_count

    @snapshots_count.setter
    def snapshots_count(self, snapshots_count):
        """Sets the snapshots_count of this InlineResponse200236Showsnapshotsoncgresponse.


        :param snapshots_count: The snapshots_count of this InlineResponse200236Showsnapshotsoncgresponse.  # noqa: E501
        :type: int
        """

        self._snapshots_count = snapshots_count

    @property
    def snapshots(self):
        """Gets the snapshots of this InlineResponse200236Showsnapshotsoncgresponse.  # noqa: E501


        :return: The snapshots of this InlineResponse200236Showsnapshotsoncgresponse.  # noqa: E501
        :rtype: list[InlineResponse200236ShowsnapshotsoncgresponseSnapshots]
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this InlineResponse200236Showsnapshotsoncgresponse.


        :param snapshots: The snapshots of this InlineResponse200236Showsnapshotsoncgresponse.  # noqa: E501
        :type: list[InlineResponse200236ShowsnapshotsoncgresponseSnapshots]
        """

        self._snapshots = snapshots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200236Showsnapshotsoncgresponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200236Showsnapshotsoncgresponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200236Showsnapshotsoncgresponse):
            return True

        return self.to_dict() != other.to_dict()
