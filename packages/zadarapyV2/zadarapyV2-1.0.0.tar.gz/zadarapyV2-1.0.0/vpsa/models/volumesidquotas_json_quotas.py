# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class VolumesidquotasJsonQuotas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'int',
        'source_type': 'str',
        'nas_type': 'str',
        'limit': 'str'
    }

    attribute_map = {
        'source_id': 'source_id',
        'source_type': 'source_type',
        'nas_type': 'nas_type',
        'limit': 'limit'
    }

    def __init__(self, source_id=None, source_type=None, nas_type=None, limit=None, _configuration=None):  # noqa: E501
        """VolumesidquotasJsonQuotas - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._source_id = None
        self._source_type = None
        self._nas_type = None
        self._limit = None
        self.discriminator = None

        if source_id is not None:
            self.source_id = source_id
        if source_type is not None:
            self.source_type = source_type
        if nas_type is not None:
            self.nas_type = nas_type
        if limit is not None:
            self.limit = limit

    @property
    def source_id(self):
        """Gets the source_id of this VolumesidquotasJsonQuotas.  # noqa: E501


        :return: The source_id of this VolumesidquotasJsonQuotas.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this VolumesidquotasJsonQuotas.


        :param source_id: The source_id of this VolumesidquotasJsonQuotas.  # noqa: E501
        :type: int
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this VolumesidquotasJsonQuotas.  # noqa: E501


        :return: The source_type of this VolumesidquotasJsonQuotas.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this VolumesidquotasJsonQuotas.


        :param source_type: The source_type of this VolumesidquotasJsonQuotas.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def nas_type(self):
        """Gets the nas_type of this VolumesidquotasJsonQuotas.  # noqa: E501


        :return: The nas_type of this VolumesidquotasJsonQuotas.  # noqa: E501
        :rtype: str
        """
        return self._nas_type

    @nas_type.setter
    def nas_type(self, nas_type):
        """Sets the nas_type of this VolumesidquotasJsonQuotas.


        :param nas_type: The nas_type of this VolumesidquotasJsonQuotas.  # noqa: E501
        :type: str
        """
        allowed_values = ["ad", "uid", "nas"]  # noqa: E501
        if (self._configuration.client_side_validation and
                nas_type not in allowed_values):
            raise ValueError(
                "Invalid value for `nas_type` ({0}), must be one of {1}"  # noqa: E501
                .format(nas_type, allowed_values)
            )

        self._nas_type = nas_type

    @property
    def limit(self):
        """Gets the limit of this VolumesidquotasJsonQuotas.  # noqa: E501


        :return: The limit of this VolumesidquotasJsonQuotas.  # noqa: E501
        :rtype: str
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this VolumesidquotasJsonQuotas.


        :param limit: The limit of this VolumesidquotasJsonQuotas.  # noqa: E501
        :type: str
        """

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumesidquotasJsonQuotas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumesidquotasJsonQuotas):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VolumesidquotasJsonQuotas):
            return True

        return self.to_dict() != other.to_dict()
