# coding: utf-8

"""
    VPSA api

    VPSA operations  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from vpsa.configuration import Configuration


class InlineResponse20050FlcdataresponseUsages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uncategorized': 'InlineResponse20050FlcdataresponseUncategorized',
        'documents_spreadsheets_and_text_files': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles',
        'temporary_files': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles',
        'backup_files': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles',
        'archive_files': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles',
        'audio_files': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles',
        'disk_images': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles',
        'installers': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles',
        'image_files': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles',
        'log_files': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles',
        'email_data': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles',
        'server_virtualization': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles',
        'video_files': 'InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles'
    }

    attribute_map = {
        'uncategorized': 'Uncategorized',
        'documents_spreadsheets_and_text_files': 'Documents Spreadsheets and text files',
        'temporary_files': 'Temporary files',
        'backup_files': 'Backup files',
        'archive_files': 'Archive files',
        'audio_files': 'Audio files',
        'disk_images': 'Disk Images',
        'installers': 'Installers',
        'image_files': 'Image files',
        'log_files': 'Log Files',
        'email_data': 'Email Data',
        'server_virtualization': 'Server Virtualization',
        'video_files': 'Video files'
    }

    def __init__(self, uncategorized=None, documents_spreadsheets_and_text_files=None, temporary_files=None, backup_files=None, archive_files=None, audio_files=None, disk_images=None, installers=None, image_files=None, log_files=None, email_data=None, server_virtualization=None, video_files=None, _configuration=None):  # noqa: E501
        """InlineResponse20050FlcdataresponseUsages - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uncategorized = None
        self._documents_spreadsheets_and_text_files = None
        self._temporary_files = None
        self._backup_files = None
        self._archive_files = None
        self._audio_files = None
        self._disk_images = None
        self._installers = None
        self._image_files = None
        self._log_files = None
        self._email_data = None
        self._server_virtualization = None
        self._video_files = None
        self.discriminator = None

        if uncategorized is not None:
            self.uncategorized = uncategorized
        if documents_spreadsheets_and_text_files is not None:
            self.documents_spreadsheets_and_text_files = documents_spreadsheets_and_text_files
        if temporary_files is not None:
            self.temporary_files = temporary_files
        if backup_files is not None:
            self.backup_files = backup_files
        if archive_files is not None:
            self.archive_files = archive_files
        if audio_files is not None:
            self.audio_files = audio_files
        if disk_images is not None:
            self.disk_images = disk_images
        if installers is not None:
            self.installers = installers
        if image_files is not None:
            self.image_files = image_files
        if log_files is not None:
            self.log_files = log_files
        if email_data is not None:
            self.email_data = email_data
        if server_virtualization is not None:
            self.server_virtualization = server_virtualization
        if video_files is not None:
            self.video_files = video_files

    @property
    def uncategorized(self):
        """Gets the uncategorized of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The uncategorized of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseUncategorized
        """
        return self._uncategorized

    @uncategorized.setter
    def uncategorized(self, uncategorized):
        """Sets the uncategorized of this InlineResponse20050FlcdataresponseUsages.


        :param uncategorized: The uncategorized of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseUncategorized
        """

        self._uncategorized = uncategorized

    @property
    def documents_spreadsheets_and_text_files(self):
        """Gets the documents_spreadsheets_and_text_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The documents_spreadsheets_and_text_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._documents_spreadsheets_and_text_files

    @documents_spreadsheets_and_text_files.setter
    def documents_spreadsheets_and_text_files(self, documents_spreadsheets_and_text_files):
        """Sets the documents_spreadsheets_and_text_files of this InlineResponse20050FlcdataresponseUsages.


        :param documents_spreadsheets_and_text_files: The documents_spreadsheets_and_text_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._documents_spreadsheets_and_text_files = documents_spreadsheets_and_text_files

    @property
    def temporary_files(self):
        """Gets the temporary_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The temporary_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._temporary_files

    @temporary_files.setter
    def temporary_files(self, temporary_files):
        """Sets the temporary_files of this InlineResponse20050FlcdataresponseUsages.


        :param temporary_files: The temporary_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._temporary_files = temporary_files

    @property
    def backup_files(self):
        """Gets the backup_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The backup_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._backup_files

    @backup_files.setter
    def backup_files(self, backup_files):
        """Sets the backup_files of this InlineResponse20050FlcdataresponseUsages.


        :param backup_files: The backup_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._backup_files = backup_files

    @property
    def archive_files(self):
        """Gets the archive_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The archive_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._archive_files

    @archive_files.setter
    def archive_files(self, archive_files):
        """Sets the archive_files of this InlineResponse20050FlcdataresponseUsages.


        :param archive_files: The archive_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._archive_files = archive_files

    @property
    def audio_files(self):
        """Gets the audio_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The audio_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._audio_files

    @audio_files.setter
    def audio_files(self, audio_files):
        """Sets the audio_files of this InlineResponse20050FlcdataresponseUsages.


        :param audio_files: The audio_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._audio_files = audio_files

    @property
    def disk_images(self):
        """Gets the disk_images of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The disk_images of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._disk_images

    @disk_images.setter
    def disk_images(self, disk_images):
        """Sets the disk_images of this InlineResponse20050FlcdataresponseUsages.


        :param disk_images: The disk_images of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._disk_images = disk_images

    @property
    def installers(self):
        """Gets the installers of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The installers of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._installers

    @installers.setter
    def installers(self, installers):
        """Sets the installers of this InlineResponse20050FlcdataresponseUsages.


        :param installers: The installers of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._installers = installers

    @property
    def image_files(self):
        """Gets the image_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The image_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._image_files

    @image_files.setter
    def image_files(self, image_files):
        """Sets the image_files of this InlineResponse20050FlcdataresponseUsages.


        :param image_files: The image_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._image_files = image_files

    @property
    def log_files(self):
        """Gets the log_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The log_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._log_files

    @log_files.setter
    def log_files(self, log_files):
        """Sets the log_files of this InlineResponse20050FlcdataresponseUsages.


        :param log_files: The log_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._log_files = log_files

    @property
    def email_data(self):
        """Gets the email_data of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The email_data of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._email_data

    @email_data.setter
    def email_data(self, email_data):
        """Sets the email_data of this InlineResponse20050FlcdataresponseUsages.


        :param email_data: The email_data of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._email_data = email_data

    @property
    def server_virtualization(self):
        """Gets the server_virtualization of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The server_virtualization of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._server_virtualization

    @server_virtualization.setter
    def server_virtualization(self, server_virtualization):
        """Sets the server_virtualization of this InlineResponse20050FlcdataresponseUsages.


        :param server_virtualization: The server_virtualization of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._server_virtualization = server_virtualization

    @property
    def video_files(self):
        """Gets the video_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501


        :return: The video_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :rtype: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """
        return self._video_files

    @video_files.setter
    def video_files(self, video_files):
        """Sets the video_files of this InlineResponse20050FlcdataresponseUsages.


        :param video_files: The video_files of this InlineResponse20050FlcdataresponseUsages.  # noqa: E501
        :type: InlineResponse20050FlcdataresponseDocumentsSpreadsheetsAndTextFiles
        """

        self._video_files = video_files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20050FlcdataresponseUsages, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20050FlcdataresponseUsages):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20050FlcdataresponseUsages):
            return True

        return self.to_dict() != other.to_dict()
