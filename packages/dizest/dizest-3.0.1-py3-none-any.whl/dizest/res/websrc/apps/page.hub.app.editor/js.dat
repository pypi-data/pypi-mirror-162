let resizer = (file, width, quality) => new Promise((resolve) => {
    if (!quality) quality = 0.8;
    if (!width) width = 64;

    let photo = function (file, maxSize, callback) {
        let reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = function (readerEvent) {
            resize(readerEvent.target.result, maxSize, callback);
        };
    }

    let resize = function (dataURL, maxSize, callback) {
        let image = new Image();

        image.onload = function () {
            let canvas = document.createElement('canvas'),
                width = image.width,
                height = image.height;
            if (width > height) {
                if (width > maxSize) {
                    height *= maxSize / width;
                    width = maxSize;
                }
            } else {
                if (height > maxSize) {
                    width *= maxSize / height;
                    height = maxSize;
                }
            }
            canvas.width = width;
            canvas.height = height;
            canvas.getContext('2d').drawImage(image, 0, 0, width, height);
            output(canvas, callback);
        };

        image.onerror = function () {
            return;
        };

        image.src = dataURL;
    };

    let output = function (canvas, callback) {
        let blob = canvas.toDataURL('image/jpeg', quality);
        callback(blob);
    }

    photo(file, width, (blob) => {
        resolve(blob);
    });
});

let wiz_controller = async ($sce, $scope, $timeout) => {
    let _$timeout = $timeout;
    $timeout = (timestamp) => new Promise((resolve) => _$timeout(resolve, timestamp));
    $scope.trustAsHtml = $sce.trustAsHtml;

    let alert = async (message) => {
        await wiz.connect("page.hub.app.editor.modal.message")
            .data({
                title: "Alert",
                message: message,
                btn_action: "Close",
                btn_class: "btn-primary"
            })
            .event("modal-show");
    }

    let monaco_option = (language) => {
        let opt = {
            value: '',
            language: language,
            theme: "vs",
            fontSize: 14,
            automaticLayout: true,
            minimap: {
                enabled: false
            }
        };

        opt.onLoad = async (editor) => {
            let shortcuts = $scope.shortcut.configuration(window.monaco);
            for (let shortcutname in shortcuts) {
                let monacokey = shortcuts[shortcutname].monaco;
                let fn = shortcuts[shortcutname].fn;
                if (!monacokey) continue;

                editor.addCommand(monacokey, async () => {
                    await fn();
                    await $scope.shortcut.bind();
                });
            }
        }

        return opt;
    }

    $scope.sortableOptions = { handle: '.draggable' };

    $scope.layout = {};
    $scope.layout.checker = (tab) => {
        if (tab == 'tab1') {
            return true;
        } else if (tab == 'tab2') {
            if ([2, 3, 5, 6].includes($scope.layout.active_layout)) {
                return true;
            }
        } else if (tab == 'tab3') {
            if ([3, 6].includes($scope.layout.active_layout)) {
                return true;
            }
        }
        return false;
    }
    $scope.layout.viewstate = {};
    $scope.layout.viewstate.horizonal = {};
    $scope.layout.viewstate.vertical_1_1 = {};
    $scope.layout.viewstate.vertical_1_2 = {};

    if ($(window).width() > 2560) $scope.layout.active_layout = 6;
    else if ($(window).width() > 1640) $scope.layout.active_layout = 5;
    else $scope.layout.active_layout = 4;

    $scope.layout.change = async (layout) => {
        await $timeout();

        $scope.layout.active_layout = layout;

        let _height = $('#editor-area').height();
        let _width = $('#editor-area').width();

        function _horizonal_split() {
            var h = Math.round(_height / 3);
            if (h > 400) h = 400;
            $scope.layout.viewstate.horizonal.lastComponentSize = h;
        }

        function _horizonal_top() {
            $scope.layout.viewstate.horizonal.lastComponentSize = 0;
        }

        if (layout == 1) {
            _horizonal_top();
            $scope.layout.viewstate.vertical_1_1.lastComponentSize = 0;
        } else if (layout == 2) {
            _horizonal_top();
            $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 2);
            $scope.layout.viewstate.vertical_1_2.lastComponentSize = 0;
        } else if (layout == 3) {
            _horizonal_top();
            $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 3 * 2);
            $scope.layout.viewstate.vertical_1_2.lastComponentSize = Math.round(_width / 3);
        } else if (layout == 4) {
            _horizonal_split();
            $scope.layout.viewstate.vertical_1_1.firstComponentSize = _width;
            $scope.layout.viewstate.vertical_1_1.lastComponentSize = 0;
        } else if (layout == 5) {
            _horizonal_split();
            $scope.layout.viewstate.vertical_1_1.firstComponentSize = Math.round(_width / 2);
            $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 2);
            $scope.layout.viewstate.vertical_1_2.firstComponentSize = Math.round(_width / 2);
            $scope.layout.viewstate.vertical_1_2.lastComponentSize = 0;
        } else if (layout == 6) {
            _horizonal_split();
            $scope.layout.viewstate.vertical_1_1.firstComponentSize = Math.round(_width / 3);
            $scope.layout.viewstate.vertical_1_1.lastComponentSize = Math.round(_width / 3 * 2);
            $scope.layout.viewstate.vertical_1_2.firstComponentSize = Math.round(_width / 3);
            $scope.layout.viewstate.vertical_1_2.lastComponentSize = Math.round(_width / 3);
        }

        await $timeout();
    }

    $scope.app = {};
    $scope.app.preview = {};
    $scope.app.preview.status = false;
    $scope.app.preview.load = async () => {
        let url = "/dizest/ui/viewer/" + $scope.workflow_id + "/" + $scope.flow_id;
        $scope.app.preview.status = false;
        await $timeout();
        $('iframe.preview').attr('src', url);
        $('iframe.preview').on('load', async () => {
            $scope.app.preview.status = true;
            await $timeout();
        });
    }

    $scope.app.init = {};
    $scope.app.init.info = async () => {
        $scope.app.view = 'empty';
        await $timeout();

        $scope.app.view = 'info';
        await $timeout();

        let ckeditor = await ClassicEditor.create(document.querySelector('#app-description'), {
            language: 'en',
            toolbar: {
                items: 'heading | blockQuote bold italic strikethrough underline | bulletedList numberedList | outdent indent | imageUpload link code codeBlock'.split(' '),
                shouldNotGroupWhenFull: true
            },
            removePlugins: ["MediaEmbedToolbar"]
        });

        ckeditor.enableReadOnlyMode('app-description')
        ckeditor.data.set($scope.app.data.description);
        await $scope.app.preview.load();
    }

    $scope.app.init.editor = async () => {
        $scope.app.view = 'empty';
        await $timeout();
        $scope.app.view = 'editor';
        $scope.layout.viewstate = {};
        $scope.layout.viewstate.horizonal = {};
        $scope.layout.viewstate.vertical_1_1 = {};
        $scope.layout.viewstate.vertical_1_2 = {};
        await $timeout();
        $scope.layout.change($scope.layout.active_layout);

        for (let tab in $scope.app.editor.tabs) {
            if ($scope.app.editor.tabs[tab].target == 'info') {
                await $scope.app.editor.tab(tab, 'info');
            }
        }
    }

    $scope.app.load = async () => {
        let res = await wiz.API.async("get", { workflow_id: $scope.workflow_id, flow_id: $scope.flow_id });
        if (res.code == 200) {
            $scope.app.data = res.data;
            if (Array.isArray($scope.app.data.cdn)) 
                $scope.app.data.cdn = {};

            if (typeof ($scope.app.data.cdn) != 'object')
                $scope.app.data.cdn = {};
                
            if (!$scope.app.data.cdn) $scope.app.data.cdn = {};
            if (!$scope.app.data.cdn.js) $scope.app.data.cdn.js = [];
            if (!$scope.app.data.cdn.css) $scope.app.data.cdn.css = [];

            if ($scope.app.view == 'editor') {
                await $scope.app.init.editor();
            } else {
                await $scope.app.init.info();
            }
        }
    }

    $scope.app.delete = async () => {
        if ($scope.workflow_id != 'develop') return;
        let data = angular.copy($scope.app.data);
        let res = await wiz.connect("page.hub.app.editor.modal.message")
            .data({
                title: "Delete App",
                message: "Are you sure delete `" + data.title + "` app?",
                btn_close: 'Close',
                btn_action: "Delete",
                btn_class: "btn-danger"
            })
            .event("modal-show");

        if (!res) {
            return;
        }

        res = await wiz.API.async("delete", { workflow_id: $scope.workflow_id, data: JSON.stringify(data) });
        $scope.app.data = null;
        await $timeout();

        if ($scope.app._remove) await $scope.app._remove();
    }

    $scope.app.run = async () => {
        await $scope.app.save(true);
        if ($scope.app._run) await $scope.app._run($scope.workflow_id, $scope.flow_id);
    }

    $scope.app.stop = async () => {
        if ($scope.app._stop) await $scope.app._stop($scope.workflow_id, $scope.flow_id);
    }

    $scope.app.save = async (notshowresult) => {
        $scope.app.data.description = $scope.app.desc_editor.data.get();
        let data = angular.copy($scope.app.data);

        if (!data.title || data.title.length == 0) {
            await alert("App title is not filled.");
            return;
        }

        if (!data.version || data.version.length == 0) {
            await alert("App Version is not filled.");
            return;
        }

        let checker = {};
        for (let i = 0; i < data.inputs.length; i++) {
            if (!data.inputs[i].name || data.inputs[i].name.length == 0) {
                await alert("Input name must be filled");
                return;
            }

            if (data.inputs[i].name.includes(" ")) {
                await alert("Input name only allow alphabet and digits.");
                return;
            }

            if (data.inputs[i].name.match(/[^a-z0-9_]/gi)) {
                await alert("Input name only allow alphabet and digits.");
                return;
            }

            if (checker[data.inputs[i].name]) {
                await alert("Input name must be unique.");
                return;
            }

            checker[data.inputs[i].name] = true;
        }

        checker = {};
        for (let i = 0; i < data.outputs.length; i++) {
            if (!data.outputs[i].name || data.outputs[i].name.length == 0) {
                await alert("Output name must be filled");
                return;
            }

            if (data.outputs[i].name.includes(" ")) {
                await alert("Output name only allow alphabet and digits.");
                return;
            }

            if (data.outputs[i].name.match(/[^a-z0-9_]/gi)) {
                await alert("Output name only allow alphabet and digits.");
                return;
            }

            if (checker[data.outputs[i].name]) {
                await alert("Output name must be unique.");
                return;
            }

            checker[data.outputs[i].name] = true;
        }

        let res = null;
        if (data.id) {
            res = await wiz.API.async("update", { workflow_id: $scope.workflow_id, data: JSON.stringify(data) });
            if (!notshowresult) {
                toastr.success("Saved");
            }
        } else {
            res = await wiz.API.async("create", { workflow_id: $scope.workflow_id, data: JSON.stringify(data) });
            if (res.code == 200) {
                $scope.flow_id = res.data;
                await $scope.app.load();
                wiz.response("load", res.data);
            }
        }

        await $scope.app.preview.load();
        if ($scope.app._save) await $scope.app._save();
    }

    $scope.app.create = async () => {
        $scope.app.data = {};
        $scope.app.data.visibility = 'private';
        $scope.app.data.mode = 'ui';
        $scope.app.data.cdn = { js: [], css: [] };
        $scope.app.data.inputs = [];
        $scope.app.data.outputs = [];
        $scope.app.data.code = '';
        $scope.app.data.sample = '';
        $scope.app.data.api = '';
        $scope.app.data.pug = '';
        $scope.app.data.js = '';
        $scope.app.data.css = '';
        $scope.app.data.logo = '';
        $scope.app.data.featured = '';
        await $scope.app.init.editor();
        await $timeout();
    }

    $scope.app.add_input = async () => {
        if (!$scope.app.data.inputs) $scope.app.data.inputs = [];
        $scope.app.data.inputs.push({ type: 'output' });
        await $timeout();
    }

    $scope.app.add_output = async () => {
        if (!$scope.app.data.outputs) $scope.app.data.outputs = [];
        $scope.app.data.outputs.push({});
        await $timeout();
    }

    $scope.app.uploader = {};
    $scope.app.uploader.logo = async () => {
        $('#file-logo').click();
        $('#file-logo').change(async () => {
            let file = document.querySelector('#file-logo').files[0];
            file = await resizer(file, 128, 0.8);
            $('#file-logo').val(null);
            if (file.length > 1024 * 100) {
                await alert("file size under 100kb");
                return;
            }
            $scope.app.data.logo = file;
            await $timeout();
        });
    }

    $scope.app.uploader.featured = async () => {
        $('#file-featured').click();
        $('#file-featured').change(async () => {
            let file = document.querySelector('#file-featured').files[0];
            file = await resizer(file, 512, 0.5);
            $('#file-featured').val(null);
            if (file.length > 1024 * 100) {
                await alert("file size under 100kb");
                return;
            }
            $scope.app.data.featured = file;
            await $timeout();
        });
    }

    $scope.app.editor = {};
    $scope.app.editor.tab = async (tab, target) => {
        $scope.app.editor.tabs[tab].status = false;
        await $timeout();

        $scope.app.editor.tabs[tab].target = target;
        if (!['preview', 'info'].includes(target)) {
            let map = { sample: 'python', code: 'python', api: 'python', css: 'scss', pug: 'pug', js: 'javascript' };
            $scope.app.editor.tabs[tab].monaco = monaco_option(map[target]);
        }

        $scope.app.editor.tabs[tab].status = true;
        await $timeout();

        if (target == 'info') {
            const EDITOR_ID = '#description-editor-' + tab;
            $scope.app.desc_editor = await ClassicEditor.create(document.querySelector(EDITOR_ID), {
                language: 'en',
                toolbar: {
                    items: 'heading | blockQuote bold italic strikethrough underline | bulletedList numberedList | outdent indent | imageUpload link code codeBlock'.split(' '),
                    shouldNotGroupWhenFull: true
                },
                removePlugins: ["MediaEmbedToolbar"]
            });

            if ($scope.app.data.description)
                $scope.app.desc_editor.data.set($scope.app.data.description);
        }

        if (target == "preview") {
            await $scope.app.preview.load();
        }
    }

    $scope.app.editor.tabs = {}
    $scope.app.editor.tabs.tab1 = { status: true, target: 'info' };
    $scope.app.editor.tabs.tab2 = { status: true, target: 'code', monaco: monaco_option('python') };
    $scope.app.editor.tabs.tab3 = { status: true, target: 'sample', monaco: monaco_option('python') };

    $scope.shortcut = {};
    $scope.shortcut.configuration = (monaco) => {
        return {
            'save': {
                key: 'Ctrl KeyS',
                monaco: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S,
                fn: async () => {
                    await $scope.app.save();
                }
            },
            'run': {
                key: 'Shift Enter',
                monaco: monaco.KeyMod.Shift | monaco.KeyCode.Enter,
                fn: async () => {
                    await $scope.app.run();
                }
            },
            'clear': {
                key: 'Ctrl KeyK',
                monaco: monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_K,
                fn: async () => {
                    await $scope.socket.clear();
                }
            }
        }
    };

    $scope.shortcut.bind = async () => {
        if (!window.monaco) return;
        $(window).unbind();

        let shortcut_opts = {};
        let shortcuts = $scope.shortcut.configuration(window.monaco);
        for (let key in shortcuts) {
            let keycode = shortcuts[key].key;
            let fn = shortcuts[key].fn;
            if (!keycode) continue;
            shortcut_opts[keycode] = async (ev) => {
                ev.preventDefault();
                await fn();
            };
        }
    }

    window.addEventListener("focus", $scope.shortcut.bind, false);
    await $timeout();

    wiz.bind("load", async (data) => {
        $scope.workflow_id = data.workflow_id;
        $scope.flow_id = data.flow_id;
        $scope.socket = data.socket;
        $scope.app.view = data.view;
        $scope.app._run = data.run;
        $scope.app._stop = data.stop;
        $scope.app._save = data.save;
        $scope.app._remove = data.remove;

        if (data.layout > 0)
            await $scope.layout.change(data.layout);

        if ($scope.flow_id == 'new') {
            await $scope.app.create();
        } else {
            await $scope.app.load();
            return true;
        }
    });
}
