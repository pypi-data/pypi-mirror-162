from typing import Dict, List, Optional, Tuple
import torch

class EinsumSpec(object):
    input_ints: List[List[int]]
    output_ints: List[int]
    int_sizes: List[int]
    def __init__(self, input_ints: List[List[int]], output_ints: List[int], int_sizes: Dict[int, int]): ...
    def flops(self) -> int: ...
    def optimize_dp(
        self, check_outer: bool, mem_limit: Optional[int], hash_limit: Optional[int]
    ) -> List[List[int]]: ...
    def normalize(self) -> "EinsumSpec": ...
    def validate(self) -> bool: ...
    def shapes(self) -> Tuple[List[List[int]], List[int]]: ...

class RearrangeSpec(object):
    input_ints: List[List[int]]
    output_ints: List[List[int]]
    int_sizes: List[int]
    def __init__(self, input_ints: List[List[int]], output_ints: List[List[int]], int_sizes: List[int]): ...
    def is_identity(self) -> bool: ...
    def is_permute(self) -> bool: ...
    def shapes(self) -> Tuple[List[int], List[int]]: ...
    def is_valid(self) -> bool: ...
    def to_einops_string(self) -> str: ...
    def to_einops_string_and_letter_sizes(self) -> Tuple[str, List[Tuple[str, int]]]: ...
    def apply(self, tensor: torch.Tensor) -> torch.Tensor: ...
