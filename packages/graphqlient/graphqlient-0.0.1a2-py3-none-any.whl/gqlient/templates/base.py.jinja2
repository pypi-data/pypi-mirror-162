import asyncio
import enum
import json
import sys
from abc import ABC
from dataclasses import dataclass
from functools import partial
from graphql import print_ast
from typing import Any, Dict, ForwardRef, Generic, Iterator, List, Optional, Type, TypeVar, Union, get_args, overload
from .result_types import *

import gql
from gql.dsl import DSLMutation, DSLSchema, DSLSubscription, dsl_gql, DSLInlineFragment, DSLQuery
from gql.transport.aiohttp import AIOHTTPTransport


class Empty:
    pass


EMPTY = Empty

PYTHON_VERSION = sys.version_info

ExecuteReturnType = TypeVar('ExecuteReturnType')
ExecuteReturnClass = TypeVar('ExecuteReturnClass')


class Executable(Generic[ExecuteReturnClass, ExecuteReturnType]):
    def __init__(self, selection):
        self._query = selection._query
        self.client = selection._client

    @property
    def query_ast(self):
        class_ = {
            'Mutation': DSLMutation,
            'Query': DSLQuery,
            'Subscription': DSLSubscription,
        }
        return dsl_gql(class_[self._query.parent_type.name](self._query))

    @property
    def query(self) -> str:
        return print_ast(self.query_ast)

    def execute(self) -> ExecuteReturnType:
        result = QueryResult[ExecuteReturnType](self.client._client.execute(self.query_ast))
        return_type = get_args(self.__orig_class__)[1]
        result.__graphql_map__.update(return_type.__graphql_map__)
        return result

    async def execute_async(self) -> ExecuteReturnType:
        result = QueryResult[ExecuteReturnType](await self.client._client.execute_async(self.query_ast))
        return_type = get_args(self.__orig_class__)[1]
        result.__graphql_map__.update(return_type.__graphql_map__)
        return result


class QueryableField:
    def __call__(self, *args, return_type: Type, **kwargs):
        client, schema, query, *_ = args
        return return_type(client, schema, query, **kwargs)


class GeneratedType(type):
    Field: type


class GeneratedUnionType(GeneratedType):
    def __getattr__(self, item):
        if item == 'on':
            return self._OnFragment
        return getattr(super(), item)


class GeneratedInterfaceType(GeneratedType):
    def __getattr__(self, item):
        if item == 'on':
            return self._OnFragment
        return getattr(super(), item)


# noinspection PyProtectedMember
def evaluate_forward_ref(ref, globalns, localns):
    if PYTHON_VERSION < (3, 9):
        return ref._evaluate(globalns, localns)
    return ref._evaluate(globalns, localns, frozenset())


class BaseField:
    def __init__(self, field_name: str, field_type: Union[Type, str]):
        if isinstance(field_type, str):
            field_type = ForwardRef(field_type)
        self.field_name = field_name
        self.field_type = field_type

    def __getattr__(self, name):
        if name == 'select':
            return self.get_type()(self.field_name).select

    def get_type(self):
        if isinstance(self.field_type, ForwardRef):
            return evaluate_forward_ref(self.field_type, globals(), locals())
        return self.field_type

class InputType(ABC):
    def to_graphql(self, schema: DSLSchema):
        values = {self.__graphql_map__[k]: getattr(self, k) for k in self.__graphql_map__ if getattr(self, k) != EMPTY}
        for k in values:
            if isinstance(values[k], InputType):
                values[k] = values[k].to_graphql(schema)
            elif isinstance(values[k], list) and any(isinstance(x, InputType) for x in values[k]):
                values[k] = [item.to_graphql(schema) for item in values[k]]
        return values


def partial_select(field_factories: List[Any]):
    def select(_calling_field: Any, schema: DSLSchema):
        return _calling_field.select(*[factory(schema) for factory in field_factories])
    return select

{%- include 'query.py.jinja2' %}

{%- include 'mutation.py.jinja2' %}

class Client:
    def __init__(self, url: str, **kwargs):
        self._client = gql.Client(transport=AIOHTTPTransport(url=url, **kwargs))
        self._graphql_schema = None
        self._schema = None
        try:
            loop = asyncio.get_running_loop()
            self._load_schema_task = loop.create_task(self._load_schema())
        except RuntimeError:
            loop = asyncio.new_event_loop()
            loop.run_until_complete(self._load_schema())

    async def __aenter__(self):
        return await self.begin()

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        return self

    async def _load_schema(self):
        async with self._client as s:
            await s.fetch_schema()
        self._graphql_schema = self._client.schema
        self._schema = DSLSchema(self._graphql_schema)

    async def begin(self):
        if self._load_schema_task:
            await self._load_schema_task
            self._load_schema_task = None
        return self

    @property
    def query(self) -> Query:
        return Query(client=self)

    @property
    def mutation(self) -> Mutation:
        return Mutation(client=self)