import json

from dataclasses import dataclass
from typing import Any, Dict, ForwardRef, Generic, Iterator, List, Optional, Type, TypeVar, Union, overload


QueryResultType = TypeVar('QueryResultType')


class QueryResult(Generic[QueryResultType]):
    __graphql_map__ = {}

    def __init__(self, data: QueryResultType = None):
        self._data = data

    def __getattr__(self, name: str) -> Any:
        res = self._data[name] \
            if name not in self.__graphql_map__ \
            else self._data[self.__graphql_map__[name]]

        if isinstance(res, list):
            return [QueryResult(x) for x in res]
        elif isinstance(res, dict):
            return QueryResult(res)
        return res

    def __getitem__(self, name: str) -> Any:
        return getattr(self, name)

    def __str__(self) -> str:
        return json.dumps(self._data, indent=2, sort_keys=True)

    def as_dict(self) -> Dict[str, Any]:
        return self._data

    def get(self, name: str, default: Any = None) -> Any:
        return self._data.get(name, default)
{% for type_ in types %}

@dataclass
class {{ get_type(type_, constants.output) }}(QueryResult):
    {{ '__graphql_map__ = {' }}{%  for field in type_.fields %}
        '{{ underscore(field) }}': '{{ field }}'{% if not loop.last %}{{ ', ' }}{% endif %}
    {%- endfor %}
    {{ '}' }}

    {% for field_name, field in type_.fields.items() -%}
        {{ underscore(field_name) }}: {{ get_type(field.type, suffix=constants.output, enquote=True, strip_class=False) }}
    {% endfor %}

{%- endfor %}
{% for type_ in interface_types %}

@dataclass
class {{ get_type(type_, constants.output) }}(QueryResult):
    {{ '__graphql_map__ = {' }}{%  for field in type_.all_fields %}
        '{{ underscore(field) }}': '{{ field }}'{% if not loop.last %}{{ ', ' }}{% endif %}
    {%- endfor %}
    {{ '}' }}

    {% for field_name, field in type_.all_fields.items() -%}
        {{ underscore(field_name) }}: {{ get_type(field.type, suffix=constants.output, enquote=True, strip_class=False) }}
    {% endfor %}

{%- endfor %}
{% for type_ in union_types %}

@dataclass
class {{ get_type(type_, constants.output) }}(QueryResult):
    {{ '__graphql_map__ = {' }}{%  for field in type_.all_fields %}
        '{{ underscore(field) }}': '{{ field }}'{% if not loop.last %}{{ ', ' }}{% endif %}
    {%- endfor %}
    {{ '}' }}

    {% for field_name, field in type_.all_fields.items() -%}
        {{ underscore(field_name) }}: {{ get_type(field.type, suffix=constants.output, enquote=True, strip_class=False) }}
    {% endfor %}

{%- endfor %}
{% for type_ in enum_types %}

@dataclass
class {{ get_type(type_, constants.output) }}(QueryResult):
    {{ '__graphql_map__ = {' }}{%  for field in type_.values %}
        '{{ underscore(field) }}': '{{ field }}'{% if not loop.last %}{{ ', ' }}{% endif %}
    {%- endfor %}
    {{ '}' }}

    {% for field_name, field in type_.values.items() -%}
        {{ underscore(field_name) }} = '{{ field.value }}'
    {% endfor %}

{%- endfor %}