{"version":3,"sources":["pages/RunDetail/RunMetricCard.tsx","pages/RunDetail/RunDetailMetricsAndSystemTab.tsx","config/charts/index.ts","components/LineChart/LineChart.tsx"],"names":["RunMetricCard","batch","index","observer","containerRef","React","current","observe","ErrorBoundary","className","data-name","name","data-context","contextToString","context","ref","iters","LineChart","data","key","xValues","yValues","values","color","dasharray","selectors","axesScaleType","xAxis","ScaleEnum","Linear","yAxis","ignoreOutliers","highlightMode","HighlightEnum","Off","curveInterpolation","CurveEnum","component","tint","size","weight","isSystemMetric","formatSystemMetricName","split","map","label","i","monospace","COLORS","length","RunDetailMetricsAndSystemTab","runHash","runTraces","runBatch","isSystem","isRunBatchLoading","observerRef","observerIsReady","setObserverIsReady","visibleMetrics","setVisibleMetrics","options","root","parentElement","rootMargin","threshold","IntersectionObserver","entries","metrics","forEach","entry","isIntersecting","metricName","target","getAttribute","metricContext","find","push","vM","concat","metric","m","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","tabView","disconnect","timerID","runsBatchRequestRef","window","setTimeout","runDetailAppModel","getRunMetricsBatch","call","clearTimeout","abort","filter","findIndex","BusyLoaderWrapper","isLoading","height","_","isEmpty","IllustrationBlock","title","sortKey","sort","alphabeticalSortComparator","orderBy","RENDER_LINES_OPTIMIZED_LIMIT","GRID_SIZE","S","M","L","CHART_GRID_PATTERN","1","2","3","4","5","6","7","8","9","forwardRef","props","nameKey","aggregatedData","aggregationConfig","syncHoverState","axesScaleRange","alignmentConfig","chartTitle","zoom","onZoomChange","readOnly","resizeMode","visBoxRef","useRef","margin","top","right","bottom","left","width","plotBoxRef","parentRef","visAreaRef","svgNodeRef","bgRectNodeRef","plotNodeRef","axesNodeRef","linesNodeRef","attributesNodeRef","xAxisLabelNodeRef","yAxisLabelNodeRef","highlightedNodeRef","axesRef","linesRef","attributesRef","humanizerConfigRef","rafIDRef","unableToDrawConditions","renderChart","clearArea","drawArea","processLineChartData","processedData","processedAggrData","min","max","drawAxes","xScale","yScale","drawBgTickLines","y","x","drawLines","selectChildren","classed","drawHoverAttributes","drawBrush","drawUnableToRender","renderArr","draw","resizeObserverCallback","useCallback","requestAnimationFrame","observerReturnCallback","cancelAnimationFrame","useResizeObserver","useEffect","useImperativeHandle","setActiveLineAndCircle","lineKey","focusedStateActive","force","updateHoverAttributes","xValue","dataSelector","clearHoverAttributes","setFocusedState","focusedState","classNames","zoomMode","active","displayName","memo"],"mappings":"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","file":"static/js/RunDetailMetricsAndSystemTab.js?version=13e1dd5a56cb19aa9df8","sourcesContent":["import * as React from 'react';\n\nimport LineChart from 'components/LineChart/LineChart';\nimport { Badge, Text, Spinner } from 'components/kit';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport { HighlightEnum } from 'components/HighlightModesPopover/HighlightModesPopover';\n\nimport COLORS from 'config/colors/colors';\n\nimport contextToString from 'utils/contextToString';\nimport { CurveEnum, ScaleEnum } from 'utils/d3';\nimport { isSystemMetric } from 'utils/isSystemMetric';\nimport { formatSystemMetricName } from 'utils/formatSystemMetricName';\n\nimport { IRunMetricCardProps } from './types';\n\nfunction RunMetricCard({\n  batch,\n  index,\n  observer,\n}: IRunMetricCardProps): React.FunctionComponentElement<React.ReactNode> {\n  const containerRef = React.useRef(null);\n\n  React.useEffect(() => {\n    if (containerRef.current && observer) {\n      observer.observe(containerRef.current!);\n    }\n  }, [observer]);\n\n  return (\n    <ErrorBoundary>\n      <div\n        className='RunDetailMetricsTab__container__chartContainer'\n        data-name={batch.name}\n        data-context={contextToString(batch.context)}\n        ref={containerRef}\n      >\n        <div className='RunDetailMetricsTab__container__chartContainer__chartBox'>\n          {batch.iters ? (\n            <ErrorBoundary>\n              <LineChart\n                data={[\n                  {\n                    key: batch.key,\n                    data: {\n                      xValues: [...batch.iters],\n                      yValues: [...batch.values],\n                    },\n                    color: '#1c2852',\n                    dasharray: 'none',\n                    selectors: [batch.key],\n                  },\n                ]}\n                index={index}\n                axesScaleType={{\n                  xAxis: ScaleEnum.Linear,\n                  yAxis: ScaleEnum.Linear,\n                }}\n                ignoreOutliers={false}\n                highlightMode={HighlightEnum.Off}\n                curveInterpolation={CurveEnum.Linear}\n              />\n            </ErrorBoundary>\n          ) : (\n            <Spinner />\n          )}\n        </div>\n        <div className='RunDetailMetricsTab__container__chartContainer__metricDetailBox'>\n          <Text\n            component='h4'\n            tint={100}\n            size={18}\n            weight={600}\n            className='RunDetailMetricsTab__container__chartContainer__metricDetailBox__metricName'\n          >\n            {isSystemMetric(batch?.name)\n              ? formatSystemMetricName(batch?.name)\n              : batch?.name}\n          </Text>\n          {contextToString(batch?.context)\n            ?.split(',')\n            .map((label: string, i: number) => (\n              <Badge\n                key={i}\n                monospace\n                size='large'\n                color={COLORS[0][(i + index) % COLORS[0].length]}\n                label={label || 'Empty context'}\n              />\n            ))}\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default React.memo(RunMetricCard);\n","import * as React from 'react';\nimport _ from 'lodash-es';\n\nimport IllustrationBlock from 'components/IllustrationBlock/IllustrationBlock';\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\n\nimport * as analytics from 'services/analytics';\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\n\nimport { isSystemMetric } from 'utils/isSystemMetric';\nimport contextToString from 'utils/contextToString';\nimport alphabeticalSortComparator from 'utils/alphabeticalSortComparator';\n\nimport RunMetricCard from './RunMetricCard';\nimport { IRunBatch, IRunDetailMetricsAndSystemTabProps } from './types';\n\nfunction RunDetailMetricsAndSystemTab({\n  runHash,\n  runTraces,\n  runBatch,\n  isSystem,\n  isRunBatchLoading,\n}: IRunDetailMetricsAndSystemTabProps): React.FunctionComponentElement<React.ReactNode> {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const observerRef = React.useRef<IntersectionObserver>();\n  const [observerIsReady, setObserverIsReady] = React.useState(false);\n  const [visibleMetrics, setVisibleMetrics] = React.useState<\n    IRunDetailMetricsAndSystemTabProps['runTraces']['metric']\n  >([]);\n\n  React.useEffect(() => {\n    if (!!containerRef.current) {\n      let options = {\n        root: containerRef.current.parentElement?.parentElement,\n        rootMargin: '0px',\n        threshold: 0,\n      };\n      observerRef.current = new IntersectionObserver(\n        (entries: IntersectionObserverEntry[]) => {\n          let metrics: { name: string; context: string }[] = [];\n          entries.forEach((entry: IntersectionObserverEntry) => {\n            if (entry.isIntersecting) {\n              let metricName = entry.target.getAttribute('data-name')!;\n              let metricContext = entry.target.getAttribute('data-context')!;\n              if (\n                !runBatch?.find(\n                  (batch: IRunBatch) =>\n                    batch.name === metricName &&\n                    contextToString(batch.context) === metricContext,\n                )\n              ) {\n                metrics.push({\n                  name: metricName,\n                  context: metricContext,\n                });\n              }\n            }\n          });\n\n          if (metrics.length > 0) {\n            setVisibleMetrics((vM) =>\n              vM.concat(\n                metrics.map(\n                  (metric) =>\n                    runTraces.metric.find(\n                      (m) =>\n                        m.name === metric.name &&\n                        contextToString(m.context) === metric.context,\n                    )!,\n                ),\n              ),\n            );\n          }\n        },\n        options,\n      );\n      setObserverIsReady(true);\n    }\n\n    analytics.pageView(\n      ANALYTICS_EVENT_KEYS.runDetails.tabs[isSystem ? 'system' : 'metrics']\n        .tabView,\n    );\n\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [isSystem, runBatch, observerIsReady, runTraces.metric]);\n\n  React.useEffect(() => {\n    let timerID: number;\n    let runsBatchRequestRef: { call: () => Promise<void>; abort: () => void };\n    if (visibleMetrics.length > 0) {\n      timerID = window.setTimeout(() => {\n        runsBatchRequestRef = runDetailAppModel.getRunMetricsBatch(\n          visibleMetrics,\n          runHash,\n        );\n\n        runsBatchRequestRef.call();\n      }, 100);\n    }\n\n    return () => {\n      if (timerID) {\n        clearTimeout(timerID);\n      }\n      if (runsBatchRequestRef) {\n        runsBatchRequestRef.abort();\n      }\n    };\n  }, [visibleMetrics, runHash]);\n\n  React.useEffect(() => {\n    setVisibleMetrics((vM) =>\n      vM.filter(\n        (m) =>\n          runBatch.findIndex(\n            (batch: IRunBatch) =>\n              batch.name === m.name &&\n              contextToString(batch.context) === contextToString(m.context),\n          ) === -1,\n      ),\n    );\n  }, [runBatch]);\n\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper\n        isLoading={isRunBatchLoading}\n        className='runDetailParamsTabLoader'\n        height='100%'\n      >\n        {!_.isEmpty(runTraces.metric) ? (\n          <div className='RunDetailMetricsTab' ref={containerRef}>\n            <div className='RunDetailMetricsTab__container'>\n              {observerIsReady &&\n                runTraces.metric\n                  .filter((m) =>\n                    isSystem ? isSystemMetric(m.name) : !isSystemMetric(m.name),\n                  )\n                  .map((m) => ({\n                    ...m,\n                    sortKey: `${m.name}_${contextToString(m.context)}`,\n                  }))\n                  .sort(alphabeticalSortComparator({ orderBy: 'sortKey' }))\n                  .map((metric, i: number) => {\n                    const batch: IRunBatch = {\n                      ...metric,\n                      ...runBatch?.find(\n                        (batch: IRunBatch) =>\n                          batch.name === metric.name &&\n                          contextToString(batch.context) ===\n                            contextToString(metric.context),\n                      ),\n                    };\n                    return (\n                      <RunMetricCard\n                        key={`${batch.name}_${contextToString(batch.context)}`}\n                        batch={batch}\n                        index={i}\n                        observer={observerRef.current}\n                      />\n                    );\n                  })}\n            </div>\n          </div>\n        ) : (\n          <IllustrationBlock\n            size='xLarge'\n            className='runDetailParamsTabLoader'\n            title={`No tracked ${isSystem ? 'system' : ''} metrics`}\n          />\n        )}\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nexport default React.memo(RunDetailMetricsAndSystemTab);\n","export const RENDER_LINES_OPTIMIZED_LIMIT = 100;\n\nexport const GRID_SIZE = {\n  S: 4,\n  M: 6,\n  L: 12,\n};\n\nconst { S, M, L } = GRID_SIZE;\n// Chart grid pattern based on a 12-column grid layout\nexport const CHART_GRID_PATTERN: { [key: number]: number[] } = {\n  1: [L],\n  2: [M, M],\n  3: [S, S, S],\n  4: [M, M, M, M],\n  5: [S, S, S, M, M],\n  6: [S, S, S, S, S, S],\n  7: [S, S, S, M, M, M, M],\n  8: [S, S, S, S, S, S, M, M],\n  9: [S, S, S, S, S, S, S, S, S],\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\n\nimport { RENDER_LINES_OPTIMIZED_LIMIT } from 'config/charts';\n\nimport useResizeObserver from 'hooks/window/useResizeObserver';\n\nimport {\n  IAttributesRef,\n  ILineChartProps,\n} from 'types/components/LineChart/LineChart';\nimport { IFocusedState } from 'types/services/models/metrics/metricsAppModel';\n\nimport {\n  drawArea,\n  clearArea,\n  drawAxes,\n  drawLines,\n  processLineChartData,\n  drawBrush,\n  drawHoverAttributes,\n  drawUnableToRender,\n} from 'utils/d3';\n\nimport './LineChart.scss';\n\nconst LineChart = React.forwardRef(function LineChart(\n  props: ILineChartProps,\n  ref,\n): React.FunctionComponentElement<React.ReactNode> {\n  const {\n    data,\n    index = 0,\n    nameKey = '',\n    aggregatedData,\n    aggregationConfig,\n    syncHoverState,\n    axesScaleType,\n    axesScaleRange,\n    ignoreOutliers,\n    alignmentConfig,\n    highlightMode,\n    curveInterpolation,\n    chartTitle,\n    zoom,\n    onZoomChange,\n    readOnly = false,\n    resizeMode,\n  } = props;\n\n  // boxes\n  const visBoxRef = React.useRef({\n    margin: {\n      top: 30,\n      right: 20,\n      bottom: 30,\n      left: 60,\n    },\n    height: 0,\n    width: 0,\n  });\n  const plotBoxRef = React.useRef({\n    height: 0,\n    width: 0,\n  });\n\n  // containers\n  const parentRef = React.useRef<HTMLDivElement>(null);\n  const visAreaRef = React.useRef<HTMLDivElement>(null);\n\n  // d3 node elements\n  const svgNodeRef = React.useRef(null);\n  const bgRectNodeRef = React.useRef(null);\n  const plotNodeRef = React.useRef(null);\n  const axesNodeRef = React.useRef(null);\n  const linesNodeRef = React.useRef<any>(null);\n  const attributesNodeRef = React.useRef(null);\n  const xAxisLabelNodeRef = React.useRef(null);\n  const yAxisLabelNodeRef = React.useRef(null);\n  const highlightedNodeRef = React.useRef(null);\n\n  // methods and values refs\n  const axesRef = React.useRef({});\n  const linesRef = React.useRef({});\n  const attributesRef = React.useRef<IAttributesRef>({});\n  const humanizerConfigRef = React.useRef({});\n  const rafIDRef = React.useRef<number>();\n\n  const unableToDrawConditions: { condition: boolean; text?: string }[] = [];\n\n  function draw() {\n    drawArea({\n      index,\n      nameKey,\n      visBoxRef,\n      plotBoxRef,\n      parentRef,\n      visAreaRef,\n      svgNodeRef,\n      bgRectNodeRef,\n      plotNodeRef,\n      axesNodeRef,\n      linesNodeRef,\n      attributesNodeRef,\n      chartTitle,\n    });\n\n    const { processedData, processedAggrData, min, max } = processLineChartData(\n      {\n        data,\n        ignoreOutliers,\n        visBoxRef,\n        axesScaleType,\n        axesScaleRange,\n        aggregatedData,\n        aggregationConfig,\n        unableToDrawConditions,\n        attributesRef,\n      },\n    );\n\n    drawAxes({\n      svgNodeRef,\n      axesNodeRef,\n      axesRef,\n      plotBoxRef,\n      xScale: attributesRef.current.xScale,\n      yScale: attributesRef.current.yScale,\n      visBoxRef,\n      alignmentConfig,\n      axesScaleType,\n      humanizerConfigRef,\n      drawBgTickLines: { y: true, x: false },\n    });\n\n    drawLines({\n      index,\n      processedData,\n      nameKey,\n      linesNodeRef,\n      linesRef,\n      curveInterpolation,\n      xScale: attributesRef.current.xScale,\n      yScale: attributesRef.current.yScale,\n      highlightMode,\n      aggregationConfig,\n      processedAggrData,\n      readOnly,\n    });\n\n    // render lines with low quality if lines count are more than 'RENDER_LINES_OPTIMIZED_LIMIT'\n    if (!readOnly && linesNodeRef.current) {\n      const linesCount = linesNodeRef.current.selectChildren().size();\n      if (linesCount > RENDER_LINES_OPTIMIZED_LIMIT) {\n        linesNodeRef.current.classed('optimizeRendering', true);\n      }\n    }\n\n    if (!readOnly) {\n      drawHoverAttributes({\n        index,\n        nameKey,\n        data,\n        axesScaleType,\n        highlightMode,\n        syncHoverState,\n        visAreaRef,\n        attributesRef,\n        plotBoxRef,\n        visBoxRef,\n        svgNodeRef,\n        bgRectNodeRef,\n        attributesNodeRef,\n        xAxisLabelNodeRef,\n        yAxisLabelNodeRef,\n        linesNodeRef,\n        highlightedNodeRef,\n        aggregationConfig,\n        alignmentConfig,\n      });\n    }\n\n    drawBrush({\n      index,\n      plotBoxRef,\n      plotNodeRef,\n      visBoxRef,\n      axesRef,\n      attributesRef,\n      linesRef,\n      svgNodeRef,\n      axesScaleType,\n      min,\n      max,\n      axesScaleRange,\n      zoom,\n      onZoomChange,\n      readOnly,\n      unableToDrawConditions,\n    });\n\n    drawUnableToRender({\n      renderArr: unableToDrawConditions,\n      visAreaRef,\n      attributesRef,\n      readOnly,\n      syncHoverState,\n    });\n  }\n\n  function renderChart() {\n    clearArea({ visAreaRef });\n    draw();\n  }\n\n  const resizeObserverCallback: ResizeObserverCallback = React.useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      if (entries?.length) {\n        rafIDRef.current = window.requestAnimationFrame(renderChart);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      data,\n      zoom,\n      ignoreOutliers,\n      highlightMode,\n      axesScaleType,\n      axesScaleRange,\n      curveInterpolation,\n      aggregationConfig,\n      readOnly,\n      alignmentConfig,\n      resizeMode,\n    ],\n  );\n\n  const observerReturnCallback = React.useCallback(() => {\n    if (rafIDRef.current) {\n      window.cancelAnimationFrame(rafIDRef.current);\n    }\n  }, []);\n\n  useResizeObserver(resizeObserverCallback, parentRef, observerReturnCallback);\n\n  React.useEffect(() => {\n    rafIDRef.current = window.requestAnimationFrame(renderChart);\n    return () => {\n      if (rafIDRef.current) {\n        window.cancelAnimationFrame(rafIDRef.current);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    data,\n    zoom,\n    ignoreOutliers,\n    highlightMode,\n    axesScaleType,\n    axesScaleRange,\n    curveInterpolation,\n    aggregationConfig,\n    readOnly,\n    alignmentConfig,\n    resizeMode,\n  ]);\n\n  React.useImperativeHandle(ref, () => ({\n    setActiveLineAndCircle: (\n      lineKey: string,\n      focusedStateActive: boolean = false,\n      force: boolean = false,\n    ) => {\n      attributesRef.current.setActiveLineAndCircle?.(\n        lineKey,\n        focusedStateActive,\n        force,\n      );\n    },\n    updateHoverAttributes: (xValue: number, dataSelector?: string) => {\n      attributesRef.current.updateHoverAttributes?.(xValue, dataSelector);\n    },\n    clearHoverAttributes: () => {\n      attributesRef.current.clearHoverAttributes?.();\n    },\n    setFocusedState: (focusedState: IFocusedState) => {\n      attributesRef.current.focusedState = focusedState;\n    },\n  }));\n\n  return (\n    <ErrorBoundary>\n      <div\n        ref={parentRef}\n        className={classNames('LineChart', {\n          zoomMode: !readOnly && zoom?.active,\n        })}\n      >\n        <div ref={visAreaRef} />\n      </div>\n    </ErrorBoundary>\n  );\n});\n\nLineChart.displayName = 'LineChart';\n\nexport default React.memo(LineChart);\n"],"sourceRoot":""}