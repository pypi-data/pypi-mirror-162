Metadata-Version: 2.1
Name: synthesized
Version: 2.1rc0
Summary: Synthesized SDK
Author-email: "Synthesized Ltd." <sdk-team@synthesized.io>
License: Copyright 2018 Synthesized LTD
        
        Licence
        
        Definitions. As used in this Licence:
        
        Collaborator means a person who get access to the private repository of Synthesized LTD
        
        “Confidential Information” means all trade secrets, proprietary information, know-how, and confidential information of Synthesized  LTD including but not limited to: (i) any and all technical, business or financial information or property, owned by or licensed to Synthesized  LTD, or otherwise relating to Synthesized  LTD and/or any of its subsidiaries, affiliates and related entities which is heretofore or hereinafter disclosed to Supplier, including but not limited to information regarding Synthesized  LTD’s goods or services, processes, personnel, finances, business plans, studies, analyses, projections, research, market data, operations, apparatus, computer software, know-how, trade secrets, inventions, equipment, tools, molds, dies, fixtures, parts, prototypes, samples, drawings, test results, material and manufacturing specifications, suppliers, customers, employees, processes, licensing and any other ideas or information relating to Synthesized  LTD’s business or Synthesized  LTD Products, the Supplies or any business or activity in which Synthesized  LTD is engaged, regardless of the form of disclosure, whether or not disclosed in a writing marked “Confidential” or in some similar manner or identified as confidential; (ii) improvements derived by Supplier from the information identified in Subsection l(A)(i) or from access to Synthesized  LTD’s facilities; and (iii) any and all software, reports, memoranda, documents, developments, or other results produced by Supplier in the performance of providing Supplies that are directly related to Synthesized  LTD’s business and not primarily to general technology used by Supplier in the conduct of its core business.
        
        
        “Invention” means any work of authorship, invention, know-how, device, design, algorithm, method, process, improvement, concept, idea, expression, discovery or invention, whether or not copyrightable or patentable and whether or not reduced to practice.
        
        "Intellectual Properties" means patents, utility models, trademarks, service marks, trade names, service names and copyrights and applications therefor and registrations thereof, and computer programs, software, firmware and documentation, designs, inventions, research records, drawings, technical knowledge and information, rights to products under research and development and trade secrets.
        
        B. Inventions and Patents.
        
        Collaborator agrees that all the Inventions are, upon creation, Inventions of the Synthesized  LTD, shall be the sole and exclusive property of the Synthesized  LTD and its assignees, and the Synthesized  LTD and its assignees shall be the sole and exclusive owner of all title, rights and interest in and to any patents, copyrights, trade secrets and all other rights of any kind or nature, including moral rights, in connection with such Inventions. 
        
        C. Confidential Information.
        
        During the term of this Licence and at all times thereafter, the Collaborator shall maintain the confidentiality of the Confidential Information and will exercise the same standard of care with respect to the storage of such information.
        
        The Collaborator agrees that he will not, during the term of this Licence or at any time thereafter, directly or indirectly:  (i) transfer or disclose any Confidential Information to any third party; (ii) use, access, copy, or manipulate any Confidential Information for any purpose other than solely as necessary to perform the work.
        
Project-URL: homepage, https://synthesized.io
Project-URL: documentation, https://docs.synthesized.io/
Project-URL: repository, https://github.com/synthesized-io/synthesized-sdk
Keywords: synthetic,generative,data
Platform: MacOS
Platform: Windows
Platform: Linux
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: Other/Proprietary License
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: Healthcare Industry
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE.md
Requires-Dist: faker (>=8.0)
Requires-Dist: matplotlib (>=3.4)
Requires-Dist: numpy (>=1.19.2)
Requires-Dist: pandas (>=1.2)
Requires-Dist: prompt-toolkit (>=3.0)
Requires-Dist: PyYAML (>=5.2)
Requires-Dist: rsa (>=4.7)
Requires-Dist: rstr (>=2.2)
Requires-Dist: scikit-learn (>=0.23)
Requires-Dist: scipy (>=1.5)
Requires-Dist: seaborn (>=0.11)
Requires-Dist: synthesized-insight (>=0.5)
Requires-Dist: tensorflow-privacy (<0.8,>=0.6)
Requires-Dist: tensorflow-probability (>=0.14.0)
Requires-Dist: tensorflow (>=2.6.2) ; platform_machine != "arm64" or platform_system != "Darwin"
Requires-Dist: tensorflow-macos (>=2.6) ; platform_machine == "arm64" and platform_system == "Darwin"
Provides-Extra: colab
Requires-Dist: analytics-python (~=1.3) ; extra == 'colab'
Requires-Dist: sentry-sdk (~=1.2) ; extra == 'colab'
Provides-Extra: dev
Requires-Dist: pre-commit ; extra == 'dev'
Requires-Dist: black ; extra == 'dev'
Requires-Dist: mypy ; extra == 'dev'
Requires-Dist: pylint ; extra == 'dev'
Requires-Dist: importlib-metadata ; (python_version < "3.8") and extra == 'dev'
Provides-Extra: doc
Requires-Dist: sphinx (==4.5.0) ; extra == 'doc'
Requires-Dist: pydata-sphinx-theme (==0.8.1) ; extra == 'doc'
Requires-Dist: sphinx-panels (==0.6.0) ; extra == 'doc'
Requires-Dist: sphinx-autodoc-typehints (==1.18.1) ; extra == 'doc'
Requires-Dist: sphinx-inline-tabs (==2022.1.2b11) ; extra == 'doc'
Requires-Dist: sphinxcontrib-spelling (==7.3.2) ; extra == 'doc'
Requires-Dist: ipython (==8.2.0) ; extra == 'doc'
Requires-Dist: myst-parser (==0.17.2) ; extra == 'doc'
Requires-Dist: sphinxcontrib.asciinema (==0.3.3) ; extra == 'doc'
Provides-Extra: test
Requires-Dist: pytest ; extra == 'test'
Requires-Dist: pytest-cov ; extra == 'test'
Requires-Dist: hypothesis[pandas] ; extra == 'test'
Provides-Extra: tune
Requires-Dist: google-api-python-client (~=2.0) ; extra == 'tune'
Requires-Dist: ray[tune] ; extra == 'tune'
Requires-Dist: ax-platform ; extra == 'tune'
Requires-Dist: cryptography ; extra == 'tune'
Requires-Dist: jupyter ; extra == 'tune'

<img width="450" alt="Synthesized" src="https://user-images.githubusercontent.com/13236749/127093790-daab8320-7d13-4073-962a-0723bf389d5c.png">

[![lint-test](https://github.com/synthesized-io/synthesized-sdk/actions/workflows/lint-test.yml/badge.svg?branch=master&event=push)](https://github.com/synthesized-io/synthesized-sdk/actions/workflows/lint-test.yml)
[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=synthesized-io_synthesized-sdk&metric=alert_status&token=8f6373021560fd51af99c27919a0aca8753fd595)](https://sonarcloud.io/summary/new_code?id=synthesized-io_synthesized-sdk)
[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=synthesized-io_synthesized&metric=coverage&token=41af6e677526f12a63951854b45d67aa1161c2e1)](https://sonarcloud.io/dashboard?id=synthesized-io_synthesized)
[![Technical Debt](https://sonarcloud.io/api/project_badges/measure?project=synthesized-io_synthesized-sdk&metric=sqale_index&token=8f6373021560fd51af99c27919a0aca8753fd595)](https://sonarcloud.io/summary/new_code?id=synthesized-io_synthesized-sdk)
[![Supported OS](https://shields.io/badge/platform-linux%20|%20macos%20|%20windows-yellow)]()
[![Supported OS](https://shields.io/badge/python-3.6%20|%203.7%20|%203.8%20|%203.9-blue)]()
[![Documentation](https://shields.io/badge/docs-latest-blueviolet)](https://docs.synthesized.io/sdk/latest/)

-----

![synthesize](https://user-images.githubusercontent.com/13236749/138488145-ae8ac235-1222-403c-8bee-eae84c682154.gif)


## Downloading (for customers without access to this repo)

The SDK wheels can be downloaded from the publically available google cloud storage link:
https://storage.googleapis.com/synthesized_sdk_builds/latest/synthesized-wheels.7z.

Using the provided password, the 7-Zip archive can be decrypted using `p7zip`.

```console
$ 7z x synthesized-wheels.7z -p'<ZIP_PASSWORD>'
```

## Installation / Usage

### macOS
#### 0. Make sure you have [brew](https://brew.sh/) installed.
```zsh
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

#### 1. Download external python requirements.
Make sure latest command line tools are installed: 'xcode-select --install'/Software Update.
`openssl` `sqlite3` `zlib` are required but already supplied by mac os. You can also install them if you are unsure.
```zsh
brew update
brew install openssl readline sqlite3 xz bzip2
```

The following needs to be added into your shell profile:

```zsh
# ~/.zprofile
export PATH="/usr/local/opt/llvm/bin:$PATH"
export LDFLAGS="-L/usr/local/opt/llvm/lib -L/usr/local/opt/zlib/lib -L/usr/local/opt/bzip2/lib"
export CPPFLAGS="-I/usr/local/opt/llvm/include -I/usr/local/opt/zlib/include -I/usr/local/opt/bzip2/include"
export PKG_CONFIG_PATH="/usr/local/opt/zlib/lib/pkgconfig"
```
Restart your terminal at this stage.

#### 2. Install pyenv.
You may need to replace `.zprofile`/`.zshrc` with `.profile`/`.bashrc` if you don't use zshell.
```zsh
brew install pyenv
echo 'eval "$(pyenv init --path)"' >> ~/.zprofile
echo 'eval "$(pyenv init -)"' >> ~/.zshrc
```
Restart your terminal again.

#### 3. Install Python

Use the latest python 3.7, 3.8 or 3.9 if possible.

```zsh
pyenv install 3.9.12
pyenv global 3.9.12
```

#### 4. Clone the repo:

It's convienient to clone the repo to your home directory as done below.
```zsh
cd ~
git clone git@github.com:synthesized-io/synthesized-sdk
cd synthesized-sdk
```

#### 5. Create a virtual environment

**Check your architecture!** If your laptop has an intel CPU you will likely be using x86_64 architecture.
If your laptop has a Mac M1 chip you will likely be on arm64 architecture.

### For x86_64 architecture ONLY

```zsh
python -m venv py39
source py39/bin/activate
```

### For macOS arm64 architecture ONLY

Download and install `openblas` and `hdf5` using `brew`.

```zsh
brew install openblas hdf5
```

Update the following environment variables.
```zsh
# ~/.zshrc
export HDF5_DIR="$(brew --prefix hdf5)"
export OPENBLAS="$(brew --prefix openblas)"
```

Create a virtual environment.

```zsh
python -m venv py39
source py39/bin/activate
```

#### 6. Install requirements

Dont forget to **update pip**!

```zsh
pip install -U pip setuptools wheel
pip install -e ".[dev,test]"
```

#### 7. Final bits!

Ask a team member how to get a synthesized key.

Set your `SYNTHESIZED_KEY`.

```zsh
mkdir -p ~/.synthesized
echo "ABC********" > ~/.synthesized/key
```

Configure git hooks:

```zsh
pre-commit install
```

If you want to use jupyter this will create the correct "kernel" in the notebook:

```zsh
pip install jupyter
ipython kernel install --name "synth" --user
```

#### 8. Run tests.

Just to make sure everything is working you can run:

```zsh
synth-validate
```

## Building Synthesized

Synthesized can be built by tagging a commit or running the GH action `build-wheels` locally with `act`. When locally run, the wheels are saved to the path:  `{synthesized_repo_path}/wheelhouse/synthesized-*.whl`.

### Installing `act`

You must install Docker Desktop and `nektos/act`

```console
$ brew install docker --cask
$ brew install act
```

Before running them, you will need to add any missing secrets to a file called `.secrets` in your local repo.
eg.
```console
$ echo SYNTHESIZED_KEY=$(cat ~/.synthesized/key) >> .secrets
```

`act` also has a root config file which should be configured to use the docker image that closely resembles github's default containers.

```console
$ echo '-P ubuntu-latest=nektos/act-environments-ubuntu:18.04' >> ~/.actrc
```

The synthesized wheels can then be built with the command below.

```console
$ act -bj build-wheels
```

## Building Docs

To build the docs you need to install the docs dependencies - note these only work for Python 3.8+:

```console
$ pip install ".[docs]"
```

Then cd into the docs directory, set the DOCS_VERSION and DOCS_ROOT environment variables, and run the make html command:

```console
$ cd docs
$ export 'DOCS_VERSION='$(echo $(git rev-parse HEAD | cut -c 1-8))
$ export 'DOCS_ROOT='$(pwd)'/_build' 
$ make html
```

The docs should be placed in `synthesized-sdk/docs/_build/html`.

## [Contributing](https://github.com/synthesized-io/synthesized/blob/master/.github/CONTRIBUTING.md)

Please follow the link to read about contributing guidlines.
