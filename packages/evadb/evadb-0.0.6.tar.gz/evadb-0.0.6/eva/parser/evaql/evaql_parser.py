# Generated from eva/parser/evaql/evaql_parser.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00b2")
        buf.write("\u046e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\3\2\5\2\u00d6\n\2\3\2\5\2\u00d9\n\2\3")
        buf.write("\2\3\2\3\3\3\3\5\3\u00df\n\3\3\3\3\3\3\3\7\3\u00e4\n\3")
        buf.write("\f\3\16\3\u00e7\13\3\3\3\3\3\5\3\u00eb\n\3\3\3\5\3\u00ee")
        buf.write("\n\3\3\3\5\3\u00f1\n\3\3\4\3\4\3\4\5\4\u00f6\n\4\3\5\3")
        buf.write("\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0104\n")
        buf.write("\6\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u010c\n\7\3\b\3\b\3\b\5")
        buf.write("\b\u0111\n\b\3\t\3\t\3\t\5\t\u0116\n\t\3\t\3\t\3\n\3\n")
        buf.write("\3\n\3\n\5\n\u011e\n\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13")
        buf.write("\5\13\u0127\n\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\r\3\r\3\r\5\r\u0135\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\5\16\u0145\n\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\20\3\20")
        buf.write("\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\23\3\23\7\23\u015c")
        buf.write("\n\23\f\23\16\23\u015f\13\23\3\23\3\23\3\24\3\24\3\24")
        buf.write("\3\24\5\24\u0167\n\24\3\25\3\25\7\25\u016b\n\25\f\25\16")
        buf.write("\25\u016e\13\25\3\26\3\26\3\26\3\26\5\26\u0174\n\26\3")
        buf.write("\26\3\26\3\26\5\26\u0179\n\26\5\26\u017b\n\26\3\27\3\27")
        buf.write("\5\27\u017f\n\27\3\27\5\27\u0182\n\27\3\27\3\27\3\30\3")
        buf.write("\30\3\30\5\30\u0189\n\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\32\5\32\u0196\n\32\3\32\3\32\3")
        buf.write("\33\3\33\3\33\5\33\u019d\n\33\3\33\3\33\3\34\3\34\3\35")
        buf.write("\3\35\5\35\u01a5\n\35\3\35\3\35\3\35\3\35\3\35\5\35\u01ac")
        buf.write("\n\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u01b6")
        buf.write("\n\36\3\36\7\36\u01b9\n\36\f\36\16\36\u01bc\13\36\3\37")
        buf.write("\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u01ca\n \3 \3 ")
        buf.write("\5 \u01ce\n \3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3")
        buf.write("$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\7%\u01e7\n%\f%\16%")
        buf.write("\u01ea\13%\5%\u01ec\n%\3&\3&\3&\3&\5&\u01f2\n&\3\'\3\'")
        buf.write("\3\'\3\'\3\'\5\'\u01f9\n\'\3\'\5\'\u01fc\n\'\3\'\3\'\5")
        buf.write("\'\u0200\n\'\3(\3(\3(\5(\u0205\n(\3(\5(\u0208\n(\3(\3")
        buf.write("(\3(\3(\7(\u020e\n(\f(\16(\u0211\13(\3(\3(\5(\u0215\n")
        buf.write("(\3(\5(\u0218\n(\3(\5(\u021b\n(\3)\3)\3)\3)\3)\7)\u0222")
        buf.write("\n)\f)\16)\u0225\13)\3*\3*\5*\u0229\n*\3+\3+\3,\3,\7,")
        buf.write("\u022f\n,\f,\16,\u0232\13,\3-\3-\5-\u0236\n-\3-\5-\u0239")
        buf.write("\n-\3-\5-\u023c\n-\3.\3.\3.\3.\5.\u0242\n.\3/\3/\3/\3")
        buf.write("/\3/\5/\u0249\n/\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\5\61\u0257\n\61\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\5\62\u0261\n\62\3\63\3\63\3")
        buf.write("\63\3\63\5\63\u0267\n\63\3\63\5\63\u026a\n\63\3\63\5\63")
        buf.write("\u026d\n\63\3\63\5\63\u0270\n\63\3\64\3\64\5\64\u0274")
        buf.write("\n\64\3\64\3\64\7\64\u0278\n\64\f\64\16\64\u027b\13\64")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0283\n\65\3\65\5")
        buf.write("\65\u0286\n\65\3\65\3\65\5\65\u028a\n\65\3\65\5\65\u028d")
        buf.write("\n\65\3\65\3\65\5\65\u0291\n\65\3\65\3\65\5\65\u0295\n")
        buf.write("\65\3\65\5\65\u0298\n\65\5\65\u029a\n\65\3\66\3\66\3\66")
        buf.write("\3\66\5\66\u02a0\n\66\3\66\3\66\3\66\3\66\3\66\7\66\u02a7")
        buf.write("\n\66\f\66\16\66\u02aa\13\66\5\66\u02ac\n\66\3\66\3\66")
        buf.write("\5\66\u02b0\n\66\3\67\3\67\5\67\u02b4\n\67\38\38\38\3")
        buf.write("8\58\u02ba\n8\38\38\38\38\38\58\u02c1\n8\39\39\39\3:\3")
        buf.write(":\3:\3;\3;\3<\3<\3<\3=\3=\3=\3>\3>\3>\3?\3?\3?\3?\5?\u02d8")
        buf.write("\n?\3@\3@\3A\3A\3B\3B\3C\3C\3C\5C\u02e3\nC\5C\u02e5\n")
        buf.write("C\3D\3D\3D\3D\3D\5D\u02ec\nD\3D\5D\u02ef\nD\3E\3E\3F\3")
        buf.write("F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\6F\u0301\nF\rF\16")
        buf.write("F\u0302\3G\3G\5G\u0307\nG\3H\3H\3I\3I\3I\5I\u030e\nI\3")
        buf.write("J\3J\3K\3K\3L\3L\3M\5M\u0317\nM\3M\3M\3N\3N\3N\3N\7N\u031f")
        buf.write("\nN\fN\16N\u0322\13N\3N\3N\3N\3N\5N\u0328\nN\3O\3O\3O")
        buf.write("\3O\3O\3O\3O\5O\u0331\nO\3O\3O\5O\u0335\nO\3P\3P\3Q\3")
        buf.write("Q\3Q\5Q\u033c\nQ\3Q\3Q\5Q\u0340\nQ\3Q\3Q\5Q\u0344\nQ\3")
        buf.write("Q\5Q\u0347\nQ\3Q\3Q\5Q\u034b\nQ\3Q\5Q\u034e\nQ\3Q\5Q\u0351")
        buf.write("\nQ\3R\3R\3R\3R\3S\3S\3S\3S\3S\3S\3T\3T\3T\3T\7T\u0361")
        buf.write("\nT\fT\16T\u0364\13T\3T\3T\3T\3U\3U\3U\7U\u036c\nU\fU")
        buf.write("\16U\u036f\13U\3V\3V\3V\7V\u0374\nV\fV\16V\u0377\13V\3")
        buf.write("W\3W\3W\3W\7W\u037d\nW\fW\16W\u0380\13W\3W\3W\3X\3X\3")
        buf.write("X\7X\u0387\nX\fX\16X\u038a\13X\3Y\3Y\3Y\7Y\u038f\nY\f")
        buf.write("Y\16Y\u0392\13Y\3Z\3Z\5Z\u0396\nZ\3[\3[\5[\u039a\n[\3")
        buf.write("\\\3\\\3\\\3]\3]\3]\3]\3^\3^\5^\u03a5\n^\3_\3_\3_\3_\3")
        buf.write("_\5_\u03ac\n_\3`\3`\3`\5`\u03b1\n`\3`\3`\3`\3`\3`\3`\3")
        buf.write("`\5`\u03ba\n`\3`\5`\u03bd\n`\3`\5`\u03c0\n`\3a\3a\3a\3")
        buf.write("a\5a\u03c6\na\3a\3a\3a\3a\3a\5a\u03cd\na\7a\u03cf\na\f")
        buf.write("a\16a\u03d2\13a\3b\3b\3b\3b\5b\u03d8\nb\3c\3c\3c\3c\3")
        buf.write("c\3c\5c\u03e0\nc\3c\3c\3c\5c\u03e5\nc\3c\3c\3c\3c\7c\u03eb")
        buf.write("\nc\fc\16c\u03ee\13c\3d\3d\3d\5d\u03f3\nd\3d\3d\3d\3d")
        buf.write("\3d\3d\3d\3d\5d\u03fd\nd\3d\3d\3d\3d\5d\u0403\nd\3d\3")
        buf.write("d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0413\nd\3d\3")
        buf.write("d\3d\5d\u0418\nd\7d\u041a\nd\fd\16d\u041d\13d\3e\3e\3")
        buf.write("e\3e\3e\3e\3e\3e\3e\3e\3e\7e\u042a\ne\fe\16e\u042d\13")
        buf.write("e\3e\3e\3e\3e\3e\3e\5e\u0435\ne\3e\3e\3e\3e\3e\3e\3e\3")
        buf.write("e\7e\u043f\ne\fe\16e\u0442\13e\3f\3f\3g\3g\3g\3g\3g\3")
        buf.write("g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u0458\ng\3h\3")
        buf.write("h\3h\3h\3h\3h\3h\5h\u0461\nh\3i\3i\3i\3i\3i\3i\3i\5i\u046a")
        buf.write("\ni\3j\3j\3j\2\6:\u00c4\u00c6\u00c8k\2\4\6\b\n\f\16\20")
        buf.write("\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJL")
        buf.write("NPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be")
        buf.write("\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0")
        buf.write("\u00d2\2\23\3\2VW\3\2RS\4\2MMww\4\2\r\r\26\26\4\2AADD")
        buf.write("\4\2\u00ad\u00ad\u00af\u00af\5\2\13\13\u00a1\u00a3\u00a9")
        buf.write("\u00a9\4\2\35\35CC\4\2\61\61\u00ab\u00ab\3\2_k\5\2lln")
        buf.write("oqq\4\2\7\7\30\30\4\2\60\60\u0094\u0094\5\2\35\35CCGG")
        buf.write("\5\2\7\7\n\n??\6\2\60\60\u008c\u008c\u008e\u008e\u0094")
        buf.write("\u0095\3\2\u0089\u0090\2\u04c2\2\u00d5\3\2\2\2\4\u00e5")
        buf.write("\3\2\2\2\6\u00f5\3\2\2\2\b\u00f7\3\2\2\2\n\u0103\3\2\2")
        buf.write("\2\f\u010b\3\2\2\2\16\u0110\3\2\2\2\20\u0112\3\2\2\2\22")
        buf.write("\u0119\3\2\2\2\24\u0123\3\2\2\2\26\u012b\3\2\2\2\30\u0131")
        buf.write("\3\2\2\2\32\u0140\3\2\2\2\34\u014e\3\2\2\2\36\u0150\3")
        buf.write("\2\2\2 \u0152\3\2\2\2\"\u0154\3\2\2\2$\u0157\3\2\2\2&")
        buf.write("\u0166\3\2\2\2(\u0168\3\2\2\2*\u017a\3\2\2\2,\u017c\3")
        buf.write("\2\2\2.\u0185\3\2\2\2\60\u018c\3\2\2\2\62\u0192\3\2\2")
        buf.write("\2\64\u0199\3\2\2\2\66\u01a0\3\2\2\28\u01a2\3\2\2\2:\u01af")
        buf.write("\3\2\2\2<\u01bd\3\2\2\2>\u01bf\3\2\2\2@\u01cf\3\2\2\2")
        buf.write("B\u01d2\3\2\2\2D\u01d8\3\2\2\2F\u01da\3\2\2\2H\u01eb\3")
        buf.write("\2\2\2J\u01ed\3\2\2\2L\u01f3\3\2\2\2N\u0201\3\2\2\2P\u021c")
        buf.write("\3\2\2\2R\u0226\3\2\2\2T\u022a\3\2\2\2V\u022c\3\2\2\2")
        buf.write("X\u0233\3\2\2\2Z\u0241\3\2\2\2\\\u0248\3\2\2\2^\u024a")
        buf.write("\3\2\2\2`\u024d\3\2\2\2b\u0260\3\2\2\2d\u0262\3\2\2\2")
        buf.write("f\u0273\3\2\2\2h\u0299\3\2\2\2j\u029b\3\2\2\2l\u02b1\3")
        buf.write("\2\2\2n\u02b5\3\2\2\2p\u02c2\3\2\2\2r\u02c5\3\2\2\2t\u02c8")
        buf.write("\3\2\2\2v\u02ca\3\2\2\2x\u02cd\3\2\2\2z\u02d0\3\2\2\2")
        buf.write("|\u02d3\3\2\2\2~\u02d9\3\2\2\2\u0080\u02db\3\2\2\2\u0082")
        buf.write("\u02dd\3\2\2\2\u0084\u02df\3\2\2\2\u0086\u02e6\3\2\2\2")
        buf.write("\u0088\u02f0\3\2\2\2\u008a\u02f2\3\2\2\2\u008c\u0306\3")
        buf.write("\2\2\2\u008e\u0308\3\2\2\2\u0090\u030d\3\2\2\2\u0092\u030f")
        buf.write("\3\2\2\2\u0094\u0311\3\2\2\2\u0096\u0313\3\2\2\2\u0098")
        buf.write("\u0316\3\2\2\2\u009a\u0327\3\2\2\2\u009c\u0334\3\2\2\2")
        buf.write("\u009e\u0336\3\2\2\2\u00a0\u0350\3\2\2\2\u00a2\u0352\3")
        buf.write("\2\2\2\u00a4\u0356\3\2\2\2\u00a6\u035c\3\2\2\2\u00a8\u0368")
        buf.write("\3\2\2\2\u00aa\u0370\3\2\2\2\u00ac\u0378\3\2\2\2\u00ae")
        buf.write("\u0383\3\2\2\2\u00b0\u038b\3\2\2\2\u00b2\u0395\3\2\2\2")
        buf.write("\u00b4\u0399\3\2\2\2\u00b6\u039b\3\2\2\2\u00b8\u039e\3")
        buf.write("\2\2\2\u00ba\u03a4\3\2\2\2\u00bc\u03a6\3\2\2\2\u00be\u03bf")
        buf.write("\3\2\2\2\u00c0\u03c5\3\2\2\2\u00c2\u03d7\3\2\2\2\u00c4")
        buf.write("\u03e4\3\2\2\2\u00c6\u03ef\3\2\2\2\u00c8\u0434\3\2\2\2")
        buf.write("\u00ca\u0443\3\2\2\2\u00cc\u0457\3\2\2\2\u00ce\u0460\3")
        buf.write("\2\2\2\u00d0\u0469\3\2\2\2\u00d2\u046b\3\2\2\2\u00d4\u00d6")
        buf.write("\5\4\3\2\u00d5\u00d4\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6")
        buf.write("\u00d8\3\2\2\2\u00d7\u00d9\7\u008d\2\2\u00d8\u00d7\3\2")
        buf.write("\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00db")
        buf.write("\7\2\2\3\u00db\3\3\2\2\2\u00dc\u00de\5\6\4\2\u00dd\u00df")
        buf.write("\7\u008d\2\2\u00de\u00dd\3\2\2\2\u00de\u00df\3\2\2\2\u00df")
        buf.write("\u00e0\3\2\2\2\u00e0\u00e1\7\u009f\2\2\u00e1\u00e4\3\2")
        buf.write("\2\2\u00e2\u00e4\5\b\5\2\u00e3\u00dc\3\2\2\2\u00e3\u00e2")
        buf.write("\3\2\2\2\u00e4\u00e7\3\2\2\2\u00e5\u00e3\3\2\2\2\u00e5")
        buf.write("\u00e6\3\2\2\2\u00e6\u00f0\3\2\2\2\u00e7\u00e5\3\2\2\2")
        buf.write("\u00e8\u00ed\5\6\4\2\u00e9\u00eb\7\u008d\2\2\u00ea\u00e9")
        buf.write("\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec")
        buf.write("\u00ee\7\u009f\2\2\u00ed\u00ea\3\2\2\2\u00ed\u00ee\3\2")
        buf.write("\2\2\u00ee\u00f1\3\2\2\2\u00ef\u00f1\5\b\5\2\u00f0\u00e8")
        buf.write("\3\2\2\2\u00f0\u00ef\3\2\2\2\u00f1\5\3\2\2\2\u00f2\u00f6")
        buf.write("\5\n\6\2\u00f3\u00f6\5\f\7\2\u00f4\u00f6\5\16\b\2\u00f5")
        buf.write("\u00f2\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5\u00f4\3\2\2\2")
        buf.write("\u00f6\7\3\2\2\2\u00f7\u00f8\7\u009f\2\2\u00f8\t\3\2\2")
        buf.write("\2\u00f9\u0104\5\20\t\2\u00fa\u0104\5\24\13\2\u00fb\u0104")
        buf.write("\5\22\n\2\u00fc\u0104\5\30\r\2\u00fd\u0104\5\32\16\2\u00fe")
        buf.write("\u0104\5.\30\2\u00ff\u0104\5\62\32\2\u0100\u0104\5\64")
        buf.write("\33\2\u0101\u0104\5\60\31\2\u0102\u0104\5\26\f\2\u0103")
        buf.write("\u00f9\3\2\2\2\u0103\u00fa\3\2\2\2\u0103\u00fb\3\2\2\2")
        buf.write("\u0103\u00fc\3\2\2\2\u0103\u00fd\3\2\2\2\u0103\u00fe\3")
        buf.write("\2\2\2\u0103\u00ff\3\2\2\2\u0103\u0100\3\2\2\2\u0103\u0101")
        buf.write("\3\2\2\2\u0103\u0102\3\2\2\2\u0104\13\3\2\2\2\u0105\u010c")
        buf.write("\5:\36\2\u0106\u010c\58\35\2\u0107\u010c\5<\37\2\u0108")
        buf.write("\u010c\5\66\34\2\u0109\u010c\5> \2\u010a\u010c\5B\"\2")
        buf.write("\u010b\u0105\3\2\2\2\u010b\u0106\3\2\2\2\u010b\u0107\3")
        buf.write("\2\2\2\u010b\u0108\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010a")
        buf.write("\3\2\2\2\u010c\r\3\2\2\2\u010d\u0111\5v<\2\u010e\u0111")
        buf.write("\5x=\2\u010f\u0111\5z>\2\u0110\u010d\3\2\2\2\u0110\u010e")
        buf.write("\3\2\2\2\u0110\u010f\3\2\2\2\u0111\17\3\2\2\2\u0112\u0113")
        buf.write("\7\21\2\2\u0113\u0115\7\23\2\2\u0114\u0116\5\u00b8]\2")
        buf.write("\u0115\u0114\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0117\3")
        buf.write("\2\2\2\u0117\u0118\5\u008cG\2\u0118\21\3\2\2\2\u0119\u011a")
        buf.write("\7\21\2\2\u011a\u011b\7&\2\2\u011b\u011d\5\u008cG\2\u011c")
        buf.write("\u011e\5\"\22\2\u011d\u011c\3\2\2\2\u011d\u011e\3\2\2")
        buf.write("\2\u011e\u011f\3\2\2\2\u011f\u0120\7\63\2\2\u0120\u0121")
        buf.write("\5~@\2\u0121\u0122\5\u00acW\2\u0122\23\3\2\2\2\u0123\u0124")
        buf.write("\7\21\2\2\u0124\u0126\7@\2\2\u0125\u0127\5\u00b8]\2\u0126")
        buf.write("\u0125\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0128\3\2\2\2")
        buf.write("\u0128\u0129\5~@\2\u0129\u012a\5$\23\2\u012a\25\3\2\2")
        buf.write("\2\u012b\u012c\79\2\2\u012c\u012d\7@\2\2\u012d\u012e\5")
        buf.write("\u0080A\2\u012e\u012f\7B\2\2\u012f\u0130\5\u0082B\2\u0130")
        buf.write("\27\3\2\2\2\u0131\u0132\7\21\2\2\u0132\u0134\7x\2\2\u0133")
        buf.write("\u0135\5\u00b8]\2\u0134\u0133\3\2\2\2\u0134\u0135\3\2")
        buf.write("\2\2\u0135\u0136\3\2\2\2\u0136\u0137\5\34\17\2\u0137\u0138")
        buf.write("\7y\2\2\u0138\u0139\5$\23\2\u0139\u013a\7z\2\2\u013a\u013b")
        buf.write("\5$\23\2\u013b\u013c\7{\2\2\u013c\u013d\5\36\20\2\u013d")
        buf.write("\u013e\7|\2\2\u013e\u013f\5 \21\2\u013f\31\3\2\2\2\u0140")
        buf.write("\u0141\7\21\2\2\u0141\u0142\7}\2\2\u0142\u0144\7~\2\2")
        buf.write("\u0143\u0145\5\u00b8]\2\u0144\u0143\3\2\2\2\u0144\u0145")
        buf.write("\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147\5~@\2\u0147\u0148")
        buf.write("\7\u009a\2\2\u0148\u0149\5\u00a8U\2\u0149\u014a\7\u009b")
        buf.write("\2\2\u014a\u014b\3\2\2\2\u014b\u014c\7\f\2\2\u014c\u014d")
        buf.write("\5:\36\2\u014d\33\3\2\2\2\u014e\u014f\5\u008cG\2\u014f")
        buf.write("\35\3\2\2\2\u0150\u0151\5\u008cG\2\u0151\37\3\2\2\2\u0152")
        buf.write("\u0153\5\u0094K\2\u0153!\3\2\2\2\u0154\u0155\7L\2\2\u0155")
        buf.write("\u0156\t\2\2\2\u0156#\3\2\2\2\u0157\u0158\7\u009a\2\2")
        buf.write("\u0158\u015d\5&\24\2\u0159\u015a\7\u009e\2\2\u015a\u015c")
        buf.write("\5&\24\2\u015b\u0159\3\2\2\2\u015c\u015f\3\2\2\2\u015d")
        buf.write("\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0160\3\2\2\2")
        buf.write("\u015f\u015d\3\2\2\2\u0160\u0161\7\u009b\2\2\u0161%\3")
        buf.write("\2\2\2\u0162\u0163\5\u008cG\2\u0163\u0164\5(\25\2\u0164")
        buf.write("\u0167\3\2\2\2\u0165\u0167\5,\27\2\u0166\u0162\3\2\2\2")
        buf.write("\u0166\u0165\3\2\2\2\u0167\'\3\2\2\2\u0168\u016c\5\u00a0")
        buf.write("Q\2\u0169\u016b\5*\26\2\u016a\u0169\3\2\2\2\u016b\u016e")
        buf.write("\3\2\2\2\u016c\u016a\3\2\2\2\u016c\u016d\3\2\2\2\u016d")
        buf.write(")\3\2\2\2\u016e\u016c\3\2\2\2\u016f\u017b\5\u0098M\2\u0170")
        buf.write("\u0171\7\24\2\2\u0171\u017b\5\u00b2Z\2\u0172\u0174\7\67")
        buf.write("\2\2\u0173\u0172\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u0175")
        buf.write("\3\2\2\2\u0175\u017b\7*\2\2\u0176\u0178\7F\2\2\u0177\u0179")
        buf.write("\7*\2\2\u0178\u0177\3\2\2\2\u0178\u0179\3\2\2\2\u0179")
        buf.write("\u017b\3\2\2\2\u017a\u016f\3\2\2\2\u017a\u0170\3\2\2\2")
        buf.write("\u017a\u0173\3\2\2\2\u017a\u0176\3\2\2\2\u017b+\3\2\2")
        buf.write("\2\u017c\u017e\7&\2\2\u017d\u017f\5\u008cG\2\u017e\u017d")
        buf.write("\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0181\3\2\2\2\u0180")
        buf.write("\u0182\5\"\22\2\u0181\u0180\3\2\2\2\u0181\u0182\3\2\2")
        buf.write("\2\u0182\u0183\3\2\2\2\u0183\u0184\5\u00acW\2\u0184-\3")
        buf.write("\2\2\2\u0185\u0186\7\31\2\2\u0186\u0188\7\23\2\2\u0187")
        buf.write("\u0189\5\u00b6\\\2\u0188\u0187\3\2\2\2\u0188\u0189\3\2")
        buf.write("\2\2\u0189\u018a\3\2\2\2\u018a\u018b\5\u008cG\2\u018b")
        buf.write("/\3\2\2\2\u018c\u018d\7\31\2\2\u018d\u018e\7&\2\2\u018e")
        buf.write("\u018f\5\u008cG\2\u018f\u0190\7\63\2\2\u0190\u0191\5~")
        buf.write("@\2\u0191\61\3\2\2\2\u0192\u0193\7\31\2\2\u0193\u0195")
        buf.write("\7@\2\2\u0194\u0196\5\u00b6\\\2\u0195\u0194\3\2\2\2\u0195")
        buf.write("\u0196\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198\5\u00aa")
        buf.write("V\2\u0198\63\3\2\2\2\u0199\u019a\7\31\2\2\u019a\u019c")
        buf.write("\7x\2\2\u019b\u019d\5\u00b6\\\2\u019c\u019b\3\2\2\2\u019c")
        buf.write("\u019d\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u019f\5\34\17")
        buf.write("\2\u019f\65\3\2\2\2\u01a0\u01a1\5L\'\2\u01a1\67\3\2\2")
        buf.write("\2\u01a2\u01a4\7\'\2\2\u01a3\u01a5\7%\2\2\u01a4\u01a3")
        buf.write("\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6")
        buf.write("\u01ab\5~@\2\u01a7\u01a8\7\u009a\2\2\u01a8\u01a9\5\u00a8")
        buf.write("U\2\u01a9\u01aa\7\u009b\2\2\u01aa\u01ac\3\2\2\2\u01ab")
        buf.write("\u01a7\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ad\3\2\2\2")
        buf.write("\u01ad\u01ae\5H%\2\u01ae9\3\2\2\2\u01af\u01b0\b\36\1\2")
        buf.write("\u01b0\u01b1\5d\63\2\u01b1\u01ba\3\2\2\2\u01b2\u01b3\f")
        buf.write("\3\2\2\u01b3\u01b5\7E\2\2\u01b4\u01b6\7\7\2\2\u01b5\u01b4")
        buf.write("\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7")
        buf.write("\u01b9\5:\36\4\u01b8\u01b2\3\2\2\2\u01b9\u01bc\3\2\2\2")
        buf.write("\u01ba\u01b8\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb;\3\2\2")
        buf.write("\2\u01bc\u01ba\3\2\2\2\u01bd\u01be\5N(\2\u01be=\3\2\2")
        buf.write("\2\u01bf\u01c0\7.\2\2\u01c0\u01c1\7\22\2\2\u01c1\u01c2")
        buf.write("\7#\2\2\u01c2\u01c3\5D#\2\u01c3\u01c4\7%\2\2\u01c4\u01c9")
        buf.write("\5~@\2\u01c5\u01c6\7\u009a\2\2\u01c6\u01c7\5\u00a8U\2")
        buf.write("\u01c7\u01c8\7\u009b\2\2\u01c8\u01ca\3\2\2\2\u01c9\u01c5")
        buf.write("\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb")
        buf.write("\u01cc\7P\2\2\u01cc\u01ce\5@!\2\u01cd\u01cb\3\2\2\2\u01cd")
        buf.write("\u01ce\3\2\2\2\u01ce?\3\2\2\2\u01cf\u01d0\7Q\2\2\u01d0")
        buf.write("\u01d1\t\3\2\2\u01d1A\3\2\2\2\u01d2\u01d3\7K\2\2\u01d3")
        buf.write("\u01d4\7\66\2\2\u01d4\u01d5\5D#\2\u01d5\u01d6\7\16\2\2")
        buf.write("\u01d6\u01d7\5F$\2\u01d7C\3\2\2\2\u01d8\u01d9\5\u0094")
        buf.write("K\2\u01d9E\3\2\2\2\u01da\u01db\5\u0094K\2\u01dbG\3\2\2")
        buf.write("\2\u01dc\u01ec\5:\36\2\u01dd\u01de\t\4\2\2\u01de\u01df")
        buf.write("\7\u009a\2\2\u01df\u01e0\5\u00b0Y\2\u01e0\u01e8\7\u009b")
        buf.write("\2\2\u01e1\u01e2\7\u009e\2\2\u01e2\u01e3\7\u009a\2\2\u01e3")
        buf.write("\u01e4\5\u00b0Y\2\u01e4\u01e5\7\u009b\2\2\u01e5\u01e7")
        buf.write("\3\2\2\2\u01e6\u01e1\3\2\2\2\u01e7\u01ea\3\2\2\2\u01e8")
        buf.write("\u01e6\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01ec\3\2\2\2")
        buf.write("\u01ea\u01e8\3\2\2\2\u01eb\u01dc\3\2\2\2\u01eb\u01dd\3")
        buf.write("\2\2\2\u01ecI\3\2\2\2\u01ed\u01ee\5\u0084C\2\u01ee\u01f1")
        buf.write("\7\u0091\2\2\u01ef\u01f2\5\u00c4c\2\u01f0\u01f2\7\24\2")
        buf.write("\2\u01f1\u01ef\3\2\2\2\u01f1\u01f0\3\2\2\2\u01f2K\3\2")
        buf.write("\2\2\u01f3\u01f4\7\25\2\2\u01f4\u01f5\7\36\2\2\u01f5\u01f8")
        buf.write("\5~@\2\u01f6\u01f7\7N\2\2\u01f7\u01f9\5\u00c4c\2\u01f8")
        buf.write("\u01f6\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fb\3\2\2\2")
        buf.write("\u01fa\u01fc\5P)\2\u01fb\u01fa\3\2\2\2\u01fb\u01fc\3\2")
        buf.write("\2\2\u01fc\u01ff\3\2\2\2\u01fd\u01fe\7-\2\2\u01fe\u0200")
        buf.write("\5\u0092J\2\u01ff\u01fd\3\2\2\2\u01ff\u0200\3\2\2\2\u0200")
        buf.write("M\3\2\2\2\u0201\u0202\7J\2\2\u0202\u0207\5~@\2\u0203\u0205")
        buf.write("\7\f\2\2\u0204\u0203\3\2\2\2\u0204\u0205\3\2\2\2\u0205")
        buf.write("\u0206\3\2\2\2\u0206\u0208\5\u008cG\2\u0207\u0204\3\2")
        buf.write("\2\2\u0207\u0208\3\2\2\2\u0208\u0209\3\2\2\2\u0209\u020a")
        buf.write("\7<\2\2\u020a\u020f\5J&\2\u020b\u020c\7\u009e\2\2\u020c")
        buf.write("\u020e\5J&\2\u020d\u020b\3\2\2\2\u020e\u0211\3\2\2\2\u020f")
        buf.write("\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0214\3\2\2\2")
        buf.write("\u0211\u020f\3\2\2\2\u0212\u0213\7N\2\2\u0213\u0215\5")
        buf.write("\u00c4c\2\u0214\u0212\3\2\2\2\u0214\u0215\3\2\2\2\u0215")
        buf.write("\u0217\3\2\2\2\u0216\u0218\5P)\2\u0217\u0216\3\2\2\2\u0217")
        buf.write("\u0218\3\2\2\2\u0218\u021a\3\2\2\2\u0219\u021b\5n8\2\u021a")
        buf.write("\u0219\3\2\2\2\u021a\u021b\3\2\2\2\u021bO\3\2\2\2\u021c")
        buf.write("\u021d\7\65\2\2\u021d\u021e\7\17\2\2\u021e\u0223\5R*\2")
        buf.write("\u021f\u0220\7\u009e\2\2\u0220\u0222\5R*\2\u0221\u021f")
        buf.write("\3\2\2\2\u0222\u0225\3\2\2\2\u0223\u0221\3\2\2\2\u0223")
        buf.write("\u0224\3\2\2\2\u0224Q\3\2\2\2\u0225\u0223\3\2\2\2\u0226")
        buf.write("\u0228\5\u00c4c\2\u0227\u0229\t\5\2\2\u0228\u0227\3\2")
        buf.write("\2\2\u0228\u0229\3\2\2\2\u0229S\3\2\2\2\u022a\u022b\5")
        buf.write("V,\2\u022bU\3\2\2\2\u022c\u0230\5X-\2\u022d\u022f\5`\61")
        buf.write("\2\u022e\u022d\3\2\2\2\u022f\u0232\3\2\2\2\u0230\u022e")
        buf.write("\3\2\2\2\u0230\u0231\3\2\2\2\u0231W\3\2\2\2\u0232\u0230")
        buf.write("\3\2\2\2\u0233\u0238\5Z.\2\u0234\u0236\7\f\2\2\u0235\u0234")
        buf.write("\3\2\2\2\u0235\u0236\3\2\2\2\u0236\u0237\3\2\2\2\u0237")
        buf.write("\u0239\5\u008cG\2\u0238\u0235\3\2\2\2\u0238\u0239\3\2")
        buf.write("\2\2\u0239\u023b\3\2\2\2\u023a\u023c\5^\60\2\u023b\u023a")
        buf.write("\3\2\2\2\u023b\u023c\3\2\2\2\u023cY\3\2\2\2\u023d\u0242")
        buf.write("\5~@\2\u023e\u0242\5\\/\2\u023f\u0240\7+\2\2\u0240\u0242")
        buf.write("\5\u00ba^\2\u0241\u023d\3\2\2\2\u0241\u023e\3\2\2\2\u0241")
        buf.write("\u023f\3\2\2\2\u0242[\3\2\2\2\u0243\u0249\5:\36\2\u0244")
        buf.write("\u0245\7\u009a\2\2\u0245\u0246\5:\36\2\u0246\u0247\7\u009b")
        buf.write("\2\2\u0247\u0249\3\2\2\2\u0248\u0243\3\2\2\2\u0248\u0244")
        buf.write("\3\2\2\2\u0249]\3\2\2\2\u024a\u024b\7:\2\2\u024b\u024c")
        buf.write("\5\u0092J\2\u024c_\3\2\2\2\u024d\u024e\7)\2\2\u024e\u0256")
        buf.write("\5X-\2\u024f\u0250\7\63\2\2\u0250\u0257\5\u00c4c\2\u0251")
        buf.write("\u0252\7L\2\2\u0252\u0253\7\u009a\2\2\u0253\u0254\5\u00a8")
        buf.write("U\2\u0254\u0255\7\u009b\2\2\u0255\u0257\3\2\2\2\u0256")
        buf.write("\u024f\3\2\2\2\u0256\u0251\3\2\2\2\u0256\u0257\3\2\2\2")
        buf.write("\u0257a\3\2\2\2\u0258\u0259\7\u009a\2\2\u0259\u025a\5")
        buf.write("d\63\2\u025a\u025b\7\u009b\2\2\u025b\u0261\3\2\2\2\u025c")
        buf.write("\u025d\7\u009a\2\2\u025d\u025e\5b\62\2\u025e\u025f\7\u009b")
        buf.write("\2\2\u025f\u0261\3\2\2\2\u0260\u0258\3\2\2\2\u0260\u025c")
        buf.write("\3\2\2\2\u0261c\3\2\2\2\u0262\u0263\7;\2\2\u0263\u0264")
        buf.write("\5f\64\2\u0264\u0266\5j\66\2\u0265\u0267\5P)\2\u0266\u0265")
        buf.write("\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0269\3\2\2\2\u0268")
        buf.write("\u026a\5n8\2\u0269\u0268\3\2\2\2\u0269\u026a\3\2\2\2\u026a")
        buf.write("\u026c\3\2\2\2\u026b\u026d\5p9\2\u026c\u026b\3\2\2\2\u026c")
        buf.write("\u026d\3\2\2\2\u026d\u026f\3\2\2\2\u026e\u0270\5r:\2\u026f")
        buf.write("\u026e\3\2\2\2\u026f\u0270\3\2\2\2\u0270e\3\2\2\2\u0271")
        buf.write("\u0274\7\u0089\2\2\u0272\u0274\5h\65\2\u0273\u0271\3\2")
        buf.write("\2\2\u0273\u0272\3\2\2\2\u0274\u0279\3\2\2\2\u0275\u0276")
        buf.write("\7\u009e\2\2\u0276\u0278\5h\65\2\u0277\u0275\3\2\2\2\u0278")
        buf.write("\u027b\3\2\2\2\u0279\u0277\3\2\2\2\u0279\u027a\3\2\2\2")
        buf.write("\u027ag\3\2\2\2\u027b\u0279\3\2\2\2\u027c\u027d\5|?\2")
        buf.write("\u027d\u027e\7\u0099\2\2\u027e\u027f\7\u0089\2\2\u027f")
        buf.write("\u029a\3\2\2\2\u0280\u0285\5\u0084C\2\u0281\u0283\7\f")
        buf.write("\2\2\u0282\u0281\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u0284")
        buf.write("\3\2\2\2\u0284\u0286\5\u008cG\2\u0285\u0282\3\2\2\2\u0285")
        buf.write("\u0286\3\2\2\2\u0286\u029a\3\2\2\2\u0287\u028c\5\u00ba")
        buf.write("^\2\u0288\u028a\7\f\2\2\u0289\u0288\3\2\2\2\u0289\u028a")
        buf.write("\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028d\5\u008cG\2\u028c")
        buf.write("\u0289\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u029a\3\2\2\2")
        buf.write("\u028e\u028f\7\u00b0\2\2\u028f\u0291\7\u0080\2\2\u0290")
        buf.write("\u028e\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0292\3\2\2\2")
        buf.write("\u0292\u0297\5\u00c4c\2\u0293\u0295\7\f\2\2\u0294\u0293")
        buf.write("\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u0296\3\2\2\2\u0296")
        buf.write("\u0298\5\u008cG\2\u0297\u0294\3\2\2\2\u0297\u0298\3\2")
        buf.write("\2\2\u0298\u029a\3\2\2\2\u0299\u027c\3\2\2\2\u0299\u0280")
        buf.write("\3\2\2\2\u0299\u0287\3\2\2\2\u0299\u0290\3\2\2\2\u029a")
        buf.write("i\3\2\2\2\u029b\u029c\7\36\2\2\u029c\u029f\5T+\2\u029d")
        buf.write("\u029e\7N\2\2\u029e\u02a0\5\u00c4c\2\u029f\u029d\3\2\2")
        buf.write("\2\u029f\u02a0\3\2\2\2\u02a0\u02ab\3\2\2\2\u02a1\u02a2")
        buf.write("\7\37\2\2\u02a2\u02a3\7\17\2\2\u02a3\u02a8\5l\67\2\u02a4")
        buf.write("\u02a5\7\u009e\2\2\u02a5\u02a7\5l\67\2\u02a6\u02a4\3\2")
        buf.write("\2\2\u02a7\u02aa\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a8\u02a9")
        buf.write("\3\2\2\2\u02a9\u02ac\3\2\2\2\u02aa\u02a8\3\2\2\2\u02ab")
        buf.write("\u02a1\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02af\3\2\2\2")
        buf.write("\u02ad\u02ae\7 \2\2\u02ae\u02b0\5\u00c4c\2\u02af\u02ad")
        buf.write("\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0k\3\2\2\2\u02b1\u02b3")
        buf.write("\5\u00c4c\2\u02b2\u02b4\t\5\2\2\u02b3\u02b2\3\2\2\2\u02b3")
        buf.write("\u02b4\3\2\2\2\u02b4m\3\2\2\2\u02b5\u02c0\7-\2\2\u02b6")
        buf.write("\u02b7\5\u0092J\2\u02b7\u02b8\7\u009e\2\2\u02b8\u02ba")
        buf.write("\3\2\2\2\u02b9\u02b6\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba")
        buf.write("\u02bb\3\2\2\2\u02bb\u02c1\5\u0092J\2\u02bc\u02bd\5\u0092")
        buf.write("J\2\u02bd\u02be\7\62\2\2\u02be\u02bf\5\u0092J\2\u02bf")
        buf.write("\u02c1\3\2\2\2\u02c0\u02b9\3\2\2\2\u02c0\u02bc\3\2\2\2")
        buf.write("\u02c1o\3\2\2\2\u02c2\u02c3\7T\2\2\u02c3\u02c4\7\u00aa")
        buf.write("\2\2\u02c4q\3\2\2\2\u02c5\u02c6\7U\2\2\u02c6\u02c7\7\u00aa")
        buf.write("\2\2\u02c7s\3\2\2\2\u02c8\u02c9\7=\2\2\u02c9u\3\2\2\2")
        buf.write("\u02ca\u02cb\7\27\2\2\u02cb\u02cc\5~@\2\u02ccw\3\2\2\2")
        buf.write("\u02cd\u02ce\7u\2\2\u02ce\u02cf\7\u00a8\2\2\u02cfy\3\2")
        buf.write("\2\2\u02d0\u02d1\7>\2\2\u02d1\u02d2\t\6\2\2\u02d2{\3\2")
        buf.write("\2\2\u02d3\u02d7\5\u008cG\2\u02d4\u02d8\7\u00ac\2\2\u02d5")
        buf.write("\u02d6\7\u0099\2\2\u02d6\u02d8\5\u008cG\2\u02d7\u02d4")
        buf.write("\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8")
        buf.write("}\3\2\2\2\u02d9\u02da\5|?\2\u02da\177\3\2\2\2\u02db\u02dc")
        buf.write("\5|?\2\u02dc\u0081\3\2\2\2\u02dd\u02de\5|?\2\u02de\u0083")
        buf.write("\3\2\2\2\u02df\u02e4\5\u008cG\2\u02e0\u02e2\5\u0090I\2")
        buf.write("\u02e1\u02e3\5\u0090I\2\u02e2\u02e1\3\2\2\2\u02e2\u02e3")
        buf.write("\3\2\2\2\u02e3\u02e5\3\2\2\2\u02e4\u02e0\3\2\2\2\u02e4")
        buf.write("\u02e5\3\2\2\2\u02e5\u0085\3\2\2\2\u02e6\u02eb\5\u008c")
        buf.write("G\2\u02e7\u02e8\7\u009a\2\2\u02e8\u02e9\5\u0092J\2\u02e9")
        buf.write("\u02ea\7\u009b\2\2\u02ea\u02ec\3\2\2\2\u02eb\u02e7\3\2")
        buf.write("\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ee\3\2\2\2\u02ed\u02ef")
        buf.write("\t\5\2\2\u02ee\u02ed\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef")
        buf.write("\u0087\3\2\2\2\u02f0\u02f1\t\7\2\2\u02f1\u0089\3\2\2\2")
        buf.write("\u02f2\u02f3\5\u0092J\2\u02f3\u02f4\7\u008e\2\2\u02f4")
        buf.write("\u02f5\5\u0092J\2\u02f5\u02f6\7\u008e\2\2\u02f6\u02f7")
        buf.write("\5\u0092J\2\u02f7\u02f8\7\u008e\2\2\u02f8\u02f9\5\u0092")
        buf.write("J\2\u02f9\u02fa\7\u008e\2\2\u02fa\u0300\5\u0092J\2\u02fb")
        buf.write("\u02fc\7\u00a7\2\2\u02fc\u02fd\5\u0092J\2\u02fd\u02fe")
        buf.write("\7\u008e\2\2\u02fe\u02ff\5\u0092J\2\u02ff\u0301\3\2\2")
        buf.write("\2\u0300\u02fb\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0300")
        buf.write("\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u008b\3\2\2\2\u0304")
        buf.write("\u0307\5\u008eH\2\u0305\u0307\7\u00ae\2\2\u0306\u0304")
        buf.write("\3\2\2\2\u0306\u0305\3\2\2\2\u0307\u008d\3\2\2\2\u0308")
        buf.write("\u0309\7\u00ad\2\2\u0309\u008f\3\2\2\2\u030a\u030e\7\u00ac")
        buf.write("\2\2\u030b\u030c\7\u0099\2\2\u030c\u030e\5\u008cG\2\u030d")
        buf.write("\u030a\3\2\2\2\u030d\u030b\3\2\2\2\u030e\u0091\3\2\2\2")
        buf.write("\u030f\u0310\t\b\2\2\u0310\u0093\3\2\2\2\u0311\u0312\7")
        buf.write("\u00a8\2\2\u0312\u0095\3\2\2\2\u0313\u0314\t\t\2\2\u0314")
        buf.write("\u0097\3\2\2\2\u0315\u0317\7\60\2\2\u0316\u0315\3\2\2")
        buf.write("\2\u0316\u0317\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0319")
        buf.write("\t\n\2\2\u0319\u0099\3\2\2\2\u031a\u031b\7\u009c\2\2\u031b")
        buf.write("\u0320\5\u009cO\2\u031c\u031d\7\u009e\2\2\u031d\u031f")
        buf.write("\5\u009cO\2\u031e\u031c\3\2\2\2\u031f\u0322\3\2\2\2\u0320")
        buf.write("\u031e\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0323\3\2\2\2")
        buf.write("\u0322\u0320\3\2\2\2\u0323\u0324\7\u009d\2\2\u0324\u0328")
        buf.write("\3\2\2\2\u0325\u0326\7\u009c\2\2\u0326\u0328\7\u009d\2")
        buf.write("\2\u0327\u031a\3\2\2\2\u0327\u0325\3\2\2\2\u0328\u009b")
        buf.write("\3\2\2\2\u0329\u0335\5\u0094K\2\u032a\u0335\5\u0092J\2")
        buf.write("\u032b\u032c\7\u008e\2\2\u032c\u0335\5\u0092J\2\u032d")
        buf.write("\u0335\5\u0096L\2\u032e\u0335\7\u00aa\2\2\u032f\u0331")
        buf.write("\7\60\2\2\u0330\u032f\3\2\2\2\u0330\u0331\3\2\2\2\u0331")
        buf.write("\u0332\3\2\2\2\u0332\u0335\t\n\2\2\u0333\u0335\5\u009a")
        buf.write("N\2\u0334\u0329\3\2\2\2\u0334\u032a\3\2\2\2\u0334\u032b")
        buf.write("\3\2\2\2\u0334\u032d\3\2\2\2\u0334\u032e\3\2\2\2\u0334")
        buf.write("\u0330\3\2\2\2\u0334\u0333\3\2\2\2\u0335\u009d\3\2\2\2")
        buf.write("\u0336\u0337\t\13\2\2\u0337\u009f\3\2\2\2\u0338\u0351")
        buf.write("\7Z\2\2\u0339\u033b\7]\2\2\u033a\u033c\5\u00a2R\2\u033b")
        buf.write("\u033a\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u0351\3\2\2\2")
        buf.write("\u033d\u033f\7[\2\2\u033e\u0340\7I\2\2\u033f\u033e\3\2")
        buf.write("\2\2\u033f\u0340\3\2\2\2\u0340\u0351\3\2\2\2\u0341\u0343")
        buf.write("\7\\\2\2\u0342\u0344\5\u00a4S\2\u0343\u0342\3\2\2\2\u0343")
        buf.write("\u0344\3\2\2\2\u0344\u0346\3\2\2\2\u0345\u0347\7I\2\2")
        buf.write("\u0346\u0345\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0351\3")
        buf.write("\2\2\2\u0348\u034a\7^\2\2\u0349\u034b\5\u009eP\2\u034a")
        buf.write("\u0349\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034d\3\2\2\2")
        buf.write("\u034c\u034e\5\u00a6T\2\u034d\u034c\3\2\2\2\u034d\u034e")
        buf.write("\3\2\2\2\u034e\u0351\3\2\2\2\u034f\u0351\7k\2\2\u0350")
        buf.write("\u0338\3\2\2\2\u0350\u0339\3\2\2\2\u0350\u033d\3\2\2\2")
        buf.write("\u0350\u0341\3\2\2\2\u0350\u0348\3\2\2\2\u0350\u034f\3")
        buf.write("\2\2\2\u0351\u00a1\3\2\2\2\u0352\u0353\7\u009a\2\2\u0353")
        buf.write("\u0354\5\u0092J\2\u0354\u0355\7\u009b\2\2\u0355\u00a3")
        buf.write("\3\2\2\2\u0356\u0357\7\u009a\2\2\u0357\u0358\5\u0092J")
        buf.write("\2\u0358\u0359\7\u009e\2\2\u0359\u035a\5\u0092J\2\u035a")
        buf.write("\u035b\7\u009b\2\2\u035b\u00a5\3\2\2\2\u035c\u0362\7\u009a")
        buf.write("\2\2\u035d\u035e\5\u0092J\2\u035e\u035f\7\u009e\2\2\u035f")
        buf.write("\u0361\3\2\2\2\u0360\u035d\3\2\2\2\u0361\u0364\3\2\2\2")
        buf.write("\u0362\u0360\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0365\3")
        buf.write("\2\2\2\u0364\u0362\3\2\2\2\u0365\u0366\5\u0092J\2\u0366")
        buf.write("\u0367\7\u009b\2\2\u0367\u00a7\3\2\2\2\u0368\u036d\5\u008c")
        buf.write("G\2\u0369\u036a\7\u009e\2\2\u036a\u036c\5\u008cG\2\u036b")
        buf.write("\u0369\3\2\2\2\u036c\u036f\3\2\2\2\u036d\u036b\3\2\2\2")
        buf.write("\u036d\u036e\3\2\2\2\u036e\u00a9\3\2\2\2\u036f\u036d\3")
        buf.write("\2\2\2\u0370\u0375\5~@\2\u0371\u0372\7\u009e\2\2\u0372")
        buf.write("\u0374\5~@\2\u0373\u0371\3\2\2\2\u0374\u0377\3\2\2\2\u0375")
        buf.write("\u0373\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u00ab\3\2\2\2")
        buf.write("\u0377\u0375\3\2\2\2\u0378\u0379\7\u009a\2\2\u0379\u037e")
        buf.write("\5\u0086D\2\u037a\u037b\7\u009e\2\2\u037b\u037d\5\u0086")
        buf.write("D\2\u037c\u037a\3\2\2\2\u037d\u0380\3\2\2\2\u037e\u037c")
        buf.write("\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381\3\2\2\2\u0380")
        buf.write("\u037e\3\2\2\2\u0381\u0382\7\u009b\2\2\u0382\u00ad\3\2")
        buf.write("\2\2\u0383\u0388\5\u00c4c\2\u0384\u0385\7\u009e\2\2\u0385")
        buf.write("\u0387\5\u00c4c\2\u0386\u0384\3\2\2\2\u0387\u038a\3\2")
        buf.write("\2\2\u0388\u0386\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u00af")
        buf.write("\3\2\2\2\u038a\u0388\3\2\2\2\u038b\u0390\5\u00b4[\2\u038c")
        buf.write("\u038d\7\u009e\2\2\u038d\u038f\5\u00b4[\2\u038e\u038c")
        buf.write("\3\2\2\2\u038f\u0392\3\2\2\2\u0390\u038e\3\2\2\2\u0390")
        buf.write("\u0391\3\2\2\2\u0391\u00b1\3\2\2\2\u0392\u0390\3\2\2\2")
        buf.write("\u0393\u0396\7\61\2\2\u0394\u0396\5\u009cO\2\u0395\u0393")
        buf.write("\3\2\2\2\u0395\u0394\3\2\2\2\u0396\u00b3\3\2\2\2\u0397")
        buf.write("\u039a\5\u00c4c\2\u0398\u039a\7\24\2\2\u0399\u0397\3\2")
        buf.write("\2\2\u0399\u0398\3\2\2\2\u039a\u00b5\3\2\2\2\u039b\u039c")
        buf.write("\7!\2\2\u039c\u039d\7\33\2\2\u039d\u00b7\3\2\2\2\u039e")
        buf.write("\u039f\7!\2\2\u039f\u03a0\7\60\2\2\u03a0\u03a1\7\33\2")
        buf.write("\2\u03a1\u00b9\3\2\2\2\u03a2\u03a5\5\u00bc_\2\u03a3\u03a5")
        buf.write("\5\u00be`\2\u03a4\u03a2\3\2\2\2\u03a4\u03a3\3\2\2\2\u03a5")
        buf.write("\u00bb\3\2\2\2\u03a6\u03a7\5\u008eH\2\u03a7\u03a8\7\u009a")
        buf.write("\2\2\u03a8\u03a9\5\u00c0a\2\u03a9\u03ab\7\u009b\2\2\u03aa")
        buf.write("\u03ac\5\u0090I\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2")
        buf.write("\2\2\u03ac\u00bd\3\2\2\2\u03ad\u03ae\t\f\2\2\u03ae\u03b0")
        buf.write("\7\u009a\2\2\u03af\u03b1\t\r\2\2\u03b0\u03af\3\2\2\2\u03b0")
        buf.write("\u03b1\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b3\5\u00c2")
        buf.write("b\2\u03b3\u03b4\7\u009b\2\2\u03b4\u03c0\3\2\2\2\u03b5")
        buf.write("\u03b6\7m\2\2\u03b6\u03bc\7\u009a\2\2\u03b7\u03bd\7\u0089")
        buf.write("\2\2\u03b8\u03ba\7\7\2\2\u03b9\u03b8\3\2\2\2\u03b9\u03ba")
        buf.write("\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03bd\5\u00c2b\2\u03bc")
        buf.write("\u03b7\3\2\2\2\u03bc\u03b9\3\2\2\2\u03bd\u03be\3\2\2\2")
        buf.write("\u03be\u03c0\7\u009b\2\2\u03bf\u03ad\3\2\2\2\u03bf\u03b5")
        buf.write("\3\2\2\2\u03c0\u00bf\3\2\2\2\u03c1\u03c6\5\u009cO\2\u03c2")
        buf.write("\u03c6\5\u0084C\2\u03c3\u03c6\5\u00ba^\2\u03c4\u03c6\5")
        buf.write("\u00c4c\2\u03c5\u03c1\3\2\2\2\u03c5\u03c2\3\2\2\2\u03c5")
        buf.write("\u03c3\3\2\2\2\u03c5\u03c4\3\2\2\2\u03c6\u03d0\3\2\2\2")
        buf.write("\u03c7\u03cc\7\u009e\2\2\u03c8\u03cd\5\u009cO\2\u03c9")
        buf.write("\u03cd\5\u0084C\2\u03ca\u03cd\5\u00ba^\2\u03cb\u03cd\5")
        buf.write("\u00c4c\2\u03cc\u03c8\3\2\2\2\u03cc\u03c9\3\2\2\2\u03cc")
        buf.write("\u03ca\3\2\2\2\u03cc\u03cb\3\2\2\2\u03cd\u03cf\3\2\2\2")
        buf.write("\u03ce\u03c7\3\2\2\2\u03cf\u03d2\3\2\2\2\u03d0\u03ce\3")
        buf.write("\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u00c1\3\2\2\2\u03d2\u03d0")
        buf.write("\3\2\2\2\u03d3\u03d8\5\u009cO\2\u03d4\u03d8\5\u0084C\2")
        buf.write("\u03d5\u03d8\5\u00ba^\2\u03d6\u03d8\5\u00c4c\2\u03d7\u03d3")
        buf.write("\3\2\2\2\u03d7\u03d4\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d7")
        buf.write("\u03d6\3\2\2\2\u03d8\u00c3\3\2\2\2\u03d9\u03da\bc\1\2")
        buf.write("\u03da\u03db\t\16\2\2\u03db\u03e5\5\u00c4c\6\u03dc\u03dd")
        buf.write("\5\u00c6d\2\u03dd\u03df\7(\2\2\u03de\u03e0\7\60\2\2\u03df")
        buf.write("\u03de\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e1\3\2\2\2")
        buf.write("\u03e1\u03e2\t\17\2\2\u03e2\u03e5\3\2\2\2\u03e3\u03e5")
        buf.write("\5\u00c6d\2\u03e4\u03d9\3\2\2\2\u03e4\u03dc\3\2\2\2\u03e4")
        buf.write("\u03e3\3\2\2\2\u03e5\u03ec\3\2\2\2\u03e6\u03e7\f\5\2\2")
        buf.write("\u03e7\u03e8\5\u00ceh\2\u03e8\u03e9\5\u00c4c\6\u03e9\u03eb")
        buf.write("\3\2\2\2\u03ea\u03e6\3\2\2\2\u03eb\u03ee\3\2\2\2\u03ec")
        buf.write("\u03ea\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u00c5\3\2\2\2")
        buf.write("\u03ee\u03ec\3\2\2\2\u03ef\u03f2\bd\1\2\u03f0\u03f1\7")
        buf.write("\u00b0\2\2\u03f1\u03f3\7\u0080\2\2\u03f2\u03f0\3\2\2\2")
        buf.write("\u03f2\u03f3\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f5\5")
        buf.write("\u00c8e\2\u03f5\u041b\3\2\2\2\u03f6\u03f7\f\6\2\2\u03f7")
        buf.write("\u03f8\5\u00ccg\2\u03f8\u03f9\5\u00c6d\7\u03f9\u041a\3")
        buf.write("\2\2\2\u03fa\u03fc\f\b\2\2\u03fb\u03fd\7\60\2\2\u03fc")
        buf.write("\u03fb\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03fe\3\2\2\2")
        buf.write("\u03fe\u03ff\7\"\2\2\u03ff\u0402\7\u009a\2\2\u0400\u0403")
        buf.write("\5:\36\2\u0401\u0403\5\u00aeX\2\u0402\u0400\3\2\2\2\u0402")
        buf.write("\u0401\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0405\7\u009b")
        buf.write("\2\2\u0405\u041a\3\2\2\2\u0406\u0407\f\7\2\2\u0407\u0408")
        buf.write("\7(\2\2\u0408\u041a\5\u0098M\2\u0409\u040a\f\5\2\2\u040a")
        buf.write("\u040b\5\u00ccg\2\u040b\u040c\t\20\2\2\u040c\u040d\7\u009a")
        buf.write("\2\2\u040d\u040e\5:\36\2\u040e\u040f\7\u009b\2\2\u040f")
        buf.write("\u041a\3\2\2\2\u0410\u0412\f\4\2\2\u0411\u0413\7\60\2")
        buf.write("\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0414")
        buf.write("\3\2\2\2\u0414\u0415\7,\2\2\u0415\u0417\5\u00c6d\2\u0416")
        buf.write("\u0418\7\u00a8\2\2\u0417\u0416\3\2\2\2\u0417\u0418\3\2")
        buf.write("\2\2\u0418\u041a\3\2\2\2\u0419\u03f6\3\2\2\2\u0419\u03fa")
        buf.write("\3\2\2\2\u0419\u0406\3\2\2\2\u0419\u0409\3\2\2\2\u0419")
        buf.write("\u0410\3\2\2\2\u041a\u041d\3\2\2\2\u041b\u0419\3\2\2\2")
        buf.write("\u041b\u041c\3\2\2\2\u041c\u00c7\3\2\2\2\u041d\u041b\3")
        buf.write("\2\2\2\u041e\u041f\be\1\2\u041f\u0435\5\u009cO\2\u0420")
        buf.write("\u0435\5\u0084C\2\u0421\u0435\5\u00ba^\2\u0422\u0423\5")
        buf.write("\u00caf\2\u0423\u0424\5\u00c8e\7\u0424\u0435\3\2\2\2\u0425")
        buf.write("\u0426\7\u009a\2\2\u0426\u042b\5\u00c4c\2\u0427\u0428")
        buf.write("\7\u009e\2\2\u0428\u042a\5\u00c4c\2\u0429\u0427\3\2\2")
        buf.write("\2\u042a\u042d\3\2\2\2\u042b\u0429\3\2\2\2\u042b\u042c")
        buf.write("\3\2\2\2\u042c\u042e\3\2\2\2\u042d\u042b\3\2\2\2\u042e")
        buf.write("\u042f\7\u009b\2\2\u042f\u0435\3\2\2\2\u0430\u0431\7\u009a")
        buf.write("\2\2\u0431\u0432\5:\36\2\u0432\u0433\7\u009b\2\2\u0433")
        buf.write("\u0435\3\2\2\2\u0434\u041e\3\2\2\2\u0434\u0420\3\2\2\2")
        buf.write("\u0434\u0421\3\2\2\2\u0434\u0422\3\2\2\2\u0434\u0425\3")
        buf.write("\2\2\2\u0434\u0430\3\2\2\2\u0435\u0440\3\2\2\2\u0436\u0437")
        buf.write("\f\4\2\2\u0437\u0438\5\u00d0i\2\u0438\u0439\5\u00c8e\5")
        buf.write("\u0439\u043f\3\2\2\2\u043a\u043b\f\3\2\2\u043b\u043c\5")
        buf.write("\u00d2j\2\u043c\u043d\5\u00c8e\4\u043d\u043f\3\2\2\2\u043e")
        buf.write("\u0436\3\2\2\2\u043e\u043a\3\2\2\2\u043f\u0442\3\2\2\2")
        buf.write("\u0440\u043e\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u00c9\3")
        buf.write("\2\2\2\u0442\u0440\3\2\2\2\u0443\u0444\t\21\2\2\u0444")
        buf.write("\u00cb\3\2\2\2\u0445\u0458\7\u0091\2\2\u0446\u0458\7\u0092")
        buf.write("\2\2\u0447\u0458\7\u0093\2\2\u0448\u0449\7\u0093\2\2\u0449")
        buf.write("\u0458\7\u0091\2\2\u044a\u044b\7\u0092\2\2\u044b\u0458")
        buf.write("\7\u0091\2\2\u044c\u044d\7\u0093\2\2\u044d\u0458\7\u0092")
        buf.write("\2\2\u044e\u044f\7\u0094\2\2\u044f\u0458\7\u0091\2\2\u0450")
        buf.write("\u0451\7\u0093\2\2\u0451\u0452\7\u0091\2\2\u0452\u0458")
        buf.write("\7\u0092\2\2\u0453\u0454\7\u00a0\2\2\u0454\u0458\7\u0092")
        buf.write("\2\2\u0455\u0456\7\u0093\2\2\u0456\u0458\7\u00a0\2\2\u0457")
        buf.write("\u0445\3\2\2\2\u0457\u0446\3\2\2\2\u0457\u0447\3\2\2\2")
        buf.write("\u0457\u0448\3\2\2\2\u0457\u044a\3\2\2\2\u0457\u044c\3")
        buf.write("\2\2\2\u0457\u044e\3\2\2\2\u0457\u0450\3\2\2\2\u0457\u0453")
        buf.write("\3\2\2\2\u0457\u0455\3\2\2\2\u0458\u00cd\3\2\2\2\u0459")
        buf.write("\u0461\7\t\2\2\u045a\u045b\7\u0097\2\2\u045b\u0461\7\u0097")
        buf.write("\2\2\u045c\u0461\7O\2\2\u045d\u0461\7\64\2\2\u045e\u045f")
        buf.write("\7\u0096\2\2\u045f\u0461\7\u0096\2\2\u0460\u0459\3\2\2")
        buf.write("\2\u0460\u045a\3\2\2\2\u0460\u045c\3\2\2\2\u0460\u045d")
        buf.write("\3\2\2\2\u0460\u045e\3\2\2\2\u0461\u00cf\3\2\2\2\u0462")
        buf.write("\u0463\7\u0093\2\2\u0463\u046a\7\u0093\2\2\u0464\u0465")
        buf.write("\7\u0092\2\2\u0465\u046a\7\u0092\2\2\u0466\u046a\7\u0097")
        buf.write("\2\2\u0467\u046a\7\u0098\2\2\u0468\u046a\7\u0096\2\2\u0469")
        buf.write("\u0462\3\2\2\2\u0469\u0464\3\2\2\2\u0469\u0466\3\2\2\2")
        buf.write("\u0469\u0467\3\2\2\2\u0469\u0468\3\2\2\2\u046a\u00d1\3")
        buf.write("\2\2\2\u046b\u046c\t\22\2\2\u046c\u00d3\3\2\2\2\u0086")
        buf.write("\u00d5\u00d8\u00de\u00e3\u00e5\u00ea\u00ed\u00f0\u00f5")
        buf.write("\u0103\u010b\u0110\u0115\u011d\u0126\u0134\u0144\u015d")
        buf.write("\u0166\u016c\u0173\u0178\u017a\u017e\u0181\u0188\u0195")
        buf.write("\u019c\u01a4\u01ab\u01b5\u01ba\u01c9\u01cd\u01e8\u01eb")
        buf.write("\u01f1\u01f8\u01fb\u01ff\u0204\u0207\u020f\u0214\u0217")
        buf.write("\u021a\u0223\u0228\u0230\u0235\u0238\u023b\u0241\u0248")
        buf.write("\u0256\u0260\u0266\u0269\u026c\u026f\u0273\u0279\u0282")
        buf.write("\u0285\u0289\u028c\u0290\u0294\u0297\u0299\u029f\u02a8")
        buf.write("\u02ab\u02af\u02b3\u02b9\u02c0\u02d7\u02e2\u02e4\u02eb")
        buf.write("\u02ee\u0302\u0306\u030d\u0316\u0320\u0327\u0330\u0334")
        buf.write("\u033b\u033f\u0343\u0346\u034a\u034d\u0350\u0362\u036d")
        buf.write("\u0375\u037e\u0388\u0390\u0395\u0399\u03a4\u03ab\u03b0")
        buf.write("\u03b9\u03bc\u03bf\u03c5\u03cc\u03d0\u03d7\u03df\u03e4")
        buf.write("\u03ec\u03f2\u03fc\u0402\u0412\u0417\u0419\u041b\u042b")
        buf.write("\u0434\u043e\u0440\u0457\u0460\u0469")
        return buf.getvalue()


class evaql_parser ( Parser ):

    grammarFileName = "evaql_parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ALL'", "'ALTER'", "'AND'", "'ANY'", 
                     "'ANYDIM'", "'AS'", "'ASC'", "'BLOB'", "'BY'", "'COLUMN'", 
                     "'CREATE'", "'DATA'", "'DATABASE'", "'DEFAULT'", "'DELETE'", 
                     "'DESC'", "'DESCRIBE'", "'DISTINCT'", "'DROP'", "'EXIT'", 
                     "'EXISTS'", "'EXPLAIN'", "'FALSE'", "'FROM'", "'GROUP'", 
                     "'HAVING'", "'IF'", "'IN'", "'INFILE'", "'INDIR'", 
                     "'INTO'", "'INDEX'", "'INSERT'", "'IS'", "'JOIN'", 
                     "'KEY'", "'LATERAL'", "'LIKE'", "'LIMIT'", "'LOAD'", 
                     "'NO'", "'NOT'", "'NULL'", "'OFFSET'", "'ON'", "'OR'", 
                     "'ORDER'", "'PATH'", "'PRIMARY'", "'REFERENCES'", "'RENAME'", 
                     "'SAMPLE'", "'SELECT'", "'SET'", "'SHUTDOWN'", "'SHOW'", 
                     "'SOME'", "'TABLE'", "'TABLES'", "'TO'", "'TRUE'", 
                     "'UDFS'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNLOCK'", 
                     "'UNSIGNED'", "'UPDATE'", "'UPLOAD'", "'USING'", "'VALUES'", 
                     "'WHERE'", "'XOR'", "'WITH'", "'FORMAT'", "'CSV'", 
                     "'VIDEO'", "'ERROR_WITHIN'", "'AT_CONFIDENCE'", "'BTREE'", 
                     "'HASH'", "'OBJECT_DETECTION'", "'ACTION_CLASSICATION'", 
                     "'BOOLEAN'", "'INTEGER'", "'FLOAT'", "'TEXT'", "'NDARRAY'", 
                     "'INT8'", "'UINT8'", "'INT16'", "'INT32'", "'INT64'", 
                     "'UNICODE'", "'BOOL'", "'FLOAT32'", "'FLOAT64'", "'DECIMAL'", 
                     "'STR'", "'DATETIME'", "'ANYTYPE'", "'AVG'", "'COUNT'", 
                     "'MAX'", "'MIN'", "'STD'", "'SUM'", "'FCOUNT'", "'AUTO_INCREMENT'", 
                     "'COLUMNS'", "'HELP'", "'TEMPTABLE'", "'VALUE'", "'UDF'", 
                     "'INPUT'", "'OUTPUT'", "'TYPE'", "'IMPL'", "'MATERIALIZED'", 
                     "'VIEW'", "'ABS'", "':='", "'+='", "'-='", "'*='", 
                     "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
                     "'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", "'='", 
                     "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", 
                     "'('", "')'", "'['", "']'", "','", "';'", "'@'", "'0'", 
                     "'1'", "'2'", "'''", "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "SPEC_EVAQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "ALL", "ALTER", "AND", "ANY", "ANYDIM", 
                      "AS", "ASC", "BLOB", "BY", "COLUMN", "CREATE", "DATA", 
                      "DATABASE", "DEFAULT", "DELETE", "DESC", "DESCRIBE", 
                      "DISTINCT", "DROP", "EXIT", "EXISTS", "EXPLAIN", "FALSE", 
                      "FROM", "GROUP", "HAVING", "IF", "IN", "INFILE", "INDIR", 
                      "INTO", "INDEX", "INSERT", "IS", "JOIN", "KEY", "LATERAL", 
                      "LIKE", "LIMIT", "LOAD", "NO", "NOT", "NULL_LITERAL", 
                      "OFFSET", "ON", "OR", "ORDER", "PATH", "PRIMARY", 
                      "REFERENCES", "RENAME", "SAMPLE", "SELECT", "SET", 
                      "SHUTDOWN", "SHOW", "SOME", "TABLE", "TABLES", "TO", 
                      "TRUE", "UDFS", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", 
                      "UNSIGNED", "UPDATE", "UPLOAD", "USING", "VALUES", 
                      "WHERE", "XOR", "WITH", "FORMAT", "CSV", "VIDEO", 
                      "ERROR_BOUNDS", "CONFIDENCE_LEVEL", "BTREE", "HASH", 
                      "OBJECT_DETECTION", "ACTION_CLASSICATION", "BOOLEAN", 
                      "INTEGER", "FLOAT", "TEXT", "NDARRAY", "INT8", "UINT8", 
                      "INT16", "INT32", "INT64", "UNICODE", "BOOL", "FLOAT32", 
                      "FLOAT64", "DECIMAL", "STR", "DATETIME", "ANYTYPE", 
                      "AVG", "COUNT", "MAX", "MIN", "STD", "SUM", "FCOUNT", 
                      "AUTO_INCREMENT", "COLUMNS", "HELP", "TEMPTABLE", 
                      "VALUE", "UDF", "INPUT", "OUTPUT", "TYPE", "IMPL", 
                      "MATERIALIZED", "VIEW", "ABS", "VAR_ASSIGN", "PLUS_ASSIGN", 
                      "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", 
                      "MODULE", "PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", 
                      "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
                      "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
                      "DOT", "LR_BRACKET", "RR_BRACKET", "LR_SQ_BRACKET", 
                      "RR_SQ_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
                      "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", 
                      "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", 
                      "STRING_LITERAL", "DECIMAL_LITERAL", "REAL_LITERAL", 
                      "NULL_SPEC_LITERAL", "DOT_ID", "ID", "REVERSE_QUOTE_ID", 
                      "STRING_USER_NAME", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION" ]

    RULE_root = 0
    RULE_sqlStatements = 1
    RULE_sqlStatement = 2
    RULE_emptyStatement = 3
    RULE_ddlStatement = 4
    RULE_dmlStatement = 5
    RULE_utilityStatement = 6
    RULE_createDatabase = 7
    RULE_createIndex = 8
    RULE_createTable = 9
    RULE_renameTable = 10
    RULE_createUdf = 11
    RULE_createMaterializedView = 12
    RULE_udfName = 13
    RULE_udfType = 14
    RULE_udfImpl = 15
    RULE_indexType = 16
    RULE_createDefinitions = 17
    RULE_createDefinition = 18
    RULE_columnDefinition = 19
    RULE_columnConstraint = 20
    RULE_indexColumnDefinition = 21
    RULE_dropDatabase = 22
    RULE_dropIndex = 23
    RULE_dropTable = 24
    RULE_dropUdf = 25
    RULE_deleteStatement = 26
    RULE_insertStatement = 27
    RULE_selectStatement = 28
    RULE_updateStatement = 29
    RULE_loadStatement = 30
    RULE_fileOptions = 31
    RULE_uploadStatement = 32
    RULE_fileName = 33
    RULE_videoBlob = 34
    RULE_insertStatementValue = 35
    RULE_updatedElement = 36
    RULE_singleDeleteStatement = 37
    RULE_singleUpdateStatement = 38
    RULE_orderByClause = 39
    RULE_orderByExpression = 40
    RULE_tableSources = 41
    RULE_tableSource = 42
    RULE_tableSourceItemWithSample = 43
    RULE_tableSourceItem = 44
    RULE_subqueryTableSourceItem = 45
    RULE_sampleClause = 46
    RULE_joinPart = 47
    RULE_queryExpression = 48
    RULE_querySpecification = 49
    RULE_selectElements = 50
    RULE_selectElement = 51
    RULE_fromClause = 52
    RULE_groupByItem = 53
    RULE_limitClause = 54
    RULE_errorBoundsExpression = 55
    RULE_confidenceLevelExpression = 56
    RULE_shutdownStatement = 57
    RULE_simpleDescribeStatement = 58
    RULE_helpStatement = 59
    RULE_showStatement = 60
    RULE_fullId = 61
    RULE_tableName = 62
    RULE_oldtableName = 63
    RULE_newtableName = 64
    RULE_fullColumnName = 65
    RULE_indexColumnName = 66
    RULE_userName = 67
    RULE_uuidSet = 68
    RULE_uid = 69
    RULE_simpleId = 70
    RULE_dottedId = 71
    RULE_decimalLiteral = 72
    RULE_stringLiteral = 73
    RULE_booleanLiteral = 74
    RULE_nullNotnull = 75
    RULE_arrayLiteral = 76
    RULE_constant = 77
    RULE_arrayType = 78
    RULE_dataType = 79
    RULE_lengthOneDimension = 80
    RULE_lengthTwoDimension = 81
    RULE_lengthDimensionList = 82
    RULE_uidList = 83
    RULE_tables = 84
    RULE_indexColumnNames = 85
    RULE_expressions = 86
    RULE_expressionsWithDefaults = 87
    RULE_defaultValue = 88
    RULE_expressionOrDefault = 89
    RULE_ifExists = 90
    RULE_ifNotExists = 91
    RULE_functionCall = 92
    RULE_udfFunction = 93
    RULE_aggregateWindowedFunction = 94
    RULE_functionArgs = 95
    RULE_functionArg = 96
    RULE_expression = 97
    RULE_predicate = 98
    RULE_expressionAtom = 99
    RULE_unaryOperator = 100
    RULE_comparisonOperator = 101
    RULE_logicalOperator = 102
    RULE_bitOperator = 103
    RULE_mathOperator = 104

    ruleNames =  [ "root", "sqlStatements", "sqlStatement", "emptyStatement", 
                   "ddlStatement", "dmlStatement", "utilityStatement", "createDatabase", 
                   "createIndex", "createTable", "renameTable", "createUdf", 
                   "createMaterializedView", "udfName", "udfType", "udfImpl", 
                   "indexType", "createDefinitions", "createDefinition", 
                   "columnDefinition", "columnConstraint", "indexColumnDefinition", 
                   "dropDatabase", "dropIndex", "dropTable", "dropUdf", 
                   "deleteStatement", "insertStatement", "selectStatement", 
                   "updateStatement", "loadStatement", "fileOptions", "uploadStatement", 
                   "fileName", "videoBlob", "insertStatementValue", "updatedElement", 
                   "singleDeleteStatement", "singleUpdateStatement", "orderByClause", 
                   "orderByExpression", "tableSources", "tableSource", "tableSourceItemWithSample", 
                   "tableSourceItem", "subqueryTableSourceItem", "sampleClause", 
                   "joinPart", "queryExpression", "querySpecification", 
                   "selectElements", "selectElement", "fromClause", "groupByItem", 
                   "limitClause", "errorBoundsExpression", "confidenceLevelExpression", 
                   "shutdownStatement", "simpleDescribeStatement", "helpStatement", 
                   "showStatement", "fullId", "tableName", "oldtableName", 
                   "newtableName", "fullColumnName", "indexColumnName", 
                   "userName", "uuidSet", "uid", "simpleId", "dottedId", 
                   "decimalLiteral", "stringLiteral", "booleanLiteral", 
                   "nullNotnull", "arrayLiteral", "constant", "arrayType", 
                   "dataType", "lengthOneDimension", "lengthTwoDimension", 
                   "lengthDimensionList", "uidList", "tables", "indexColumnNames", 
                   "expressions", "expressionsWithDefaults", "defaultValue", 
                   "expressionOrDefault", "ifExists", "ifNotExists", "functionCall", 
                   "udfFunction", "aggregateWindowedFunction", "functionArgs", 
                   "functionArg", "expression", "predicate", "expressionAtom", 
                   "unaryOperator", "comparisonOperator", "logicalOperator", 
                   "bitOperator", "mathOperator" ]

    EOF = Token.EOF
    SPACE=1
    SPEC_EVAQL_COMMENT=2
    COMMENT_INPUT=3
    LINE_COMMENT=4
    ALL=5
    ALTER=6
    AND=7
    ANY=8
    ANYDIM=9
    AS=10
    ASC=11
    BLOB=12
    BY=13
    COLUMN=14
    CREATE=15
    DATA=16
    DATABASE=17
    DEFAULT=18
    DELETE=19
    DESC=20
    DESCRIBE=21
    DISTINCT=22
    DROP=23
    EXIT=24
    EXISTS=25
    EXPLAIN=26
    FALSE=27
    FROM=28
    GROUP=29
    HAVING=30
    IF=31
    IN=32
    INFILE=33
    INDIR=34
    INTO=35
    INDEX=36
    INSERT=37
    IS=38
    JOIN=39
    KEY=40
    LATERAL=41
    LIKE=42
    LIMIT=43
    LOAD=44
    NO=45
    NOT=46
    NULL_LITERAL=47
    OFFSET=48
    ON=49
    OR=50
    ORDER=51
    PATH=52
    PRIMARY=53
    REFERENCES=54
    RENAME=55
    SAMPLE=56
    SELECT=57
    SET=58
    SHUTDOWN=59
    SHOW=60
    SOME=61
    TABLE=62
    TABLES=63
    TO=64
    TRUE=65
    UDFS=66
    UNION=67
    UNIQUE=68
    UNKNOWN=69
    UNLOCK=70
    UNSIGNED=71
    UPDATE=72
    UPLOAD=73
    USING=74
    VALUES=75
    WHERE=76
    XOR=77
    WITH=78
    FORMAT=79
    CSV=80
    VIDEO=81
    ERROR_BOUNDS=82
    CONFIDENCE_LEVEL=83
    BTREE=84
    HASH=85
    OBJECT_DETECTION=86
    ACTION_CLASSICATION=87
    BOOLEAN=88
    INTEGER=89
    FLOAT=90
    TEXT=91
    NDARRAY=92
    INT8=93
    UINT8=94
    INT16=95
    INT32=96
    INT64=97
    UNICODE=98
    BOOL=99
    FLOAT32=100
    FLOAT64=101
    DECIMAL=102
    STR=103
    DATETIME=104
    ANYTYPE=105
    AVG=106
    COUNT=107
    MAX=108
    MIN=109
    STD=110
    SUM=111
    FCOUNT=112
    AUTO_INCREMENT=113
    COLUMNS=114
    HELP=115
    TEMPTABLE=116
    VALUE=117
    UDF=118
    INPUT=119
    OUTPUT=120
    TYPE=121
    IMPL=122
    MATERIALIZED=123
    VIEW=124
    ABS=125
    VAR_ASSIGN=126
    PLUS_ASSIGN=127
    MINUS_ASSIGN=128
    MULT_ASSIGN=129
    DIV_ASSIGN=130
    MOD_ASSIGN=131
    AND_ASSIGN=132
    XOR_ASSIGN=133
    OR_ASSIGN=134
    STAR=135
    DIVIDE=136
    MODULE=137
    PLUS=138
    MINUSMINUS=139
    MINUS=140
    DIV=141
    MOD=142
    EQUAL_SYMBOL=143
    GREATER_SYMBOL=144
    LESS_SYMBOL=145
    EXCLAMATION_SYMBOL=146
    BIT_NOT_OP=147
    BIT_OR_OP=148
    BIT_AND_OP=149
    BIT_XOR_OP=150
    DOT=151
    LR_BRACKET=152
    RR_BRACKET=153
    LR_SQ_BRACKET=154
    RR_SQ_BRACKET=155
    COMMA=156
    SEMI=157
    AT_SIGN=158
    ZERO_DECIMAL=159
    ONE_DECIMAL=160
    TWO_DECIMAL=161
    SINGLE_QUOTE_SYMB=162
    DOUBLE_QUOTE_SYMB=163
    REVERSE_QUOTE_SYMB=164
    COLON_SYMB=165
    STRING_LITERAL=166
    DECIMAL_LITERAL=167
    REAL_LITERAL=168
    NULL_SPEC_LITERAL=169
    DOT_ID=170
    ID=171
    REVERSE_QUOTE_ID=172
    STRING_USER_NAME=173
    LOCAL_ID=174
    GLOBAL_ID=175
    ERROR_RECONGNIGION=176

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(evaql_parser.EOF, 0)

        def sqlStatements(self):
            return self.getTypedRuleContext(evaql_parser.SqlStatementsContext,0)


        def MINUSMINUS(self):
            return self.getToken(evaql_parser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = evaql_parser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & ((1 << (evaql_parser.CREATE - 15)) | (1 << (evaql_parser.DELETE - 15)) | (1 << (evaql_parser.DESCRIBE - 15)) | (1 << (evaql_parser.DROP - 15)) | (1 << (evaql_parser.INSERT - 15)) | (1 << (evaql_parser.LOAD - 15)) | (1 << (evaql_parser.RENAME - 15)) | (1 << (evaql_parser.SELECT - 15)) | (1 << (evaql_parser.SHOW - 15)) | (1 << (evaql_parser.UPDATE - 15)) | (1 << (evaql_parser.UPLOAD - 15)))) != 0) or _la==evaql_parser.HELP or _la==evaql_parser.SEMI:
                self.state = 210
                self.sqlStatements()


            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.MINUSMINUS:
                self.state = 213
                self.match(evaql_parser.MINUSMINUS)


            self.state = 216
            self.match(evaql_parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.SqlStatementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.SqlStatementContext,i)


        def emptyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.EmptyStatementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.EmptyStatementContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.SEMI)
            else:
                return self.getToken(evaql_parser.SEMI, i)

        def MINUSMINUS(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.MINUSMINUS)
            else:
                return self.getToken(evaql_parser.MINUSMINUS, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_sqlStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatements" ):
                listener.enterSqlStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatements" ):
                listener.exitSqlStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlStatements" ):
                return visitor.visitSqlStatements(self)
            else:
                return visitor.visitChildren(self)




    def sqlStatements(self):

        localctx = evaql_parser.SqlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sqlStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 225
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [evaql_parser.CREATE, evaql_parser.DELETE, evaql_parser.DESCRIBE, evaql_parser.DROP, evaql_parser.INSERT, evaql_parser.LOAD, evaql_parser.RENAME, evaql_parser.SELECT, evaql_parser.SHOW, evaql_parser.UPDATE, evaql_parser.UPLOAD, evaql_parser.HELP]:
                        self.state = 218
                        self.sqlStatement()
                        self.state = 220
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==evaql_parser.MINUSMINUS:
                            self.state = 219
                            self.match(evaql_parser.MINUSMINUS)


                        self.state = 222
                        self.match(evaql_parser.SEMI)
                        pass
                    elif token in [evaql_parser.SEMI]:
                        self.state = 224
                        self.emptyStatement()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.CREATE, evaql_parser.DELETE, evaql_parser.DESCRIBE, evaql_parser.DROP, evaql_parser.INSERT, evaql_parser.LOAD, evaql_parser.RENAME, evaql_parser.SELECT, evaql_parser.SHOW, evaql_parser.UPDATE, evaql_parser.UPLOAD, evaql_parser.HELP]:
                self.state = 230
                self.sqlStatement()
                self.state = 235
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.MINUSMINUS:
                        self.state = 231
                        self.match(evaql_parser.MINUSMINUS)


                    self.state = 234
                    self.match(evaql_parser.SEMI)


                pass
            elif token in [evaql_parser.SEMI]:
                self.state = 237
                self.emptyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(evaql_parser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(evaql_parser.DmlStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(evaql_parser.UtilityStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_sqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatement" ):
                listener.enterSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatement" ):
                listener.exitSqlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlStatement" ):
                return visitor.visitSqlStatement(self)
            else:
                return visitor.visitChildren(self)




    def sqlStatement(self):

        localctx = evaql_parser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sqlStatement)
        try:
            self.state = 243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.CREATE, evaql_parser.DROP, evaql_parser.RENAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 240
                self.ddlStatement()
                pass
            elif token in [evaql_parser.DELETE, evaql_parser.INSERT, evaql_parser.LOAD, evaql_parser.SELECT, evaql_parser.UPDATE, evaql_parser.UPLOAD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 241
                self.dmlStatement()
                pass
            elif token in [evaql_parser.DESCRIBE, evaql_parser.SHOW, evaql_parser.HELP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 242
                self.utilityStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(evaql_parser.SEMI, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = evaql_parser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(evaql_parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(evaql_parser.CreateDatabaseContext,0)


        def createTable(self):
            return self.getTypedRuleContext(evaql_parser.CreateTableContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(evaql_parser.CreateIndexContext,0)


        def createUdf(self):
            return self.getTypedRuleContext(evaql_parser.CreateUdfContext,0)


        def createMaterializedView(self):
            return self.getTypedRuleContext(evaql_parser.CreateMaterializedViewContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(evaql_parser.DropDatabaseContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(evaql_parser.DropTableContext,0)


        def dropUdf(self):
            return self.getTypedRuleContext(evaql_parser.DropUdfContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(evaql_parser.DropIndexContext,0)


        def renameTable(self):
            return self.getTypedRuleContext(evaql_parser.RenameTableContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdlStatement" ):
                return visitor.visitDdlStatement(self)
            else:
                return visitor.visitChildren(self)




    def ddlStatement(self):

        localctx = evaql_parser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ddlStatement)
        try:
            self.state = 257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 247
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 248
                self.createTable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 249
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 250
                self.createUdf()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 251
                self.createMaterializedView()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 252
                self.dropDatabase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 253
                self.dropTable()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 254
                self.dropUdf()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 255
                self.dropIndex()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 256
                self.renameTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(evaql_parser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(evaql_parser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(evaql_parser.DeleteStatementContext,0)


        def loadStatement(self):
            return self.getTypedRuleContext(evaql_parser.LoadStatementContext,0)


        def uploadStatement(self):
            return self.getTypedRuleContext(evaql_parser.UploadStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)




    def dmlStatement(self):

        localctx = evaql_parser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_dmlStatement)
        try:
            self.state = 265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.selectStatement(0)
                pass
            elif token in [evaql_parser.INSERT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self.insertStatement()
                pass
            elif token in [evaql_parser.UPDATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 261
                self.updateStatement()
                pass
            elif token in [evaql_parser.DELETE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 262
                self.deleteStatement()
                pass
            elif token in [evaql_parser.LOAD]:
                self.enterOuterAlt(localctx, 5)
                self.state = 263
                self.loadStatement()
                pass
            elif token in [evaql_parser.UPLOAD]:
                self.enterOuterAlt(localctx, 6)
                self.state = 264
                self.uploadStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDescribeStatement(self):
            return self.getTypedRuleContext(evaql_parser.SimpleDescribeStatementContext,0)


        def helpStatement(self):
            return self.getTypedRuleContext(evaql_parser.HelpStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(evaql_parser.ShowStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUtilityStatement" ):
                return visitor.visitUtilityStatement(self)
            else:
                return visitor.visitChildren(self)




    def utilityStatement(self):

        localctx = evaql_parser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_utilityStatement)
        try:
            self.state = 270
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.DESCRIBE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 267
                self.simpleDescribeStatement()
                pass
            elif token in [evaql_parser.HELP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self.helpStatement()
                pass
            elif token in [evaql_parser.SHOW]:
                self.enterOuterAlt(localctx, 3)
                self.state = 269
                self.showStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(evaql_parser.DATABASE, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabase" ):
                return visitor.visitCreateDatabase(self)
            else:
                return visitor.visitChildren(self)




    def createDatabase(self):

        localctx = evaql_parser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(evaql_parser.CREATE)
            self.state = 273
            self.match(evaql_parser.DATABASE)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 274
                self.ifNotExists()


            self.state = 277
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def INDEX(self):
            return self.getToken(evaql_parser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ON(self):
            return self.getToken(evaql_parser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(evaql_parser.IndexColumnNamesContext,0)


        def indexType(self):
            return self.getTypedRuleContext(evaql_parser.IndexTypeContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndex" ):
                return visitor.visitCreateIndex(self)
            else:
                return visitor.visitChildren(self)




    def createIndex(self):

        localctx = evaql_parser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(evaql_parser.CREATE)
            self.state = 280
            self.match(evaql_parser.INDEX)
            self.state = 281
            self.uid()
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.USING:
                self.state = 282
                self.indexType()


            self.state = 285
            self.match(evaql_parser.ON)
            self.state = 286
            self.tableName()
            self.state = 287
            self.indexColumnNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_createTable

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)
        def TABLE(self):
            return self.getToken(evaql_parser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(evaql_parser.CreateDefinitionsContext,0)

        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCreateTable" ):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCreateTable" ):
                listener.exitColumnCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnCreateTable" ):
                return visitor.visitColumnCreateTable(self)
            else:
                return visitor.visitChildren(self)



    def createTable(self):

        localctx = evaql_parser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            localctx = evaql_parser.ColumnCreateTableContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.match(evaql_parser.CREATE)
            self.state = 290
            self.match(evaql_parser.TABLE)
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 291
                self.ifNotExists()


            self.state = 294
            self.tableName()
            self.state = 295
            self.createDefinitions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(evaql_parser.RENAME, 0)

        def TABLE(self):
            return self.getToken(evaql_parser.TABLE, 0)

        def oldtableName(self):
            return self.getTypedRuleContext(evaql_parser.OldtableNameContext,0)


        def TO(self):
            return self.getToken(evaql_parser.TO, 0)

        def newtableName(self):
            return self.getTypedRuleContext(evaql_parser.NewtableNameContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_renameTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)




    def renameTable(self):

        localctx = evaql_parser.RenameTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_renameTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(evaql_parser.RENAME)
            self.state = 298
            self.match(evaql_parser.TABLE)
            self.state = 299
            self.oldtableName()
            self.state = 300
            self.match(evaql_parser.TO)
            self.state = 301
            self.newtableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def UDF(self):
            return self.getToken(evaql_parser.UDF, 0)

        def udfName(self):
            return self.getTypedRuleContext(evaql_parser.UdfNameContext,0)


        def INPUT(self):
            return self.getToken(evaql_parser.INPUT, 0)

        def createDefinitions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.CreateDefinitionsContext)
            else:
                return self.getTypedRuleContext(evaql_parser.CreateDefinitionsContext,i)


        def OUTPUT(self):
            return self.getToken(evaql_parser.OUTPUT, 0)

        def TYPE(self):
            return self.getToken(evaql_parser.TYPE, 0)

        def udfType(self):
            return self.getTypedRuleContext(evaql_parser.UdfTypeContext,0)


        def IMPL(self):
            return self.getToken(evaql_parser.IMPL, 0)

        def udfImpl(self):
            return self.getTypedRuleContext(evaql_parser.UdfImplContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createUdf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdf" ):
                listener.enterCreateUdf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdf" ):
                listener.exitCreateUdf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUdf" ):
                return visitor.visitCreateUdf(self)
            else:
                return visitor.visitChildren(self)




    def createUdf(self):

        localctx = evaql_parser.CreateUdfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_createUdf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.match(evaql_parser.CREATE)
            self.state = 304
            self.match(evaql_parser.UDF)
            self.state = 306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 305
                self.ifNotExists()


            self.state = 308
            self.udfName()
            self.state = 309
            self.match(evaql_parser.INPUT)
            self.state = 310
            self.createDefinitions()
            self.state = 311
            self.match(evaql_parser.OUTPUT)
            self.state = 312
            self.createDefinitions()
            self.state = 313
            self.match(evaql_parser.TYPE)
            self.state = 314
            self.udfType()
            self.state = 315
            self.match(evaql_parser.IMPL)
            self.state = 316
            self.udfImpl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateMaterializedViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext

        def CREATE(self):
            return self.getToken(evaql_parser.CREATE, 0)

        def MATERIALIZED(self):
            return self.getToken(evaql_parser.MATERIALIZED, 0)

        def VIEW(self):
            return self.getToken(evaql_parser.VIEW, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(evaql_parser.IfNotExistsContext,0)


        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_createMaterializedView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateMaterializedView" ):
                listener.enterCreateMaterializedView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateMaterializedView" ):
                listener.exitCreateMaterializedView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateMaterializedView" ):
                return visitor.visitCreateMaterializedView(self)
            else:
                return visitor.visitChildren(self)




    def createMaterializedView(self):

        localctx = evaql_parser.CreateMaterializedViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_createMaterializedView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(evaql_parser.CREATE)
            self.state = 319
            self.match(evaql_parser.MATERIALIZED)
            self.state = 320
            self.match(evaql_parser.VIEW)
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 321
                self.ifNotExists()


            self.state = 324
            self.tableName()

            self.state = 325
            self.match(evaql_parser.LR_BRACKET)
            self.state = 326
            localctx.columns = self.uidList()
            self.state = 327
            self.match(evaql_parser.RR_BRACKET)
            self.state = 329
            self.match(evaql_parser.AS)
            self.state = 330
            self.selectStatement(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfName" ):
                listener.enterUdfName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfName" ):
                listener.exitUdfName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfName" ):
                return visitor.visitUdfName(self)
            else:
                return visitor.visitChildren(self)




    def udfName(self):

        localctx = evaql_parser.UdfNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_udfName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfType" ):
                listener.enterUdfType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfType" ):
                listener.exitUdfType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfType" ):
                return visitor.visitUdfType(self)
            else:
                return visitor.visitChildren(self)




    def udfType(self):

        localctx = evaql_parser.UdfTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_udfType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfImplContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfImpl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfImpl" ):
                listener.enterUdfImpl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfImpl" ):
                listener.exitUdfImpl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfImpl" ):
                return visitor.visitUdfImpl(self)
            else:
                return visitor.visitChildren(self)




    def udfImpl(self):

        localctx = evaql_parser.UdfImplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_udfImpl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(evaql_parser.USING, 0)

        def BTREE(self):
            return self.getToken(evaql_parser.BTREE, 0)

        def HASH(self):
            return self.getToken(evaql_parser.HASH, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexType" ):
                return visitor.visitIndexType(self)
            else:
                return visitor.visitChildren(self)




    def indexType(self):

        localctx = evaql_parser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(evaql_parser.USING)
            self.state = 339
            _la = self._input.LA(1)
            if not(_la==evaql_parser.BTREE or _la==evaql_parser.HASH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.CreateDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_createDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDefinitions" ):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDefinitions" ):
                listener.exitCreateDefinitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDefinitions" ):
                return visitor.visitCreateDefinitions(self)
            else:
                return visitor.visitChildren(self)




    def createDefinitions(self):

        localctx = evaql_parser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(evaql_parser.LR_BRACKET)
            self.state = 342
            self.createDefinition()
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 343
                self.match(evaql_parser.COMMA)
                self.state = 344
                self.createDefinition()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 350
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_createDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(evaql_parser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDeclaration" ):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDeclaration" ):
                listener.exitColumnDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDeclaration" ):
                return visitor.visitColumnDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(evaql_parser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDeclaration" ):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDeclaration" ):
                listener.exitIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexDeclaration" ):
                return visitor.visitIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def createDefinition(self):

        localctx = evaql_parser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_createDefinition)
        try:
            self.state = 356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID]:
                localctx = evaql_parser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 352
                self.uid()
                self.state = 353
                self.columnDefinition()
                pass
            elif token in [evaql_parser.INDEX]:
                localctx = evaql_parser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 355
                self.indexColumnDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(evaql_parser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return evaql_parser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = evaql_parser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.dataType()
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (evaql_parser.DEFAULT - 18)) | (1 << (evaql_parser.KEY - 18)) | (1 << (evaql_parser.NOT - 18)) | (1 << (evaql_parser.NULL_LITERAL - 18)) | (1 << (evaql_parser.PRIMARY - 18)) | (1 << (evaql_parser.UNIQUE - 18)))) != 0) or _la==evaql_parser.NULL_SPEC_LITERAL:
                self.state = 359
                self.columnConstraint()
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(evaql_parser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(evaql_parser.PRIMARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyColumnConstraint" ):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyColumnConstraint" ):
                listener.exitPrimaryKeyColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryKeyColumnConstraint" ):
                return visitor.visitPrimaryKeyColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(evaql_parser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(evaql_parser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyColumnConstraint" ):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyColumnConstraint" ):
                listener.exitUniqueKeyColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniqueKeyColumnConstraint" ):
                return visitor.visitUniqueKeyColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(evaql_parser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullColumnConstraint" ):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullColumnConstraint" ):
                listener.exitNullColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullColumnConstraint" ):
                return visitor.visitNullColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class DefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(evaql_parser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(evaql_parser.DefaultValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultColumnConstraint" ):
                listener.enterDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultColumnConstraint" ):
                listener.exitDefaultColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultColumnConstraint" ):
                return visitor.visitDefaultColumnConstraint(self)
            else:
                return visitor.visitChildren(self)



    def columnConstraint(self):

        localctx = evaql_parser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.NULL_SPEC_LITERAL]:
                localctx = evaql_parser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 365
                self.nullNotnull()
                pass
            elif token in [evaql_parser.DEFAULT]:
                localctx = evaql_parser.DefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 366
                self.match(evaql_parser.DEFAULT)
                self.state = 367
                self.defaultValue()
                pass
            elif token in [evaql_parser.KEY, evaql_parser.PRIMARY]:
                localctx = evaql_parser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.PRIMARY:
                    self.state = 368
                    self.match(evaql_parser.PRIMARY)


                self.state = 371
                self.match(evaql_parser.KEY)
                pass
            elif token in [evaql_parser.UNIQUE]:
                localctx = evaql_parser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 372
                self.match(evaql_parser.UNIQUE)
                self.state = 374
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 373
                    self.match(evaql_parser.KEY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(evaql_parser.INDEX, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(evaql_parser.IndexColumnNamesContext,0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(evaql_parser.IndexTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIndexDeclaration" ):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIndexDeclaration" ):
                listener.exitSimpleIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleIndexDeclaration" ):
                return visitor.visitSimpleIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def indexColumnDefinition(self):

        localctx = evaql_parser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            localctx = evaql_parser.SimpleIndexDeclarationContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(evaql_parser.INDEX)
            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                self.state = 379
                self.uid()


            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.USING:
                self.state = 382
                self.indexType()


            self.state = 385
            self.indexColumnNames()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(evaql_parser.DROP, 0)

        def DATABASE(self):
            return self.getToken(evaql_parser.DATABASE, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(evaql_parser.IfExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropDatabase" ):
                return visitor.visitDropDatabase(self)
            else:
                return visitor.visitChildren(self)




    def dropDatabase(self):

        localctx = evaql_parser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(evaql_parser.DROP)
            self.state = 388
            self.match(evaql_parser.DATABASE)
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 389
                self.ifExists()


            self.state = 392
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(evaql_parser.DROP, 0)

        def INDEX(self):
            return self.getToken(evaql_parser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def ON(self):
            return self.getToken(evaql_parser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropIndex" ):
                return visitor.visitDropIndex(self)
            else:
                return visitor.visitChildren(self)




    def dropIndex(self):

        localctx = evaql_parser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_dropIndex)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(evaql_parser.DROP)
            self.state = 395
            self.match(evaql_parser.INDEX)
            self.state = 396
            self.uid()
            self.state = 397
            self.match(evaql_parser.ON)
            self.state = 398
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(evaql_parser.DROP, 0)

        def TABLE(self):
            return self.getToken(evaql_parser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(evaql_parser.TablesContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(evaql_parser.IfExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)




    def dropTable(self):

        localctx = evaql_parser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(evaql_parser.DROP)
            self.state = 401
            self.match(evaql_parser.TABLE)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 402
                self.ifExists()


            self.state = 405
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUdfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(evaql_parser.DROP, 0)

        def UDF(self):
            return self.getToken(evaql_parser.UDF, 0)

        def udfName(self):
            return self.getTypedRuleContext(evaql_parser.UdfNameContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(evaql_parser.IfExistsContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dropUdf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUdf" ):
                listener.enterDropUdf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUdf" ):
                listener.exitDropUdf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropUdf" ):
                return visitor.visitDropUdf(self)
            else:
                return visitor.visitChildren(self)




    def dropUdf(self):

        localctx = evaql_parser.DropUdfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_dropUdf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(evaql_parser.DROP)
            self.state = 408
            self.match(evaql_parser.UDF)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.IF:
                self.state = 409
                self.ifExists()


            self.state = 412
            self.udfName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(evaql_parser.SingleDeleteStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStatement" ):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatement(self):

        localctx = evaql_parser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_deleteStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.singleDeleteStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext

        def INSERT(self):
            return self.getToken(evaql_parser.INSERT, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(evaql_parser.InsertStatementValueContext,0)


        def INTO(self):
            return self.getToken(evaql_parser.INTO, 0)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatement" ):
                return visitor.visitInsertStatement(self)
            else:
                return visitor.visitChildren(self)




    def insertStatement(self):

        localctx = evaql_parser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(evaql_parser.INSERT)
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.INTO:
                self.state = 417
                self.match(evaql_parser.INTO)


            self.state = 420
            self.tableName()

            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LR_BRACKET:
                self.state = 421
                self.match(evaql_parser.LR_BRACKET)
                self.state = 422
                localctx.columns = self.uidList()
                self.state = 423
                self.match(evaql_parser.RR_BRACKET)


            self.state = 427
            self.insertStatementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectStatementContext
            super().__init__(parser)
            self.left = None # SelectStatementContext
            self.unionAll = None # Token
            self.right = None # SelectStatementContext
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(evaql_parser.UNION, 0)
        def selectStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.SelectStatementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.SelectStatementContext,i)

        def ALL(self):
            return self.getToken(evaql_parser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionSelect" ):
                return visitor.visitUnionSelect(self)
            else:
                return visitor.visitChildren(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(evaql_parser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleSelect" ):
                return visitor.visitSimpleSelect(self)
            else:
                return visitor.visitChildren(self)



    def selectStatement(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.SelectStatementContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_selectStatement, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = evaql_parser.SimpleSelectContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 430
            self.querySpecification()
            self._ctx.stop = self._input.LT(-1)
            self.state = 440
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = evaql_parser.UnionSelectContext(self, evaql_parser.SelectStatementContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_selectStatement)
                    self.state = 432
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 433
                    self.match(evaql_parser.UNION)
                    self.state = 435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.ALL:
                        self.state = 434
                        localctx.unionAll = self.match(evaql_parser.ALL)


                    self.state = 437
                    localctx.right = self.selectStatement(2) 
                self.state = 442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleUpdateStatement(self):
            return self.getTypedRuleContext(evaql_parser.SingleUpdateStatementContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateStatement" ):
                return visitor.visitUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def updateStatement(self):

        localctx = evaql_parser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_updateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.singleUpdateStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # UidListContext

        def LOAD(self):
            return self.getToken(evaql_parser.LOAD, 0)

        def DATA(self):
            return self.getToken(evaql_parser.DATA, 0)

        def INFILE(self):
            return self.getToken(evaql_parser.INFILE, 0)

        def fileName(self):
            return self.getTypedRuleContext(evaql_parser.FileNameContext,0)


        def INTO(self):
            return self.getToken(evaql_parser.INTO, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def WITH(self):
            return self.getToken(evaql_parser.WITH, 0)

        def fileOptions(self):
            return self.getTypedRuleContext(evaql_parser.FileOptionsContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_loadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadStatement" ):
                listener.enterLoadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadStatement" ):
                listener.exitLoadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadStatement" ):
                return visitor.visitLoadStatement(self)
            else:
                return visitor.visitChildren(self)




    def loadStatement(self):

        localctx = evaql_parser.LoadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_loadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.match(evaql_parser.LOAD)
            self.state = 446
            self.match(evaql_parser.DATA)
            self.state = 447
            self.match(evaql_parser.INFILE)
            self.state = 448
            self.fileName()
            self.state = 449
            self.match(evaql_parser.INTO)
            self.state = 450
            self.tableName()
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LR_BRACKET:
                self.state = 451
                self.match(evaql_parser.LR_BRACKET)
                self.state = 452
                localctx.columns = self.uidList()
                self.state = 453
                self.match(evaql_parser.RR_BRACKET)


            self.state = 459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.WITH:
                self.state = 457
                self.match(evaql_parser.WITH)
                self.state = 458
                self.fileOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fileFormat = None # Token

        def FORMAT(self):
            return self.getToken(evaql_parser.FORMAT, 0)

        def CSV(self):
            return self.getToken(evaql_parser.CSV, 0)

        def VIDEO(self):
            return self.getToken(evaql_parser.VIDEO, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_fileOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileOptions" ):
                listener.enterFileOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileOptions" ):
                listener.exitFileOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileOptions" ):
                return visitor.visitFileOptions(self)
            else:
                return visitor.visitChildren(self)




    def fileOptions(self):

        localctx = evaql_parser.FileOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_fileOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(evaql_parser.FORMAT)
            self.state = 462
            localctx.fileFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==evaql_parser.CSV or _la==evaql_parser.VIDEO):
                localctx.fileFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UploadStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPLOAD(self):
            return self.getToken(evaql_parser.UPLOAD, 0)

        def PATH(self):
            return self.getToken(evaql_parser.PATH, 0)

        def fileName(self):
            return self.getTypedRuleContext(evaql_parser.FileNameContext,0)


        def BLOB(self):
            return self.getToken(evaql_parser.BLOB, 0)

        def videoBlob(self):
            return self.getTypedRuleContext(evaql_parser.VideoBlobContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_uploadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUploadStatement" ):
                listener.enterUploadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUploadStatement" ):
                listener.exitUploadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUploadStatement" ):
                return visitor.visitUploadStatement(self)
            else:
                return visitor.visitChildren(self)




    def uploadStatement(self):

        localctx = evaql_parser.UploadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_uploadStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.match(evaql_parser.UPLOAD)
            self.state = 465
            self.match(evaql_parser.PATH)
            self.state = 466
            self.fileName()
            self.state = 467
            self.match(evaql_parser.BLOB)
            self.state = 468
            self.videoBlob()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_fileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileName" ):
                listener.enterFileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileName" ):
                listener.exitFileName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileName" ):
                return visitor.visitFileName(self)
            else:
                return visitor.visitChildren(self)




    def fileName(self):

        localctx = evaql_parser.FileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fileName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VideoBlobContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_videoBlob

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVideoBlob" ):
                listener.enterVideoBlob(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVideoBlob" ):
                listener.exitVideoBlob(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVideoBlob" ):
                return visitor.visitVideoBlob(self)
            else:
                return visitor.visitChildren(self)




    def videoBlob(self):

        localctx = evaql_parser.VideoBlobContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_videoBlob)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.LR_BRACKET)
            else:
                return self.getToken(evaql_parser.LR_BRACKET, i)

        def expressionsWithDefaults(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionsWithDefaultsContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionsWithDefaultsContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.RR_BRACKET)
            else:
                return self.getToken(evaql_parser.RR_BRACKET, i)

        def VALUES(self):
            return self.getToken(evaql_parser.VALUES, 0)

        def VALUE(self):
            return self.getToken(evaql_parser.VALUE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_insertStatementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatementValue" ):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatementValue" ):
                listener.exitInsertStatementValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatementValue" ):
                return visitor.visitInsertStatementValue(self)
            else:
                return visitor.visitChildren(self)




    def insertStatementValue(self):

        localctx = evaql_parser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.selectStatement(0)
                pass
            elif token in [evaql_parser.VALUES, evaql_parser.VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.VALUES or _la==evaql_parser.VALUE):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 476
                self.match(evaql_parser.LR_BRACKET)
                self.state = 477
                self.expressionsWithDefaults()
                self.state = 478
                self.match(evaql_parser.RR_BRACKET)
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==evaql_parser.COMMA:
                    self.state = 479
                    self.match(evaql_parser.COMMA)
                    self.state = 480
                    self.match(evaql_parser.LR_BRACKET)
                    self.state = 481
                    self.expressionsWithDefaults()
                    self.state = 482
                    self.match(evaql_parser.RR_BRACKET)
                    self.state = 488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatedElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(evaql_parser.EQUAL_SYMBOL, 0)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(evaql_parser.DEFAULT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_updatedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatedElement" ):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatedElement" ):
                listener.exitUpdatedElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdatedElement" ):
                return visitor.visitUpdatedElement(self)
            else:
                return visitor.visitChildren(self)




    def updatedElement(self):

        localctx = evaql_parser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.fullColumnName()
            self.state = 492
            self.match(evaql_parser.EQUAL_SYMBOL)
            self.state = 495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                self.state = 493
                self.expression(0)
                pass
            elif token in [evaql_parser.DEFAULT]:
                self.state = 494
                self.match(evaql_parser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(evaql_parser.DELETE, 0)

        def FROM(self):
            return self.getToken(evaql_parser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def WHERE(self):
            return self.getToken(evaql_parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(evaql_parser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(evaql_parser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_singleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDeleteStatement" ):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDeleteStatement" ):
                listener.exitSingleDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDeleteStatement" ):
                return visitor.visitSingleDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleDeleteStatement(self):

        localctx = evaql_parser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(evaql_parser.DELETE)
            self.state = 498
            self.match(evaql_parser.FROM)
            self.state = 499
            self.tableName()
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.WHERE:
                self.state = 500
                self.match(evaql_parser.WHERE)
                self.state = 501
                self.expression(0)


            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ORDER:
                self.state = 504
                self.orderByClause()


            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LIMIT:
                self.state = 507
                self.match(evaql_parser.LIMIT)
                self.state = 508
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleUpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(evaql_parser.UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def SET(self):
            return self.getToken(evaql_parser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.UpdatedElementContext,i)


        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def WHERE(self):
            return self.getToken(evaql_parser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(evaql_parser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(evaql_parser.LimitClauseContext,0)


        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_singleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleUpdateStatement" ):
                listener.enterSingleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleUpdateStatement" ):
                listener.exitSingleUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleUpdateStatement" ):
                return visitor.visitSingleUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleUpdateStatement(self):

        localctx = evaql_parser.SingleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_singleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(evaql_parser.UPDATE)
            self.state = 512
            self.tableName()
            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS:
                    self.state = 513
                    self.match(evaql_parser.AS)


                self.state = 516
                self.uid()


            self.state = 519
            self.match(evaql_parser.SET)
            self.state = 520
            self.updatedElement()
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 521
                self.match(evaql_parser.COMMA)
                self.state = 522
                self.updatedElement()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.WHERE:
                self.state = 528
                self.match(evaql_parser.WHERE)
                self.state = 529
                self.expression(0)


            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ORDER:
                self.state = 532
                self.orderByClause()


            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LIMIT:
                self.state = 535
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(evaql_parser.ORDER, 0)

        def BY(self):
            return self.getToken(evaql_parser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.OrderByExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = evaql_parser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(evaql_parser.ORDER)
            self.state = 539
            self.match(evaql_parser.BY)
            self.state = 540
            self.orderByExpression()
            self.state = 545
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 541
                    self.match(evaql_parser.COMMA)
                    self.state = 542
                    self.orderByExpression() 
                self.state = 547
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(evaql_parser.ASC, 0)

        def DESC(self):
            return self.getToken(evaql_parser.DESC, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByExpression" ):
                return visitor.visitOrderByExpression(self)
            else:
                return visitor.visitChildren(self)




    def orderByExpression(self):

        localctx = evaql_parser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            self.expression(0)
            self.state = 550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 549
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.ASC or _la==evaql_parser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self):
            return self.getTypedRuleContext(evaql_parser.TableSourceContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSources" ):
                return visitor.visitTableSources(self)
            else:
                return visitor.visitChildren(self)




    def tableSources(self):

        localctx = evaql_parser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tableSources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.tableSource()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_tableSource

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItemWithSample(self):
            return self.getTypedRuleContext(evaql_parser.TableSourceItemWithSampleContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.JoinPartContext)
            else:
                return self.getTypedRuleContext(evaql_parser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceBase" ):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceBase" ):
                listener.exitTableSourceBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSourceBase" ):
                return visitor.visitTableSourceBase(self)
            else:
                return visitor.visitChildren(self)



    def tableSource(self):

        localctx = evaql_parser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_tableSource)
        try:
            localctx = evaql_parser.TableSourceBaseContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.tableSourceItemWithSample()
            self.state = 558
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 555
                    self.joinPart() 
                self.state = 560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemWithSampleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSourceItem(self):
            return self.getTypedRuleContext(evaql_parser.TableSourceItemContext,0)


        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def sampleClause(self):
            return self.getTypedRuleContext(evaql_parser.SampleClauseContext,0)


        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_tableSourceItemWithSample

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceItemWithSample" ):
                listener.enterTableSourceItemWithSample(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceItemWithSample" ):
                listener.exitTableSourceItemWithSample(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSourceItemWithSample" ):
                return visitor.visitTableSourceItemWithSample(self)
            else:
                return visitor.visitChildren(self)




    def tableSourceItemWithSample(self):

        localctx = evaql_parser.TableSourceItemWithSampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_tableSourceItemWithSample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.tableSourceItem()
            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS:
                    self.state = 562
                    self.match(evaql_parser.AS)


                self.state = 565
                self.uid()


            self.state = 569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 568
                self.sampleClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subqueryTableSourceItem(self):
            return self.getTypedRuleContext(evaql_parser.SubqueryTableSourceItemContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryTableItem" ):
                return visitor.visitSubqueryTableItem(self)
            else:
                return visitor.visitChildren(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomTableItem" ):
                return visitor.visitAtomTableItem(self)
            else:
                return visitor.visitChildren(self)


    class LateralFunctionCallItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LATERAL(self):
            return self.getToken(evaql_parser.LATERAL, 0)
        def functionCall(self):
            return self.getTypedRuleContext(evaql_parser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralFunctionCallItem" ):
                listener.enterLateralFunctionCallItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralFunctionCallItem" ):
                listener.exitLateralFunctionCallItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralFunctionCallItem" ):
                return visitor.visitLateralFunctionCallItem(self)
            else:
                return visitor.visitChildren(self)



    def tableSourceItem(self):

        localctx = evaql_parser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_tableSourceItem)
        try:
            self.state = 575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID]:
                localctx = evaql_parser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.tableName()
                pass
            elif token in [evaql_parser.SELECT, evaql_parser.LR_BRACKET]:
                localctx = evaql_parser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.subqueryTableSourceItem()
                pass
            elif token in [evaql_parser.LATERAL]:
                localctx = evaql_parser.LateralFunctionCallItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 573
                self.match(evaql_parser.LATERAL)
                self.state = 574
                self.functionCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryTableSourceItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_subqueryTableSourceItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableSourceItem" ):
                listener.enterSubqueryTableSourceItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableSourceItem" ):
                listener.exitSubqueryTableSourceItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryTableSourceItem" ):
                return visitor.visitSubqueryTableSourceItem(self)
            else:
                return visitor.visitChildren(self)




    def subqueryTableSourceItem(self):

        localctx = evaql_parser.SubqueryTableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_subqueryTableSourceItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.SELECT]:
                self.state = 577
                self.selectStatement(0)
                pass
            elif token in [evaql_parser.LR_BRACKET]:
                self.state = 578
                self.match(evaql_parser.LR_BRACKET)
                self.state = 579
                self.selectStatement(0)
                self.state = 580
                self.match(evaql_parser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(evaql_parser.SAMPLE, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_sampleClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleClause" ):
                listener.enterSampleClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleClause" ):
                listener.exitSampleClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleClause" ):
                return visitor.visitSampleClause(self)
            else:
                return visitor.visitChildren(self)




    def sampleClause(self):

        localctx = evaql_parser.SampleClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_sampleClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(evaql_parser.SAMPLE)
            self.state = 585
            self.decimalLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(evaql_parser.JOIN, 0)
        def tableSourceItemWithSample(self):
            return self.getTypedRuleContext(evaql_parser.TableSourceItemWithSampleContext,0)

        def ON(self):
            return self.getToken(evaql_parser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)

        def USING(self):
            return self.getToken(evaql_parser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(evaql_parser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerJoin" ):
                return visitor.visitInnerJoin(self)
            else:
                return visitor.visitChildren(self)



    def joinPart(self):

        localctx = evaql_parser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_joinPart)
        try:
            localctx = evaql_parser.InnerJoinContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(evaql_parser.JOIN)
            self.state = 588
            self.tableSourceItemWithSample()
            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 589
                self.match(evaql_parser.ON)
                self.state = 590
                self.expression(0)

            elif la_ == 2:
                self.state = 591
                self.match(evaql_parser.USING)
                self.state = 592
                self.match(evaql_parser.LR_BRACKET)
                self.state = 593
                self.uidList()
                self.state = 594
                self.match(evaql_parser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def querySpecification(self):
            return self.getTypedRuleContext(evaql_parser.QuerySpecificationContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(evaql_parser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpression" ):
                return visitor.visitQueryExpression(self)
            else:
                return visitor.visitChildren(self)




    def queryExpression(self):

        localctx = evaql_parser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_queryExpression)
        try:
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self.match(evaql_parser.LR_BRACKET)
                self.state = 599
                self.querySpecification()
                self.state = 600
                self.match(evaql_parser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.match(evaql_parser.LR_BRACKET)
                self.state = 603
                self.queryExpression()
                self.state = 604
                self.match(evaql_parser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(evaql_parser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(evaql_parser.SelectElementsContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(evaql_parser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(evaql_parser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(evaql_parser.LimitClauseContext,0)


        def errorBoundsExpression(self):
            return self.getTypedRuleContext(evaql_parser.ErrorBoundsExpressionContext,0)


        def confidenceLevelExpression(self):
            return self.getTypedRuleContext(evaql_parser.ConfidenceLevelExpressionContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = evaql_parser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(evaql_parser.SELECT)
            self.state = 609
            self.selectElements()
            self.state = 610
            self.fromClause()
            self.state = 612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 611
                self.orderByClause()


            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 614
                self.limitClause()


            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 617
                self.errorBoundsExpression()


            self.state = 621
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 620
                self.confidenceLevelExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.SelectElementContext)
            else:
                return self.getTypedRuleContext(evaql_parser.SelectElementContext,i)


        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectElements" ):
                return visitor.visitSelectElements(self)
            else:
                return visitor.visitChildren(self)




    def selectElements(self):

        localctx = evaql_parser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.STAR]:
                self.state = 623
                localctx.star = self.match(evaql_parser.STAR)
                pass
            elif token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                self.state = 624
                self.selectElement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 627
                self.match(evaql_parser.COMMA)
                self.state = 628
                self.selectElement()
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)

        def LOCAL_ID(self):
            return self.getToken(evaql_parser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(evaql_parser.VAR_ASSIGN, 0)
        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpressionElement" ):
                return visitor.visitSelectExpressionElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(evaql_parser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectFunctionElement" ):
                return visitor.visitSelectFunctionElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(evaql_parser.FullIdContext,0)

        def DOT(self):
            return self.getToken(evaql_parser.DOT, 0)
        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStarElement" ):
                return visitor.visitSelectStarElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)

        def AS(self):
            return self.getToken(evaql_parser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectColumnElement" ):
                return visitor.visitSelectColumnElement(self)
            else:
                return visitor.visitChildren(self)



    def selectElement(self):

        localctx = evaql_parser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                localctx = evaql_parser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 634
                self.fullId()
                self.state = 635
                self.match(evaql_parser.DOT)
                self.state = 636
                self.match(evaql_parser.STAR)
                pass

            elif la_ == 2:
                localctx = evaql_parser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.fullColumnName()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                    self.state = 640
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.AS:
                        self.state = 639
                        self.match(evaql_parser.AS)


                    self.state = 642
                    self.uid()


                pass

            elif la_ == 3:
                localctx = evaql_parser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 645
                self.functionCall()
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                    self.state = 647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.AS:
                        self.state = 646
                        self.match(evaql_parser.AS)


                    self.state = 649
                    self.uid()


                pass

            elif la_ == 4:
                localctx = evaql_parser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 654
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 652
                    self.match(evaql_parser.LOCAL_ID)
                    self.state = 653
                    self.match(evaql_parser.VAR_ASSIGN)


                self.state = 656
                self.expression(0)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.AS or _la==evaql_parser.ID or _la==evaql_parser.REVERSE_QUOTE_ID:
                    self.state = 658
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.AS:
                        self.state = 657
                        self.match(evaql_parser.AS)


                    self.state = 660
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext
            self.havingExpr = None # ExpressionContext

        def FROM(self):
            return self.getToken(evaql_parser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(evaql_parser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(evaql_parser.WHERE, 0)

        def GROUP(self):
            return self.getToken(evaql_parser.GROUP, 0)

        def BY(self):
            return self.getToken(evaql_parser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(evaql_parser.GroupByItemContext,i)


        def HAVING(self):
            return self.getToken(evaql_parser.HAVING, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = evaql_parser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(evaql_parser.FROM)
            self.state = 666
            self.tableSources()
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 667
                self.match(evaql_parser.WHERE)
                self.state = 668
                localctx.whereExpr = self.expression(0)


            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 671
                self.match(evaql_parser.GROUP)
                self.state = 672
                self.match(evaql_parser.BY)
                self.state = 673
                self.groupByItem()
                self.state = 678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 674
                        self.match(evaql_parser.COMMA)
                        self.state = 675
                        self.groupByItem() 
                    self.state = 680
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)



            self.state = 685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 683
                self.match(evaql_parser.HAVING)
                self.state = 684
                localctx.havingExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(evaql_parser.ASC, 0)

        def DESC(self):
            return self.getToken(evaql_parser.DESC, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByItem" ):
                return visitor.visitGroupByItem(self)
            else:
                return visitor.visitChildren(self)




    def groupByItem(self):

        localctx = evaql_parser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.expression(0)
            self.state = 689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 688
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.ASC or _la==evaql_parser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # DecimalLiteralContext
            self.limit = None # DecimalLiteralContext

        def LIMIT(self):
            return self.getToken(evaql_parser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(evaql_parser.OFFSET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(evaql_parser.COMMA, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = evaql_parser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(evaql_parser.LIMIT)
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 692
                    localctx.offset = self.decimalLiteral()
                    self.state = 693
                    self.match(evaql_parser.COMMA)


                self.state = 697
                localctx.limit = self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 698
                localctx.limit = self.decimalLiteral()
                self.state = 699
                self.match(evaql_parser.OFFSET)
                self.state = 700
                localctx.offset = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorBoundsExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR_BOUNDS(self):
            return self.getToken(evaql_parser.ERROR_BOUNDS, 0)

        def REAL_LITERAL(self):
            return self.getToken(evaql_parser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_errorBoundsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorBoundsExpression" ):
                listener.enterErrorBoundsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorBoundsExpression" ):
                listener.exitErrorBoundsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorBoundsExpression" ):
                return visitor.visitErrorBoundsExpression(self)
            else:
                return visitor.visitChildren(self)




    def errorBoundsExpression(self):

        localctx = evaql_parser.ErrorBoundsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_errorBoundsExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(evaql_parser.ERROR_BOUNDS)
            self.state = 705
            self.match(evaql_parser.REAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfidenceLevelExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIDENCE_LEVEL(self):
            return self.getToken(evaql_parser.CONFIDENCE_LEVEL, 0)

        def REAL_LITERAL(self):
            return self.getToken(evaql_parser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_confidenceLevelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfidenceLevelExpression" ):
                listener.enterConfidenceLevelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfidenceLevelExpression" ):
                listener.exitConfidenceLevelExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConfidenceLevelExpression" ):
                return visitor.visitConfidenceLevelExpression(self)
            else:
                return visitor.visitChildren(self)




    def confidenceLevelExpression(self):

        localctx = evaql_parser.ConfidenceLevelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_confidenceLevelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(evaql_parser.CONFIDENCE_LEVEL)
            self.state = 708
            self.match(evaql_parser.REAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShutdownStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUTDOWN(self):
            return self.getToken(evaql_parser.SHUTDOWN, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_shutdownStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShutdownStatement" ):
                listener.enterShutdownStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShutdownStatement" ):
                listener.exitShutdownStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShutdownStatement" ):
                return visitor.visitShutdownStatement(self)
            else:
                return visitor.visitChildren(self)




    def shutdownStatement(self):

        localctx = evaql_parser.ShutdownStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_shutdownStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(evaql_parser.SHUTDOWN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDescribeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIBE(self):
            return self.getToken(evaql_parser.DESCRIBE, 0)

        def tableName(self):
            return self.getTypedRuleContext(evaql_parser.TableNameContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_simpleDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDescribeStatement" ):
                listener.enterSimpleDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDescribeStatement" ):
                listener.exitSimpleDescribeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDescribeStatement" ):
                return visitor.visitSimpleDescribeStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleDescribeStatement(self):

        localctx = evaql_parser.SimpleDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_simpleDescribeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(evaql_parser.DESCRIBE)
            self.state = 713
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(evaql_parser.HELP, 0)

        def STRING_LITERAL(self):
            return self.getToken(evaql_parser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_helpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStatement" ):
                listener.enterHelpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStatement" ):
                listener.exitHelpStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHelpStatement" ):
                return visitor.visitHelpStatement(self)
            else:
                return visitor.visitChildren(self)




    def helpStatement(self):

        localctx = evaql_parser.HelpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_helpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(evaql_parser.HELP)
            self.state = 716
            self.match(evaql_parser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(evaql_parser.SHOW, 0)

        def UDFS(self):
            return self.getToken(evaql_parser.UDFS, 0)

        def TABLES(self):
            return self.getToken(evaql_parser.TABLES, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_showStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatement" ):
                listener.enterShowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatement" ):
                listener.exitShowStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStatement" ):
                return visitor.visitShowStatement(self)
            else:
                return visitor.visitChildren(self)




    def showStatement(self):

        localctx = evaql_parser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(evaql_parser.SHOW)
            self.state = 719
            _la = self._input.LA(1)
            if not(_la==evaql_parser.TABLES or _la==evaql_parser.UDFS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.UidContext)
            else:
                return self.getTypedRuleContext(evaql_parser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(evaql_parser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(evaql_parser.DOT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullId" ):
                return visitor.visitFullId(self)
            else:
                return visitor.visitChildren(self)




    def fullId(self):

        localctx = evaql_parser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.uid()
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 722
                self.match(evaql_parser.DOT_ID)

            elif la_ == 2:
                self.state = 723
                self.match(evaql_parser.DOT)
                self.state = 724
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(evaql_parser.FullIdContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)




    def tableName(self):

        localctx = evaql_parser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OldtableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(evaql_parser.FullIdContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_oldtableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOldtableName" ):
                listener.enterOldtableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOldtableName" ):
                listener.exitOldtableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOldtableName" ):
                return visitor.visitOldtableName(self)
            else:
                return visitor.visitChildren(self)




    def oldtableName(self):

        localctx = evaql_parser.OldtableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oldtableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewtableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(evaql_parser.FullIdContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_newtableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewtableName" ):
                listener.enterNewtableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewtableName" ):
                listener.exitNewtableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewtableName" ):
                return visitor.visitNewtableName(self)
            else:
                return visitor.visitChildren(self)




    def newtableName(self):

        localctx = evaql_parser.NewtableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_newtableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DottedIdContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DottedIdContext,i)


        def getRuleIndex(self):
            return evaql_parser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullColumnName" ):
                return visitor.visitFullColumnName(self)
            else:
                return visitor.visitChildren(self)




    def fullColumnName(self):

        localctx = evaql_parser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fullColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.uid()
            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 734
                self.dottedId()
                self.state = 736
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 735
                    self.dottedId()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def ASC(self):
            return self.getToken(evaql_parser.ASC, 0)

        def DESC(self):
            return self.getToken(evaql_parser.DESC, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexColumnName" ):
                return visitor.visitIndexColumnName(self)
            else:
                return visitor.visitChildren(self)




    def indexColumnName(self):

        localctx = evaql_parser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.uid()
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LR_BRACKET:
                self.state = 741
                self.match(evaql_parser.LR_BRACKET)
                self.state = 742
                self.decimalLiteral()
                self.state = 743
                self.match(evaql_parser.RR_BRACKET)


            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.ASC or _la==evaql_parser.DESC:
                self.state = 747
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.ASC or _la==evaql_parser.DESC):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_USER_NAME(self):
            return self.getToken(evaql_parser.STRING_USER_NAME, 0)

        def ID(self):
            return self.getToken(evaql_parser.ID, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserName" ):
                return visitor.visitUserName(self)
            else:
                return visitor.visitChildren(self)




    def userName(self):

        localctx = evaql_parser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_userName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            _la = self._input.LA(1)
            if not(_la==evaql_parser.ID or _la==evaql_parser.STRING_USER_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.MINUS)
            else:
                return self.getToken(evaql_parser.MINUS, i)

        def COLON_SYMB(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COLON_SYMB)
            else:
                return self.getToken(evaql_parser.COLON_SYMB, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_uuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidSet" ):
                listener.enterUuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidSet" ):
                listener.exitUuidSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUuidSet" ):
                return visitor.visitUuidSet(self)
            else:
                return visitor.visitChildren(self)




    def uuidSet(self):

        localctx = evaql_parser.UuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_uuidSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.decimalLiteral()
            self.state = 753
            self.match(evaql_parser.MINUS)
            self.state = 754
            self.decimalLiteral()
            self.state = 755
            self.match(evaql_parser.MINUS)
            self.state = 756
            self.decimalLiteral()
            self.state = 757
            self.match(evaql_parser.MINUS)
            self.state = 758
            self.decimalLiteral()
            self.state = 759
            self.match(evaql_parser.MINUS)
            self.state = 760
            self.decimalLiteral()
            self.state = 766 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 761
                self.match(evaql_parser.COLON_SYMB)
                self.state = 762
                self.decimalLiteral()
                self.state = 763
                self.match(evaql_parser.MINUS)
                self.state = 764
                self.decimalLiteral()
                self.state = 768 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==evaql_parser.COLON_SYMB):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(evaql_parser.SimpleIdContext,0)


        def REVERSE_QUOTE_ID(self):
            return self.getToken(evaql_parser.REVERSE_QUOTE_ID, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUid" ):
                return visitor.visitUid(self)
            else:
                return visitor.visitChildren(self)




    def uid(self):

        localctx = evaql_parser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_uid)
        try:
            self.state = 772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 770
                self.simpleId()
                pass
            elif token in [evaql_parser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(evaql_parser.REVERSE_QUOTE_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(evaql_parser.ID, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_simpleId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleId" ):
                listener.enterSimpleId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleId" ):
                listener.exitSimpleId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleId" ):
                return visitor.visitSimpleId(self)
            else:
                return visitor.visitChildren(self)




    def simpleId(self):

        localctx = evaql_parser.SimpleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_simpleId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(evaql_parser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(evaql_parser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(evaql_parser.DOT, 0)

        def uid(self):
            return self.getTypedRuleContext(evaql_parser.UidContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDottedId" ):
                return visitor.visitDottedId(self)
            else:
                return visitor.visitChildren(self)




    def dottedId(self):

        localctx = evaql_parser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dottedId)
        try:
            self.state = 779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 776
                self.match(evaql_parser.DOT_ID)
                pass
            elif token in [evaql_parser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 777
                self.match(evaql_parser.DOT)
                self.state = 778
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(evaql_parser.DECIMAL_LITERAL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(evaql_parser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(evaql_parser.ONE_DECIMAL, 0)

        def TWO_DECIMAL(self):
            return self.getToken(evaql_parser.TWO_DECIMAL, 0)

        def ANYDIM(self):
            return self.getToken(evaql_parser.ANYDIM, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def decimalLiteral(self):

        localctx = evaql_parser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_decimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            _la = self._input.LA(1)
            if not(_la==evaql_parser.ANYDIM or ((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (evaql_parser.ZERO_DECIMAL - 159)) | (1 << (evaql_parser.ONE_DECIMAL - 159)) | (1 << (evaql_parser.TWO_DECIMAL - 159)) | (1 << (evaql_parser.DECIMAL_LITERAL - 159)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(evaql_parser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = evaql_parser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_stringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(evaql_parser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(evaql_parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(evaql_parser.FALSE, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = evaql_parser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            _la = self._input.LA(1)
            if not(_la==evaql_parser.FALSE or _la==evaql_parser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullNotnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(evaql_parser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(evaql_parser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullNotnull" ):
                return visitor.visitNullNotnull(self)
            else:
                return visitor.visitChildren(self)




    def nullNotnull(self):

        localctx = evaql_parser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.NOT:
                self.state = 787
                self.match(evaql_parser.NOT)


            self.state = 790
            _la = self._input.LA(1)
            if not(_la==evaql_parser.NULL_LITERAL or _la==evaql_parser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_SQ_BRACKET(self):
            return self.getToken(evaql_parser.LR_SQ_BRACKET, 0)

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ConstantContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ConstantContext,i)


        def RR_SQ_BRACKET(self):
            return self.getToken(evaql_parser.RR_SQ_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayLiteral" ):
                return visitor.visitArrayLiteral(self)
            else:
                return visitor.visitChildren(self)




    def arrayLiteral(self):

        localctx = evaql_parser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_arrayLiteral)
        self._la = 0 # Token type
        try:
            self.state = 805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.match(evaql_parser.LR_SQ_BRACKET)
                self.state = 793
                self.constant()
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==evaql_parser.COMMA:
                    self.state = 794
                    self.match(evaql_parser.COMMA)
                    self.state = 795
                    self.constant()
                    self.state = 800
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 801
                self.match(evaql_parser.RR_SQ_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 803
                self.match(evaql_parser.LR_SQ_BRACKET)
                self.state = 804
                self.match(evaql_parser.RR_SQ_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def stringLiteral(self):
            return self.getTypedRuleContext(evaql_parser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def MINUS(self):
            return self.getToken(evaql_parser.MINUS, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(evaql_parser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(evaql_parser.REAL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(evaql_parser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(evaql_parser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def arrayLiteral(self):
            return self.getTypedRuleContext(evaql_parser.ArrayLiteralContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = evaql_parser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 807
                self.stringLiteral()
                pass
            elif token in [evaql_parser.ANYDIM, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 808
                self.decimalLiteral()
                pass
            elif token in [evaql_parser.MINUS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 809
                self.match(evaql_parser.MINUS)
                self.state = 810
                self.decimalLiteral()
                pass
            elif token in [evaql_parser.FALSE, evaql_parser.TRUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 811
                self.booleanLiteral()
                pass
            elif token in [evaql_parser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 812
                self.match(evaql_parser.REAL_LITERAL)
                pass
            elif token in [evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.NULL_SPEC_LITERAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.NOT:
                    self.state = 813
                    self.match(evaql_parser.NOT)


                self.state = 816
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.NULL_LITERAL or _la==evaql_parser.NULL_SPEC_LITERAL):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [evaql_parser.LR_SQ_BRACKET]:
                self.enterOuterAlt(localctx, 7)
                self.state = 817
                self.arrayLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT8(self):
            return self.getToken(evaql_parser.INT8, 0)

        def UINT8(self):
            return self.getToken(evaql_parser.UINT8, 0)

        def INT16(self):
            return self.getToken(evaql_parser.INT16, 0)

        def INT32(self):
            return self.getToken(evaql_parser.INT32, 0)

        def INT64(self):
            return self.getToken(evaql_parser.INT64, 0)

        def UNICODE(self):
            return self.getToken(evaql_parser.UNICODE, 0)

        def BOOL(self):
            return self.getToken(evaql_parser.BOOL, 0)

        def FLOAT32(self):
            return self.getToken(evaql_parser.FLOAT32, 0)

        def FLOAT64(self):
            return self.getToken(evaql_parser.FLOAT64, 0)

        def DECIMAL(self):
            return self.getToken(evaql_parser.DECIMAL, 0)

        def STR(self):
            return self.getToken(evaql_parser.STR, 0)

        def DATETIME(self):
            return self.getToken(evaql_parser.DATETIME, 0)

        def ANYTYPE(self):
            return self.getToken(evaql_parser.ANYTYPE, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)




    def arrayType(self):

        localctx = evaql_parser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_arrayType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            _la = self._input.LA(1)
            if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (evaql_parser.INT8 - 93)) | (1 << (evaql_parser.UINT8 - 93)) | (1 << (evaql_parser.INT16 - 93)) | (1 << (evaql_parser.INT32 - 93)) | (1 << (evaql_parser.INT64 - 93)) | (1 << (evaql_parser.UNICODE - 93)) | (1 << (evaql_parser.BOOL - 93)) | (1 << (evaql_parser.FLOAT32 - 93)) | (1 << (evaql_parser.FLOAT64 - 93)) | (1 << (evaql_parser.DECIMAL - 93)) | (1 << (evaql_parser.STR - 93)) | (1 << (evaql_parser.DATETIME - 93)) | (1 << (evaql_parser.ANYTYPE - 93)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IntegerDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER(self):
            return self.getToken(evaql_parser.INTEGER, 0)
        def UNSIGNED(self):
            return self.getToken(evaql_parser.UNSIGNED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerDataType" ):
                listener.enterIntegerDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerDataType" ):
                listener.exitIntegerDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerDataType" ):
                return visitor.visitIntegerDataType(self)
            else:
                return visitor.visitChildren(self)


    class DimensionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(evaql_parser.TEXT, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(evaql_parser.LengthOneDimensionContext,0)

        def FLOAT(self):
            return self.getToken(evaql_parser.FLOAT, 0)
        def lengthTwoDimension(self):
            return self.getTypedRuleContext(evaql_parser.LengthTwoDimensionContext,0)

        def UNSIGNED(self):
            return self.getToken(evaql_parser.UNSIGNED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensionDataType" ):
                listener.enterDimensionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensionDataType" ):
                listener.exitDimensionDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimensionDataType" ):
                return visitor.visitDimensionDataType(self)
            else:
                return visitor.visitChildren(self)


    class AnyDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANYTYPE(self):
            return self.getToken(evaql_parser.ANYTYPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnyDataType" ):
                listener.enterAnyDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnyDataType" ):
                listener.exitAnyDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnyDataType" ):
                return visitor.visitAnyDataType(self)
            else:
                return visitor.visitChildren(self)


    class SimpleDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BOOLEAN(self):
            return self.getToken(evaql_parser.BOOLEAN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataType" ):
                listener.enterSimpleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataType" ):
                listener.exitSimpleDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDataType" ):
                return visitor.visitSimpleDataType(self)
            else:
                return visitor.visitChildren(self)


    class ArrayDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NDARRAY(self):
            return self.getToken(evaql_parser.NDARRAY, 0)
        def arrayType(self):
            return self.getTypedRuleContext(evaql_parser.ArrayTypeContext,0)

        def lengthDimensionList(self):
            return self.getTypedRuleContext(evaql_parser.LengthDimensionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDataType" ):
                listener.enterArrayDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDataType" ):
                listener.exitArrayDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDataType" ):
                return visitor.visitArrayDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = evaql_parser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.BOOLEAN]:
                localctx = evaql_parser.SimpleDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 822
                self.match(evaql_parser.BOOLEAN)
                pass
            elif token in [evaql_parser.TEXT]:
                localctx = evaql_parser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.match(evaql_parser.TEXT)
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.LR_BRACKET:
                    self.state = 824
                    self.lengthOneDimension()


                pass
            elif token in [evaql_parser.INTEGER]:
                localctx = evaql_parser.IntegerDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 827
                self.match(evaql_parser.INTEGER)
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.UNSIGNED:
                    self.state = 828
                    self.match(evaql_parser.UNSIGNED)


                pass
            elif token in [evaql_parser.FLOAT]:
                localctx = evaql_parser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 831
                self.match(evaql_parser.FLOAT)
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.LR_BRACKET:
                    self.state = 832
                    self.lengthTwoDimension()


                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.UNSIGNED:
                    self.state = 835
                    self.match(evaql_parser.UNSIGNED)


                pass
            elif token in [evaql_parser.NDARRAY]:
                localctx = evaql_parser.ArrayDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 838
                self.match(evaql_parser.NDARRAY)
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (evaql_parser.INT8 - 93)) | (1 << (evaql_parser.UINT8 - 93)) | (1 << (evaql_parser.INT16 - 93)) | (1 << (evaql_parser.INT32 - 93)) | (1 << (evaql_parser.INT64 - 93)) | (1 << (evaql_parser.UNICODE - 93)) | (1 << (evaql_parser.BOOL - 93)) | (1 << (evaql_parser.FLOAT32 - 93)) | (1 << (evaql_parser.FLOAT64 - 93)) | (1 << (evaql_parser.DECIMAL - 93)) | (1 << (evaql_parser.STR - 93)) | (1 << (evaql_parser.DATETIME - 93)) | (1 << (evaql_parser.ANYTYPE - 93)))) != 0):
                    self.state = 839
                    self.arrayType()


                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.LR_BRACKET:
                    self.state = 842
                    self.lengthDimensionList()


                pass
            elif token in [evaql_parser.ANYTYPE]:
                localctx = evaql_parser.AnyDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 845
                self.match(evaql_parser.ANYTYPE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthOneDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_lengthOneDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthOneDimension" ):
                listener.enterLengthOneDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthOneDimension" ):
                listener.exitLengthOneDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthOneDimension" ):
                return visitor.visitLengthOneDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthOneDimension(self):

        localctx = evaql_parser.LengthOneDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_lengthOneDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(evaql_parser.LR_BRACKET)
            self.state = 849
            self.decimalLiteral()
            self.state = 850
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(evaql_parser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_lengthTwoDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoDimension" ):
                listener.enterLengthTwoDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoDimension" ):
                listener.exitLengthTwoDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthTwoDimension" ):
                return visitor.visitLengthTwoDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthTwoDimension(self):

        localctx = evaql_parser.LengthTwoDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_lengthTwoDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(evaql_parser.LR_BRACKET)
            self.state = 853
            self.decimalLiteral()
            self.state = 854
            self.match(evaql_parser.COMMA)
            self.state = 855
            self.decimalLiteral()
            self.state = 856
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthDimensionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(evaql_parser.DecimalLiteralContext,i)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_lengthDimensionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthDimensionList" ):
                listener.enterLengthDimensionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthDimensionList" ):
                listener.exitLengthDimensionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthDimensionList" ):
                return visitor.visitLengthDimensionList(self)
            else:
                return visitor.visitChildren(self)




    def lengthDimensionList(self):

        localctx = evaql_parser.LengthDimensionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_lengthDimensionList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(evaql_parser.LR_BRACKET)
            self.state = 864
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 859
                    self.decimalLiteral()
                    self.state = 860
                    self.match(evaql_parser.COMMA) 
                self.state = 866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

            self.state = 867
            self.decimalLiteral()
            self.state = 868
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.UidContext)
            else:
                return self.getTypedRuleContext(evaql_parser.UidContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUidList" ):
                return visitor.visitUidList(self)
            else:
                return visitor.visitChildren(self)




    def uidList(self):

        localctx = evaql_parser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_uidList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.uid()
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 871
                self.match(evaql_parser.COMMA)
                self.state = 872
                self.uid()
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.TableNameContext)
            else:
                return self.getTypedRuleContext(evaql_parser.TableNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTables" ):
                return visitor.visitTables(self)
            else:
                return visitor.visitChildren(self)




    def tables(self):

        localctx = evaql_parser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_tables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.tableName()
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 879
                self.match(evaql_parser.COMMA)
                self.state = 880
                self.tableName()
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNamesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(evaql_parser.IndexColumnNameContext,i)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexColumnNames" ):
                return visitor.visitIndexColumnNames(self)
            else:
                return visitor.visitChildren(self)




    def indexColumnNames(self):

        localctx = evaql_parser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.match(evaql_parser.LR_BRACKET)
            self.state = 887
            self.indexColumnName()
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 888
                self.match(evaql_parser.COMMA)
                self.state = 889
                self.indexColumnName()
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 895
            self.match(evaql_parser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressions" ):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)




    def expressions(self):

        localctx = evaql_parser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.expression(0)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 898
                self.match(evaql_parser.COMMA)
                self.state = 899
                self.expression(0)
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsWithDefaultsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionOrDefaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_expressionsWithDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefaults" ):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefaults" ):
                listener.exitExpressionsWithDefaults(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionsWithDefaults" ):
                return visitor.visitExpressionsWithDefaults(self)
            else:
                return visitor.visitChildren(self)




    def expressionsWithDefaults(self):

        localctx = evaql_parser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.expressionOrDefault()
            self.state = 910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 906
                self.match(evaql_parser.COMMA)
                self.state = 907
                self.expressionOrDefault()
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(evaql_parser.NULL_LITERAL, 0)

        def constant(self):
            return self.getTypedRuleContext(evaql_parser.ConstantContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = evaql_parser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_defaultValue)
        try:
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.match(evaql_parser.NULL_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionOrDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(evaql_parser.DEFAULT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionOrDefault" ):
                return visitor.visitExpressionOrDefault(self)
            else:
                return visitor.visitChildren(self)




    def expressionOrDefault(self):

        localctx = evaql_parser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_expressionOrDefault)
        try:
            self.state = 919
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self.expression(0)
                pass
            elif token in [evaql_parser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.match(evaql_parser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(evaql_parser.IF, 0)

        def EXISTS(self):
            return self.getToken(evaql_parser.EXISTS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExists" ):
                return visitor.visitIfExists(self)
            else:
                return visitor.visitChildren(self)




    def ifExists(self):

        localctx = evaql_parser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(evaql_parser.IF)
            self.state = 922
            self.match(evaql_parser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(evaql_parser.IF, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def EXISTS(self):
            return self.getToken(evaql_parser.EXISTS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNotExists" ):
                return visitor.visitIfNotExists(self)
            else:
                return visitor.visitChildren(self)




    def ifNotExists(self):

        localctx = evaql_parser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(evaql_parser.IF)
            self.state = 925
            self.match(evaql_parser.NOT)
            self.state = 926
            self.match(evaql_parser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def udfFunction(self):
            return self.getTypedRuleContext(evaql_parser.UdfFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfFunctionCall" ):
                return visitor.visitUdfFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(evaql_parser.AggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctionCall" ):
                listener.enterAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctionCall" ):
                listener.exitAggregateFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateFunctionCall" ):
                return visitor.visitAggregateFunctionCall(self)
            else:
                return visitor.visitChildren(self)



    def functionCall(self):

        localctx = evaql_parser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_functionCall)
        try:
            self.state = 930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.ID]:
                localctx = evaql_parser.UdfFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 928
                self.udfFunction()
                pass
            elif token in [evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM]:
                localctx = evaql_parser.AggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 929
                self.aggregateWindowedFunction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UdfFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(evaql_parser.SimpleIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(evaql_parser.FunctionArgsContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def dottedId(self):
            return self.getTypedRuleContext(evaql_parser.DottedIdContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_udfFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunction" ):
                listener.enterUdfFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunction" ):
                listener.exitUdfFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfFunction" ):
                return visitor.visitUdfFunction(self)
            else:
                return visitor.visitChildren(self)




    def udfFunction(self):

        localctx = evaql_parser.UdfFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_udfFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.simpleId()
            self.state = 933
            self.match(evaql_parser.LR_BRACKET)
            self.state = 934
            self.functionArgs()
            self.state = 935
            self.match(evaql_parser.RR_BRACKET)
            self.state = 937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 936
                self.dottedId()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateWindowedFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregator = None # Token
            self.starArg = None # Token

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(evaql_parser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(evaql_parser.AVG, 0)

        def MAX(self):
            return self.getToken(evaql_parser.MAX, 0)

        def MIN(self):
            return self.getToken(evaql_parser.MIN, 0)

        def SUM(self):
            return self.getToken(evaql_parser.SUM, 0)

        def ALL(self):
            return self.getToken(evaql_parser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(evaql_parser.DISTINCT, 0)

        def COUNT(self):
            return self.getToken(evaql_parser.COUNT, 0)

        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_aggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateWindowedFunction" ):
                listener.enterAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateWindowedFunction" ):
                listener.exitAggregateWindowedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateWindowedFunction" ):
                return visitor.visitAggregateWindowedFunction(self)
            else:
                return visitor.visitChildren(self)




    def aggregateWindowedFunction(self):

        localctx = evaql_parser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.AVG, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 939
                _la = self._input.LA(1)
                if not(((((_la - 106)) & ~0x3f) == 0 and ((1 << (_la - 106)) & ((1 << (evaql_parser.AVG - 106)) | (1 << (evaql_parser.MAX - 106)) | (1 << (evaql_parser.MIN - 106)) | (1 << (evaql_parser.SUM - 106)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 940
                self.match(evaql_parser.LR_BRACKET)
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.ALL or _la==evaql_parser.DISTINCT:
                    self.state = 941
                    localctx.aggregator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==evaql_parser.ALL or _la==evaql_parser.DISTINCT):
                        localctx.aggregator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 944
                self.functionArg()
                self.state = 945
                self.match(evaql_parser.RR_BRACKET)
                pass
            elif token in [evaql_parser.COUNT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.match(evaql_parser.COUNT)
                self.state = 948
                self.match(evaql_parser.LR_BRACKET)
                self.state = 954
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [evaql_parser.STAR]:
                    self.state = 949
                    localctx.starArg = self.match(evaql_parser.STAR)
                    pass
                elif token in [evaql_parser.ALL, evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                    self.state = 951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==evaql_parser.ALL:
                        self.state = 950
                        localctx.aggregator = self.match(evaql_parser.ALL)


                    self.state = 953
                    self.functionArg()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 956
                self.match(evaql_parser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ConstantContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(evaql_parser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgs" ):
                return visitor.visitFunctionArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionArgs(self):

        localctx = evaql_parser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 959
                self.constant()
                pass

            elif la_ == 2:
                self.state = 960
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 961
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 962
                self.expression(0)
                pass


            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==evaql_parser.COMMA:
                self.state = 965
                self.match(evaql_parser.COMMA)
                self.state = 970
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 966
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 967
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 968
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 969
                    self.expression(0)
                    pass


                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(evaql_parser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(evaql_parser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)


        def getRuleIndex(self):
            return evaql_parser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArg" ):
                return visitor.visitFunctionArg(self)
            else:
                return visitor.visitChildren(self)




    def functionArg(self):

        localctx = evaql_parser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_functionArg)
        try:
            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 977
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 980
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def IS(self):
            return self.getToken(evaql_parser.IS, 0)
        def TRUE(self):
            return self.getToken(evaql_parser.TRUE, 0)
        def FALSE(self):
            return self.getToken(evaql_parser.FALSE, 0)
        def UNKNOWN(self):
            return self.getToken(evaql_parser.UNKNOWN, 0)
        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsExpression" ):
                return visitor.visitIsExpression(self)
            else:
                return visitor.visitChildren(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)
        def EXCLAMATION_SYMBOL(self):
            return self.getToken(evaql_parser.EXCLAMATION_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpression" ):
                return visitor.visitNotExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(evaql_parser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalExpression" ):
                return visitor.visitLogicalExpression(self)
            else:
                return visitor.visitChildren(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateExpression" ):
                return visitor.visitPredicateExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 194
        self.enterRecursionRule(localctx, 194, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                localctx = evaql_parser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 984
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==evaql_parser.NOT or _la==evaql_parser.EXCLAMATION_SYMBOL):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 985
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = evaql_parser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 986
                self.predicate(0)
                self.state = 987
                self.match(evaql_parser.IS)
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==evaql_parser.NOT:
                    self.state = 988
                    self.match(evaql_parser.NOT)


                self.state = 991
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 27)) & ~0x3f) == 0 and ((1 << (_la - 27)) & ((1 << (evaql_parser.FALSE - 27)) | (1 << (evaql_parser.TRUE - 27)) | (1 << (evaql_parser.UNKNOWN - 27)))) != 0)):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = evaql_parser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 993
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1002
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = evaql_parser.LogicalExpressionContext(self, evaql_parser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 996
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 997
                    self.logicalOperator()
                    self.state = 998
                    self.expression(4) 
                self.state = 1004
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(evaql_parser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(evaql_parser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionAtomPredicate" ):
                return visitor.visitExpressionAtomPredicate(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.quantifier = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(evaql_parser.ComparisonOperatorContext,0)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)
        def ALL(self):
            return self.getToken(evaql_parser.ALL, 0)
        def ANY(self):
            return self.getToken(evaql_parser.ANY, 0)
        def SOME(self):
            return self.getToken(evaql_parser.SOME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryComparisonPredicate" ):
                listener.enterSubqueryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryComparisonPredicate" ):
                listener.exitSubqueryComparisonPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryComparisonPredicate" ):
                return visitor.visitSubqueryComparisonPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BinaryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(evaql_parser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.PredicateContext)
            else:
                return self.getTypedRuleContext(evaql_parser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparisonPredicate" ):
                listener.enterBinaryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparisonPredicate" ):
                listener.exitBinaryComparisonPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryComparisonPredicate" ):
                return visitor.visitBinaryComparisonPredicate(self)
            else:
                return visitor.visitChildren(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def IN(self):
            return self.getToken(evaql_parser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInPredicate" ):
                return visitor.visitInPredicate(self)
            else:
                return visitor.visitChildren(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(evaql_parser.PredicateContext,0)

        def IS(self):
            return self.getToken(evaql_parser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(evaql_parser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsNullPredicate" ):
                return visitor.visitIsNullPredicate(self)
            else:
                return visitor.visitChildren(self)


    class LikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.PredicateContext)
            else:
                return self.getTypedRuleContext(evaql_parser.PredicateContext,i)

        def LIKE(self):
            return self.getToken(evaql_parser.LIKE, 0)
        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)
        def STRING_LITERAL(self):
            return self.getToken(evaql_parser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikePredicate" ):
                listener.enterLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikePredicate" ):
                listener.exitLikePredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikePredicate" ):
                return visitor.visitLikePredicate(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 196
        self.enterRecursionRule(localctx, 196, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = evaql_parser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==evaql_parser.LOCAL_ID:
                self.state = 1006
                self.match(evaql_parser.LOCAL_ID)
                self.state = 1007
                self.match(evaql_parser.VAR_ASSIGN)


            self.state = 1010
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1049
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1047
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                    if la_ == 1:
                        localctx = evaql_parser.BinaryComparisonPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1012
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1013
                        self.comparisonOperator()
                        self.state = 1014
                        localctx.right = self.predicate(5)
                        pass

                    elif la_ == 2:
                        localctx = evaql_parser.InPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1016
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1018
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==evaql_parser.NOT:
                            self.state = 1017
                            self.match(evaql_parser.NOT)


                        self.state = 1020
                        self.match(evaql_parser.IN)
                        self.state = 1021
                        self.match(evaql_parser.LR_BRACKET)
                        self.state = 1024
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [evaql_parser.SELECT]:
                            self.state = 1022
                            self.selectStatement(0)
                            pass
                        elif token in [evaql_parser.ANYDIM, evaql_parser.FALSE, evaql_parser.NOT, evaql_parser.NULL_LITERAL, evaql_parser.TRUE, evaql_parser.AVG, evaql_parser.COUNT, evaql_parser.MAX, evaql_parser.MIN, evaql_parser.SUM, evaql_parser.PLUS, evaql_parser.MINUS, evaql_parser.EXCLAMATION_SYMBOL, evaql_parser.BIT_NOT_OP, evaql_parser.LR_BRACKET, evaql_parser.LR_SQ_BRACKET, evaql_parser.ZERO_DECIMAL, evaql_parser.ONE_DECIMAL, evaql_parser.TWO_DECIMAL, evaql_parser.STRING_LITERAL, evaql_parser.DECIMAL_LITERAL, evaql_parser.REAL_LITERAL, evaql_parser.NULL_SPEC_LITERAL, evaql_parser.ID, evaql_parser.REVERSE_QUOTE_ID, evaql_parser.LOCAL_ID]:
                            self.state = 1023
                            self.expressions()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1026
                        self.match(evaql_parser.RR_BRACKET)
                        pass

                    elif la_ == 3:
                        localctx = evaql_parser.IsNullPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1028
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1029
                        self.match(evaql_parser.IS)
                        self.state = 1030
                        self.nullNotnull()
                        pass

                    elif la_ == 4:
                        localctx = evaql_parser.SubqueryComparisonPredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1031
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1032
                        self.comparisonOperator()
                        self.state = 1033
                        localctx.quantifier = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << evaql_parser.ALL) | (1 << evaql_parser.ANY) | (1 << evaql_parser.SOME))) != 0)):
                            localctx.quantifier = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1034
                        self.match(evaql_parser.LR_BRACKET)
                        self.state = 1035
                        self.selectStatement(0)
                        self.state = 1036
                        self.match(evaql_parser.RR_BRACKET)
                        pass

                    elif la_ == 5:
                        localctx = evaql_parser.LikePredicateContext(self, evaql_parser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 1038
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1040
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==evaql_parser.NOT:
                            self.state = 1039
                            self.match(evaql_parser.NOT)


                        self.state = 1042
                        self.match(evaql_parser.LIKE)
                        self.state = 1043
                        self.predicate(0)
                        self.state = 1045
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                        if la_ == 1:
                            self.state = 1044
                            self.match(evaql_parser.STRING_LITERAL)


                        pass

             
                self.state = 1051
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionAtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return evaql_parser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(evaql_parser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpressionAtom" ):
                return visitor.visitUnaryExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(evaql_parser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpessionAtom" ):
                listener.enterSubqueryExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpessionAtom" ):
                listener.exitSubqueryExpessionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpessionAtom" ):
                return visitor.visitSubqueryExpessionAtom(self)
            else:
                return visitor.visitChildren(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(evaql_parser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpressionAtom" ):
                return visitor.visitConstantExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(evaql_parser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallExpressionAtom" ):
                return visitor.visitFunctionCallExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(evaql_parser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullColumnNameExpressionAtom" ):
                return visitor.visitFullColumnNameExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class BitExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def bitOperator(self):
            return self.getTypedRuleContext(evaql_parser.BitOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpressionAtom" ):
                listener.enterBitExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpressionAtom" ):
                listener.exitBitExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitExpressionAtom" ):
                return visitor.visitBitExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(evaql_parser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(evaql_parser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.COMMA)
            else:
                return self.getToken(evaql_parser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedExpressionAtom" ):
                return visitor.visitNestedExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a evaql_parser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(evaql_parser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(evaql_parser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(evaql_parser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathExpressionAtom" ):
                return visitor.visitMathExpressionAtom(self)
            else:
                return visitor.visitChildren(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = evaql_parser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 198
        self.enterRecursionRule(localctx, 198, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                localctx = evaql_parser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1053
                self.constant()
                pass

            elif la_ == 2:
                localctx = evaql_parser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1054
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = evaql_parser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1055
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = evaql_parser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1056
                self.unaryOperator()
                self.state = 1057
                self.expressionAtom(5)
                pass

            elif la_ == 5:
                localctx = evaql_parser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1059
                self.match(evaql_parser.LR_BRACKET)
                self.state = 1060
                self.expression(0)
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==evaql_parser.COMMA:
                    self.state = 1061
                    self.match(evaql_parser.COMMA)
                    self.state = 1062
                    self.expression(0)
                    self.state = 1067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1068
                self.match(evaql_parser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = evaql_parser.SubqueryExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1070
                self.match(evaql_parser.LR_BRACKET)
                self.state = 1071
                self.selectStatement(0)
                self.state = 1072
                self.match(evaql_parser.RR_BRACKET)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1086
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1084
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        localctx = evaql_parser.BitExpressionAtomContext(self, evaql_parser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1076
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1077
                        self.bitOperator()
                        self.state = 1078
                        localctx.right = self.expressionAtom(3)
                        pass

                    elif la_ == 2:
                        localctx = evaql_parser.MathExpressionAtomContext(self, evaql_parser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 1080
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1081
                        self.mathOperator()
                        self.state = 1082
                        localctx.right = self.expressionAtom(2)
                        pass

             
                self.state = 1088
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(evaql_parser.EXCLAMATION_SYMBOL, 0)

        def BIT_NOT_OP(self):
            return self.getToken(evaql_parser.BIT_NOT_OP, 0)

        def PLUS(self):
            return self.getToken(evaql_parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(evaql_parser.MINUS, 0)

        def NOT(self):
            return self.getToken(evaql_parser.NOT, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = evaql_parser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            _la = self._input.LA(1)
            if not(_la==evaql_parser.NOT or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & ((1 << (evaql_parser.PLUS - 138)) | (1 << (evaql_parser.MINUS - 138)) | (1 << (evaql_parser.EXCLAMATION_SYMBOL - 138)) | (1 << (evaql_parser.BIT_NOT_OP - 138)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(evaql_parser.EQUAL_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(evaql_parser.GREATER_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(evaql_parser.LESS_SYMBOL, 0)

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(evaql_parser.EXCLAMATION_SYMBOL, 0)

        def AT_SIGN(self):
            return self.getToken(evaql_parser.AT_SIGN, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = evaql_parser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_comparisonOperator)
        try:
            self.state = 1109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1093
                self.match(evaql_parser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1094
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1095
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1096
                self.match(evaql_parser.GREATER_SYMBOL)
                self.state = 1097
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1098
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1099
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1100
                self.match(evaql_parser.EXCLAMATION_SYMBOL)
                self.state = 1101
                self.match(evaql_parser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1102
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1103
                self.match(evaql_parser.EQUAL_SYMBOL)
                self.state = 1104
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1105
                self.match(evaql_parser.AT_SIGN)
                self.state = 1106
                self.match(evaql_parser.GREATER_SYMBOL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1107
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1108
                self.match(evaql_parser.AT_SIGN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(evaql_parser.AND, 0)

        def BIT_AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.BIT_AND_OP)
            else:
                return self.getToken(evaql_parser.BIT_AND_OP, i)

        def XOR(self):
            return self.getToken(evaql_parser.XOR, 0)

        def OR(self):
            return self.getToken(evaql_parser.OR, 0)

        def BIT_OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.BIT_OR_OP)
            else:
                return self.getToken(evaql_parser.BIT_OR_OP, i)

        def getRuleIndex(self):
            return evaql_parser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOperator" ):
                return visitor.visitLogicalOperator(self)
            else:
                return visitor.visitChildren(self)




    def logicalOperator(self):

        localctx = evaql_parser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_logicalOperator)
        try:
            self.state = 1118
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.match(evaql_parser.AND)
                pass
            elif token in [evaql_parser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.match(evaql_parser.BIT_AND_OP)
                self.state = 1113
                self.match(evaql_parser.BIT_AND_OP)
                pass
            elif token in [evaql_parser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1114
                self.match(evaql_parser.XOR)
                pass
            elif token in [evaql_parser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1115
                self.match(evaql_parser.OR)
                pass
            elif token in [evaql_parser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1116
                self.match(evaql_parser.BIT_OR_OP)
                self.state = 1117
                self.match(evaql_parser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.LESS_SYMBOL)
            else:
                return self.getToken(evaql_parser.LESS_SYMBOL, i)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(evaql_parser.GREATER_SYMBOL)
            else:
                return self.getToken(evaql_parser.GREATER_SYMBOL, i)

        def BIT_AND_OP(self):
            return self.getToken(evaql_parser.BIT_AND_OP, 0)

        def BIT_XOR_OP(self):
            return self.getToken(evaql_parser.BIT_XOR_OP, 0)

        def BIT_OR_OP(self):
            return self.getToken(evaql_parser.BIT_OR_OP, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_bitOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOperator" ):
                listener.enterBitOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOperator" ):
                listener.exitBitOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOperator" ):
                return visitor.visitBitOperator(self)
            else:
                return visitor.visitChildren(self)




    def bitOperator(self):

        localctx = evaql_parser.BitOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_bitOperator)
        try:
            self.state = 1127
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [evaql_parser.LESS_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.match(evaql_parser.LESS_SYMBOL)
                self.state = 1121
                self.match(evaql_parser.LESS_SYMBOL)
                pass
            elif token in [evaql_parser.GREATER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1122
                self.match(evaql_parser.GREATER_SYMBOL)
                self.state = 1123
                self.match(evaql_parser.GREATER_SYMBOL)
                pass
            elif token in [evaql_parser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1124
                self.match(evaql_parser.BIT_AND_OP)
                pass
            elif token in [evaql_parser.BIT_XOR_OP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1125
                self.match(evaql_parser.BIT_XOR_OP)
                pass
            elif token in [evaql_parser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1126
                self.match(evaql_parser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(evaql_parser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(evaql_parser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(evaql_parser.MODULE, 0)

        def DIV(self):
            return self.getToken(evaql_parser.DIV, 0)

        def MOD(self):
            return self.getToken(evaql_parser.MOD, 0)

        def PLUS(self):
            return self.getToken(evaql_parser.PLUS, 0)

        def MINUS(self):
            return self.getToken(evaql_parser.MINUS, 0)

        def MINUSMINUS(self):
            return self.getToken(evaql_parser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return evaql_parser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathOperator" ):
                return visitor.visitMathOperator(self)
            else:
                return visitor.visitChildren(self)




    def mathOperator(self):

        localctx = evaql_parser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            _la = self._input.LA(1)
            if not(((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (evaql_parser.STAR - 135)) | (1 << (evaql_parser.DIVIDE - 135)) | (1 << (evaql_parser.MODULE - 135)) | (1 << (evaql_parser.PLUS - 135)) | (1 << (evaql_parser.MINUSMINUS - 135)) | (1 << (evaql_parser.MINUS - 135)) | (1 << (evaql_parser.DIV - 135)) | (1 << (evaql_parser.MOD - 135)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[28] = self.selectStatement_sempred
        self._predicates[97] = self.expression_sempred
        self._predicates[98] = self.predicate_sempred
        self._predicates[99] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def selectStatement_sempred(self, localctx:SelectStatementContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         




