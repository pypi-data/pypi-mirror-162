# Generated by Django 3.2.5 on 2022-08-03 09:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from finflo.validators import validate_postive


def create_flow_model(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    flowmodel = apps.get_model("finflow.Flowmodel")
    try:
        a = settings.FINFLO['WORK_MODEL']
        db_alias = schema_editor.connection.alias
        for i in a:
            flowmodel.objects.using(db_alias).create(description = i)
    except:
        raise LookupError("Couldn't find work_model in settings.py check documentation")

def create_initial_draft(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    states = apps.get_model("finflo.States")
    db_alias = schema_editor.connection.alias
    states.objects.using(db_alias).create(description = "DRAFT")
    
class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Flowmodel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': '1. FlowModel',
            },
        ),
        migrations.RunPython(create_flow_model),
        migrations.CreateModel(
            name='States',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': '2. States',
            },
        ),
        migrations.RunPython(create_initial_draft),
        migrations.CreateModel(
            name='Temp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='TransitionManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('t_id', models.IntegerField()),
                ('type', models.CharField(max_length=255, unique=True)),
                ('sub_sign', models.IntegerField(default=0, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='workflowitems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('initial_state', models.CharField(default='CREATED', max_length=50)),
                ('interim_state', models.CharField(default='CREATED', max_length=50)),
                ('final_state', models.CharField(default='CREATED', max_length=50)),
                ('action', models.CharField(blank=True, default='CREATED', max_length=25, null=True)),
                ('subaction', models.CharField(blank=True, max_length=55, null=True)),
                ('previous_action', models.CharField(blank=True, max_length=55, null=True)),
                ('model_type', models.CharField(blank=True, max_length=55, null=True)),
                ('comments', models.CharField(blank=True, max_length=500, null=True)),
                ('is_read', models.BooleanField(blank=True, default=True, null=True)),
                ('current_from_party', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wf_from_party', to='accounts.parties')),
                ('current_to_party', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.parties')),
                ('event_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('transitionmanager', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='finflo.transitionmanager')),
            ],
            options={
                'verbose_name_plural': 'WorkFlowItem',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='workevents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(blank=True, default='CREATED', max_length=25, null=True)),
                ('subaction', models.CharField(blank=True, default='CREATED', max_length=55, null=True)),
                ('initial_state', models.CharField(default='CREATED', max_length=50)),
                ('interim_state', models.CharField(default='CREATED', max_length=50)),
                ('final_state', models.CharField(default='CREATED', max_length=50)),
                ('end_value', models.CharField(blank=True, max_length=55, null=True)),
                ('is_read', models.BooleanField(blank=True, default=True, null=True)),
                ('final_value', models.CharField(blank=True, max_length=55, null=True)),
                ('comments', models.CharField(blank=True, max_length=500, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(blank=True, max_length=55, null=True)),
                ('event_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('from_party', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='we_from_party', to='accounts.parties')),
                ('to_party', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.parties')),
                ('workflowitems', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='WorkFlowEvents', to='finflo.workflowitems')),
            ],
            options={
                'verbose_name_plural': 'WorkFlowEvent',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, help_text='e.g., SUBMIT , DELETE', max_length=255, null=True)),
                ('sign_required', models.IntegerField(default=0, help_text='IMPORTANT : if 0 means initial_transition ', validators=[validate_postive])),
                ('from_party', models.ForeignKey(blank=True, help_text='this field is optional', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='from_transition_party', to='accounts.parties')),
                ('from_state', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='action_from_state', to='finflo.states')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finflo.flowmodel')),
                ('to_party', models.ForeignKey(blank=True, help_text='this field is optional', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='to_last_party', to='accounts.parties')),
                ('to_state', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='finflo.states')),
            ],
            options={
                'verbose_name_plural': '3. Action',
                'unique_together': {('description', 'model')},
            },
        ),
    ]
