(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* :Title: Class *)
(* :Context: SciDraw` *)
(* :Summary: Class declarations *)
(* :Author: Mark A. Caprio, Department of Physics, University of Notre Dame *)
(* :Copyright: Copyright FIGYEAR, Mark A. Caprio *)
(* :Package Version: FIGVERSION *)
(* :Mathematica Version: MATHVERSION *)
(* :Discussion: FIGDISCUSSION *)
(* :History: See main package file. *)


BeginPackage["SciDraw`",SciDraw`Private`$ExternalContexts];


Unprotect[Evaluate[$Context<>"*"]];


Begin["`Private`"];





(*SetOptions[DefineOptions,{TrapUninheritableOptions\[Rule]True,TrapUnknownOptions\[Rule]True}];*)


DeclareClass[FigAnchor,{"Point","Angle","Offset"},{},Replace->True];


DeclareClass[FigElement,{"Primatives","SortKey"},{}];
DeclareClass[FigLineElement,FigElement,{},{}];
DeclareClass[FigPolygonElement,FigElement,{},{}];
DeclareClass[FigPointElement,FigElement,{},{}];
DeclareClass[FigVerbatimElement,FigElement,{},{}];
DeclareClass[FigTextElement,FigElement,{"Center","Radius","Pivot","Rotation"},{}];
DeclareClass[FigTextFrameElement,FigElement,{},{}];


Options[FigCompositeElement]={Show->True,Clip->False,Rasterize->False,ImageResolution->300};
DeclareClass[FigCompositeElement,FigElement,{},{}];


(*DeclareClass[FigObject,{"OptionValues"},{"MakeAnchor","MakeBoundingBox"}];*)
DeclareClass[FigObject,{},{"MakeAnchor","MakeBoundingBox"}];


DefineOptions[FigObject,
{
(* overall appearance *)
Show->True,Color->Black,Opacity->None,
Directives->{},
Layer->Automatic,

(* outline *)
ShowLine->Default, 
LineColor->Default,LineOpacity->Default,
LineThickness->1,LineDashing->None,LineCapForm->None,LineJoinForm->{"Miter",3.25},
LineDirectives->{},

(* fill *)
ShowFill->Default, FillColor->Default,FillOpacity->Default,
FillDirectives->{},

(* point *)
ShowPoint->Default, PointColor->Default,PointOpacity->Default,
PointSize->3,
PointDirectives->{},

(* text appearance *)
ShowText->Default,TextColor->Default,TextOpacity->Default,
FontFamily->"Times",FontSize->16,FontWeight->Plain,FontSlant->Plain,FontTracking ->Plain,FontVariations->{},
TextStyleOptions->{},  (* possibly including directives, though interaction with options unpredictable *)

(* text background and frame *)
TextBackground->None,
TextFrame->False,TextFrameColor->Default,TextRoundingRadius->None,
TextMargin->None,TextPadding->False,

(* text positioning *)
TextOffset->Automatic,TextOrientation->Automatic,TextRectify->True,TextBuffer->None,TextNudge->None,

(* style *)
Style->None,

(* accessories *)
Prolog:>None,Epilog:>None,

(* diagnostic *)
Debug->False
(*PrintTiming\[Rule]False*)

}
];


(*
DeclareClass[FigStyle,{"StyleList"},{"SymbolOptions"},Replace\[Rule]True];
DefineOptions[FigStyle,
{
BaseStyle\[Rule]None,
Debug\[Rule]False
}
];
*)


DeclareClass[
FigWindow,
{
"TFunction",
"Region"
},
{
"UserRegion",
"CanvasRegion",
"TFunction",
"InverseTFunction",
"DeltaTFunction",
"ScaledTFunction",
"ScaledDeltaTFunction"
}
];


End[];


Protect[Evaluate[$Context<>"*"]];
Unprotect[Evaluate[$Context<>"$*"]];
EndPackage[];
